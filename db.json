{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_drafts/Start-with-Flutter-Ⅱ.md","hash":"dfcf87142a7396b93e6dfc9fdaa4b4a3e508afa5","modified":1716539982312},{"_id":"source/_posts/Beyond-Compare-probation.md","hash":"4422176056b844f833afa37e05201c96cb03852d","modified":1716168264405},{"_id":"source/_posts/Build-gallery-with-PicGo.md","hash":"8158bde1176726a9ac0d138fc565c575333efeb8","modified":1716167641266},{"_id":"source/_posts/Compile-FFMPEG-on-Windows.md","hash":"e31f18c0128d342b2d1b1d0f10fa92d4e1ddd94b","modified":1716168116323},{"_id":"source/_posts/Dart-brief.md","hash":"aa7a0c047215fb678784233f98d64fb279bd7af4","modified":1716168363188},{"_id":"source/_posts/Hexo-environment-configuration.md","hash":"cb587c9feb13d2f6127de96ce4a89e962284335f","modified":1716209560240},{"_id":"source/_posts/Swift-Algorithm-2-DoublePointer.md","hash":"14cd7bd0fd1e32e6fe22dc6acffbe1b3915eb5bb","modified":1716792568725},{"_id":"source/_posts/Swift-Algorithm-1-Hash.md","hash":"7243c98ee6b0a69bb95cf06e335269f2bdb6e0f0","modified":1716781770095},{"_id":"source/_posts/Markdown-brief.md","hash":"a353148611ec20f911bd51c843989d6058d2106b","modified":1716204866438},{"_id":"source/_posts/Start-with-Flutter-Ⅰ.md","hash":"2e475d1d6928fb38088917000f1796a218dfca85","modified":1716451573258},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1716017164009},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1716017164009},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1716017164008},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1716017164003},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1716017163989},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1716017164003},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1716017164003},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1716017164003},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1716017164008},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1716017164008},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1716017164004},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1716017164003},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1716017164008},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1716017164006},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1716017164007},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1716017164005},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1716017163989},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1716017163990},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1716017163989},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1716017163989},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1716017163994},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1716017163990},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1716017164009},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1716017163990},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1716017163993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1716017163992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1716017163994},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1716017163994},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1716017163993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1716017163993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1716017163994},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1716017163992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1716017163993},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1716017163992},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1716017163995},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1716017163995},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1716017163994},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1716017163995},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1716017163996},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1716017163996},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1716017163997},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1716017163999},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1716017164001},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1716017164002},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1716017164002},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1716017163992},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1716017163991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1716017163991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1716017163991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1716017163991},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1716017164001},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1716017163999},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1716017164000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1716017163991},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1716017164001},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1716017164000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1716017164001},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1716017163999},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1716017164001},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1716017163998},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1716017163998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1716017164000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1716017164000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1716017163997},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1716017164002},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1716017163998},{"_id":"public/2024/05/25/Swift-Algorithm-2-DoublePointer/index.html","hash":"657575ada9a12ac3d4f83448adb7357e483b31be","modified":1716792728711},{"_id":"public/2024/05/23/Swift-Algorithm-1-Hash/index.html","hash":"1dea88d45854775b2b5338ec2733b0099c4e4c47","modified":1716792728711},{"_id":"public/2024/05/20/Start-with-Flutter-Ⅰ/index.html","hash":"d5cd9f37a4a3fd8e0d47addf36931470fb81f627","modified":1716792728711},{"_id":"public/2024/05/20/Dart-brief/index.html","hash":"6a10062149253ff9aa7e0db5305ac42b3286d064","modified":1716792728711},{"_id":"public/2024/05/20/Beyond-Compare-probation/index.html","hash":"29581d29244b7dd758184c4d83be213a1244ba43","modified":1716792728711},{"_id":"public/2024/05/20/Compile-FFMPEG-on-Windows/index.html","hash":"ab2c4388263c69acf817056a06f713f1d5385215","modified":1716792728711},{"_id":"public/2024/05/20/Hexo-environment-configuration/index.html","hash":"f7c0d3bcd5a09ca4e954212e922b456e3f21ee21","modified":1716792728711},{"_id":"public/2024/05/20/Build-gallery-with-PicGo/index.html","hash":"cd6e8709fd76d1e61ff0b3b2e8e35a66971a6773","modified":1716792728711},{"_id":"public/2024/05/20/Markdown-brief/index.html","hash":"d80c193d8b79e943f262d53c3e6850437686d7fa","modified":1716792728711},{"_id":"public/archives/index.html","hash":"543296eab7b6afc20be2d3b44d21ab318c42dc57","modified":1716792728711},{"_id":"public/archives/2024/index.html","hash":"2da61800c70c311e7ce5ca9d5d47ff977f3eb73d","modified":1716792728711},{"_id":"public/archives/2024/05/index.html","hash":"b66a0dae2d83e878004827092adf7afdd4ad63e7","modified":1716792728711},{"_id":"public/tags/工具/index.html","hash":"436e166bd39e754a21530a3e715bbbc4db15520f","modified":1716792728711},{"_id":"public/tags/源码/index.html","hash":"9951669385bd5f16978f2b475c99b0f62ac72578","modified":1716792728711},{"_id":"public/tags/语法/index.html","hash":"12c97a144b8d372589830d774d08a1bf1a35b5af","modified":1716792728711},{"_id":"public/tags/代码人生/index.html","hash":"e422fc3d3fca4c805031980e9a634c225a9f891a","modified":1716792728711},{"_id":"public/tags/Swift-算法/index.html","hash":"ee0e0511e2265c8adf4a5f25ff7c91ce3342b9f0","modified":1716792728711},{"_id":"public/index.html","hash":"08e07308bb91321566ff922d60231e7e1a770cb2","modified":1716792728711},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1716792728711},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1716792728711},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1716792728711},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1716792728711},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1716792728711},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1716792728711}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Flutter 入门指引 Ⅱ","date":"2024-05-23T07:55:16.000Z","_content":"# 目录\n[前言](#1)\n[界面交互与需求分析](#2)\n[静态界面构建](#3)\n[状态数据与界面更新](#4)\n[动画](#5)\n\n<h1 id=\"1\">前言</h1>\n\n本文基于掘金小册[《Flutter 入门教程》](https://juejin.cn/book/7212822723330834487)，是笔者学习了该小册后的记录。<br>\n该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br>\n由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第二篇，介绍第一个实践项目，猜数字。<br>\n\n<h1 id=\"2\">界面交互与需求分析</h1>\n\n- 点击按钮生成 0～99 的随机数，并且将随机数以密文格式显示\n- 头部的输入框，点击时弹出软键盘，可输入猜测的数字\n\n<table>\n    <tr>\n        <th>点击生成随机数</th>\n        <th>可输入文字</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231630336.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231712870.awebp\">\n    </tr>\n</table>\n\n- 点击右上角的运行按键，可以比较输入值与生成值，并给出动画提示。\n\n<table>\n    <tr>\n        <th>比较结果：小了</th>\n        <th>比较结果：大了</th>\n        <th>比较结果：相等</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231746217.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747405.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747218.awebp\">\n    </tr>\n</table>\n","source":"_drafts/Start-with-Flutter-Ⅱ.md","raw":"---\ntitle: Flutter 入门指引 Ⅱ\ndate: 2024-05-23 15:55:16\ntags:\n---\n# 目录\n[前言](#1)\n[界面交互与需求分析](#2)\n[静态界面构建](#3)\n[状态数据与界面更新](#4)\n[动画](#5)\n\n<h1 id=\"1\">前言</h1>\n\n本文基于掘金小册[《Flutter 入门教程》](https://juejin.cn/book/7212822723330834487)，是笔者学习了该小册后的记录。<br>\n该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br>\n由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第二篇，介绍第一个实践项目，猜数字。<br>\n\n<h1 id=\"2\">界面交互与需求分析</h1>\n\n- 点击按钮生成 0～99 的随机数，并且将随机数以密文格式显示\n- 头部的输入框，点击时弹出软键盘，可输入猜测的数字\n\n<table>\n    <tr>\n        <th>点击生成随机数</th>\n        <th>可输入文字</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231630336.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231712870.awebp\">\n    </tr>\n</table>\n\n- 点击右上角的运行按键，可以比较输入值与生成值，并给出动画提示。\n\n<table>\n    <tr>\n        <th>比较结果：小了</th>\n        <th>比较结果：大了</th>\n        <th>比较结果：相等</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231746217.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747405.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747218.awebp\">\n    </tr>\n</table>\n","slug":"Start-with-Flutter-Ⅱ","published":0,"updated":"2024-05-24T08:39:42.312Z","comments":1,"layout":"post","photos":[],"_id":"clwom2bis00006bqeh5l89qy4","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">界面交互与需求分析</a><br><a href=\"#3\">静态界面构建</a><br><a href=\"#4\">状态数据与界面更新</a><br><a href=\"#5\">动画</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文基于掘金小册<a href=\"https://juejin.cn/book/7212822723330834487\">《Flutter 入门教程》</a>，是笔者学习了该小册后的记录。<br><br>该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br><br>由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第二篇，介绍第一个实践项目，猜数字。<br></p>\n<h1 id=\"2\">界面交互与需求分析</h1>\n\n<ul>\n<li>点击按钮生成 0～99 的随机数，并且将随机数以密文格式显示</li>\n<li>头部的输入框，点击时弹出软键盘，可输入猜测的数字</li>\n</ul>\n<table>\n    <tr>\n        <th>点击生成随机数</th>\n        <th>可输入文字</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231630336.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231712870.awebp\">\n    </tr>\n</table>\n\n<ul>\n<li>点击右上角的运行按键，可以比较输入值与生成值，并给出动画提示。</li>\n</ul>\n<table>\n    <tr>\n        <th>比较结果：小了</th>\n        <th>比较结果：大了</th>\n        <th>比较结果：相等</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231746217.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747405.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747218.awebp\">\n    </tr>\n</table>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">界面交互与需求分析</a><br><a href=\"#3\">静态界面构建</a><br><a href=\"#4\">状态数据与界面更新</a><br><a href=\"#5\">动画</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文基于掘金小册<a href=\"https://juejin.cn/book/7212822723330834487\">《Flutter 入门教程》</a>，是笔者学习了该小册后的记录。<br><br>该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br><br>由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第二篇，介绍第一个实践项目，猜数字。<br></p>\n<h1 id=\"2\">界面交互与需求分析</h1>\n\n<ul>\n<li>点击按钮生成 0～99 的随机数，并且将随机数以密文格式显示</li>\n<li>头部的输入框，点击时弹出软键盘，可输入猜测的数字</li>\n</ul>\n<table>\n    <tr>\n        <th>点击生成随机数</th>\n        <th>可输入文字</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231630336.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231712870.awebp\">\n    </tr>\n</table>\n\n<ul>\n<li>点击右上角的运行按键，可以比较输入值与生成值，并给出动画提示。</li>\n</ul>\n<table>\n    <tr>\n        <th>比较结果：小了</th>\n        <th>比较结果：大了</th>\n        <th>比较结果：相等</th>\n    </tr>\n    <tr>\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231746217.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747405.awebp\">\n        <td><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405231747218.awebp\">\n    </tr>\n</table>\n"},{"title":"Beyond Compare 试用期","date":"2024-05-20T01:23:46.000Z","_content":"# 目录\n[前言](#1)\n[MacOS 下的解决方案](#2)\n[Windows 下的解决方案](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本教程旨在记录笔者是如何解决使用 **Beyond Compare** 时遇到试用期到期问题。<br>\nBeyond Compare 软件可以直接在[官网](https://www.scootersoftware.com/download)上下载，笔者自己使用的 Beyond Compare 4。<br>\n\n<h1 id=\"2\">MacOS 下的解决方案</h1>\n\n 第一步，进入 Beyond Compare 软件应用目录，路径如下：<br>\n\n    /Applications/Beyond Compare.app/Contents/MacOS\n\n第二步，修改启动程序文件 BCompare 为 BCompare.real<br>\n\n    mv Bcompare Bcompare.real\n\n第三步，创建一个新的启动程序文件 BCompare<br>\n\n    vi BCompare\n\n文件内容如下：<br>\n\n```SHELL\n#!/bin/bash\n# 删除注册信息\nrm \"/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat\"\n# 启动真实的Bcompare文件\n\"`dirname \"$0\"`\"/BCompare.real $@\n```\n\n该脚本的作用时，删除 Beyond Compare 下的注册信息文件，然后再启动真实的 BCompare 启动脚本。<br>\n第四步，给新创建的启动脚本权限：<br>\n\n    chmod a+x /Applications/Beyond\\ Compare.app/Contents/MacOS/BCompare\n\n完成以上步骤后，打开 Beyond Compare 就可以正常使用了。你可以注意到，每天打开后显示的剩余试用期时间都是满的。<br>\n\n<h1 id=\"3\">Windows 下的解决方案</h1>\n\n第一步，打开注册表<br>\n使用 `Win+R` 快捷键打开运行对话框，输入 `regedit` 打开注册表\n第二步，找到 Beyond Compare 在注册表中的路径<br>\n\n    计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Scooter Software\\Beyond Compare 4\n\n第三步，删除其中的 CacheID 后，重新打开软件，可以看到又有30天的试用期了。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090954164.png)\n### 添加定时任务\n每次等软件到期后再去删除注册表信息很麻烦，可以在计算机管理中添加一个计划程序。<br>\n第一步，打开计算机管理<br>\n使用 `Win+R` 快捷键打开运行对话框，输入 `compmgmt.msc` 即可打开计算机管理。<br>\n第二步，选择任务计划程序库，导入任务<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090959396.png)\n第三步，将下面 xml 代码保存为 xml 文件，用作第二步中导入任务<br>\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2023-12-30T10:40:05.8128741</Date>\n    <Author>JiacaiGuo</Author>\n    <Description>清除Beyond Compare 4 有30天试用期</Description>\n    <URI>\\Beyond Compare Clear Trial</URI>\n  </RegistrationInfo>\n  <Triggers>\n    <CalendarTrigger>\n      <StartBoundary>2023-12-30T10:00:00</StartBoundary>\n      <Enabled>true</Enabled>\n      <ScheduleByMonth>\n        <DaysOfMonth>\n          <Day>1</Day>\n        </DaysOfMonth>\n        <Months>\n          <January />\n          <February />\n          <March />\n          <April />\n          <May />\n          <June />\n          <July />\n          <August />\n          <September />\n          <October />\n          <November />\n          <December />\n        </Months>\n      </ScheduleByMonth>\n    </CalendarTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-21-1882866539-4086113214-3650236343-1001</UserId>\n      <LogonType>InteractiveToken</LogonType>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\Windows\\System32\\reg.exe</Command>\n      <Arguments>delete \"hkey_current_user\\software\\scooter software\\beyond compare 4\" /v cacheid /f</Arguments>\n    </Exec>\n  </Actions>\n</Task>\n```\n\n其中， `<Author>` 、 `<UserId>` 请改为本机信息。可以通过导出其他的本机计划来查看这两个信息。<br>","source":"_posts/Beyond-Compare-probation.md","raw":"---\ntitle: Beyond Compare 试用期 \ndate: 2024-05-20 09:23:46\ntags: 工具\n---\n# 目录\n[前言](#1)\n[MacOS 下的解决方案](#2)\n[Windows 下的解决方案](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本教程旨在记录笔者是如何解决使用 **Beyond Compare** 时遇到试用期到期问题。<br>\nBeyond Compare 软件可以直接在[官网](https://www.scootersoftware.com/download)上下载，笔者自己使用的 Beyond Compare 4。<br>\n\n<h1 id=\"2\">MacOS 下的解决方案</h1>\n\n 第一步，进入 Beyond Compare 软件应用目录，路径如下：<br>\n\n    /Applications/Beyond Compare.app/Contents/MacOS\n\n第二步，修改启动程序文件 BCompare 为 BCompare.real<br>\n\n    mv Bcompare Bcompare.real\n\n第三步，创建一个新的启动程序文件 BCompare<br>\n\n    vi BCompare\n\n文件内容如下：<br>\n\n```SHELL\n#!/bin/bash\n# 删除注册信息\nrm \"/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat\"\n# 启动真实的Bcompare文件\n\"`dirname \"$0\"`\"/BCompare.real $@\n```\n\n该脚本的作用时，删除 Beyond Compare 下的注册信息文件，然后再启动真实的 BCompare 启动脚本。<br>\n第四步，给新创建的启动脚本权限：<br>\n\n    chmod a+x /Applications/Beyond\\ Compare.app/Contents/MacOS/BCompare\n\n完成以上步骤后，打开 Beyond Compare 就可以正常使用了。你可以注意到，每天打开后显示的剩余试用期时间都是满的。<br>\n\n<h1 id=\"3\">Windows 下的解决方案</h1>\n\n第一步，打开注册表<br>\n使用 `Win+R` 快捷键打开运行对话框，输入 `regedit` 打开注册表\n第二步，找到 Beyond Compare 在注册表中的路径<br>\n\n    计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Scooter Software\\Beyond Compare 4\n\n第三步，删除其中的 CacheID 后，重新打开软件，可以看到又有30天的试用期了。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090954164.png)\n### 添加定时任务\n每次等软件到期后再去删除注册表信息很麻烦，可以在计算机管理中添加一个计划程序。<br>\n第一步，打开计算机管理<br>\n使用 `Win+R` 快捷键打开运行对话框，输入 `compmgmt.msc` 即可打开计算机管理。<br>\n第二步，选择任务计划程序库，导入任务<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090959396.png)\n第三步，将下面 xml 代码保存为 xml 文件，用作第二步中导入任务<br>\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2023-12-30T10:40:05.8128741</Date>\n    <Author>JiacaiGuo</Author>\n    <Description>清除Beyond Compare 4 有30天试用期</Description>\n    <URI>\\Beyond Compare Clear Trial</URI>\n  </RegistrationInfo>\n  <Triggers>\n    <CalendarTrigger>\n      <StartBoundary>2023-12-30T10:00:00</StartBoundary>\n      <Enabled>true</Enabled>\n      <ScheduleByMonth>\n        <DaysOfMonth>\n          <Day>1</Day>\n        </DaysOfMonth>\n        <Months>\n          <January />\n          <February />\n          <March />\n          <April />\n          <May />\n          <June />\n          <July />\n          <August />\n          <September />\n          <October />\n          <November />\n          <December />\n        </Months>\n      </ScheduleByMonth>\n    </CalendarTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-21-1882866539-4086113214-3650236343-1001</UserId>\n      <LogonType>InteractiveToken</LogonType>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\Windows\\System32\\reg.exe</Command>\n      <Arguments>delete \"hkey_current_user\\software\\scooter software\\beyond compare 4\" /v cacheid /f</Arguments>\n    </Exec>\n  </Actions>\n</Task>\n```\n\n其中， `<Author>` 、 `<UserId>` 请改为本机信息。可以通过导出其他的本机计划来查看这两个信息。<br>","slug":"Beyond-Compare-probation","published":1,"updated":"2024-05-20T01:24:24.405Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biv00016bqe2uyq7l8o","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">MacOS 下的解决方案</a><br><a href=\"#3\">Windows 下的解决方案</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程旨在记录笔者是如何解决使用 <strong>Beyond Compare</strong> 时遇到试用期到期问题。<br><br>Beyond Compare 软件可以直接在<a href=\"https://www.scootersoftware.com/download\">官网</a>上下载，笔者自己使用的 Beyond Compare 4。<br></p>\n<h1 id=\"2\">MacOS 下的解决方案</h1>\n\n<p> 第一步，进入 Beyond Compare 软件应用目录，路径如下：<br></p>\n<pre><code>/Applications/Beyond Compare.app/Contents/MacOS\n</code></pre>\n<p>第二步，修改启动程序文件 BCompare 为 BCompare.real<br></p>\n<pre><code>mv Bcompare Bcompare.real\n</code></pre>\n<p>第三步，创建一个新的启动程序文件 BCompare<br></p>\n<pre><code>vi BCompare\n</code></pre>\n<p>文件内容如下：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除注册信息</span></span><br><span class=\"line\">rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动真实的Bcompare文件</span></span><br><span class=\"line\">&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@</span><br></pre></td></tr></table></figure>\n\n<p>该脚本的作用时，删除 Beyond Compare 下的注册信息文件，然后再启动真实的 BCompare 启动脚本。<br><br>第四步，给新创建的启动脚本权限：<br></p>\n<pre><code>chmod a+x /Applications/Beyond\\ Compare.app/Contents/MacOS/BCompare\n</code></pre>\n<p>完成以上步骤后，打开 Beyond Compare 就可以正常使用了。你可以注意到，每天打开后显示的剩余试用期时间都是满的。<br></p>\n<h1 id=\"3\">Windows 下的解决方案</h1>\n\n<p>第一步，打开注册表<br><br>使用 <code>Win+R</code> 快捷键打开运行对话框，输入 <code>regedit</code> 打开注册表<br>第二步，找到 Beyond Compare 在注册表中的路径<br></p>\n<pre><code>计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Scooter Software\\Beyond Compare 4\n</code></pre>\n<p>第三步，删除其中的 CacheID 后，重新打开软件，可以看到又有30天的试用期了。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090954164.png\"></p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><p>每次等软件到期后再去删除注册表信息很麻烦，可以在计算机管理中添加一个计划程序。<br><br>第一步，打开计算机管理<br><br>使用 <code>Win+R</code> 快捷键打开运行对话框，输入 <code>compmgmt.msc</code> 即可打开计算机管理。<br><br>第二步，选择任务计划程序库，导入任务<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090959396.png\"><br>第三步，将下面 xml 代码保存为 xml 文件，用作第二步中导入任务<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-16&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Task</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://schemas.microsoft.com/windows/2004/02/mit/task&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RegistrationInfo</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Date</span>&gt;</span>2023-12-30T10:40:05.8128741<span class=\"tag\">&lt;/<span class=\"name\">Date</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Author</span>&gt;</span>JiacaiGuo<span class=\"tag\">&lt;/<span class=\"name\">Author</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Description</span>&gt;</span>清除Beyond Compare 4 有30天试用期<span class=\"tag\">&lt;/<span class=\"name\">Description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">URI</span>&gt;</span>\\Beyond Compare Clear Trial<span class=\"tag\">&lt;/<span class=\"name\">URI</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">RegistrationInfo</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Triggers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CalendarTrigger</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StartBoundary</span>&gt;</span>2023-12-30T10:00:00<span class=\"tag\">&lt;/<span class=\"name\">StartBoundary</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Enabled</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ScheduleByMonth</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">DaysOfMonth</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Day</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">Day</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">DaysOfMonth</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Months</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">January</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">February</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">March</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">April</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">May</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">June</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">July</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">August</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">September</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">October</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">November</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">December</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Months</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ScheduleByMonth</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">CalendarTrigger</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Triggers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Principals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Principal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Author&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">UserId</span>&gt;</span>S-1-5-21-1882866539-4086113214-3650236343-1001<span class=\"tag\">&lt;/<span class=\"name\">UserId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">LogonType</span>&gt;</span>InteractiveToken<span class=\"tag\">&lt;/<span class=\"name\">LogonType</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RunLevel</span>&gt;</span>LeastPrivilege<span class=\"tag\">&lt;/<span class=\"name\">RunLevel</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Principal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Principals</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class=\"tag\">&lt;/<span class=\"name\">MultipleInstancesPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">DisallowStartIfOnBatteries</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">DisallowStartIfOnBatteries</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StopIfGoingOnBatteries</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">StopIfGoingOnBatteries</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">AllowHardTerminate</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">AllowHardTerminate</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StartWhenAvailable</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">StartWhenAvailable</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RunOnlyIfNetworkAvailable</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RunOnlyIfNetworkAvailable</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">IdleSettings</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StopOnIdleEnd</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">StopOnIdleEnd</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RestartOnIdle</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RestartOnIdle</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">IdleSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">AllowStartOnDemand</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">AllowStartOnDemand</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Hidden</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">Hidden</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RunOnlyIfIdle</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RunOnlyIfIdle</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WakeToRun</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">WakeToRun</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ExecutionTimeLimit</span>&gt;</span>PT72H<span class=\"tag\">&lt;/<span class=\"name\">ExecutionTimeLimit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Priority</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">Priority</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Actions</span> <span class=\"attr\">Context</span>=<span class=\"string\">&quot;Author&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Exec</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Command</span>&gt;</span>C:\\Windows\\System32\\reg.exe<span class=\"tag\">&lt;/<span class=\"name\">Command</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Arguments</span>&gt;</span>delete &quot;hkey_current_user\\software\\scooter software\\beyond compare 4&quot; /v cacheid /f<span class=\"tag\">&lt;/<span class=\"name\">Arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Exec</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Actions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Task</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中， <code>&lt;Author&gt;</code> 、 <code>&lt;UserId&gt;</code> 请改为本机信息。可以通过导出其他的本机计划来查看这两个信息。<br></p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">MacOS 下的解决方案</a><br><a href=\"#3\">Windows 下的解决方案</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程旨在记录笔者是如何解决使用 <strong>Beyond Compare</strong> 时遇到试用期到期问题。<br><br>Beyond Compare 软件可以直接在<a href=\"https://www.scootersoftware.com/download\">官网</a>上下载，笔者自己使用的 Beyond Compare 4。<br></p>\n<h1 id=\"2\">MacOS 下的解决方案</h1>\n\n<p> 第一步，进入 Beyond Compare 软件应用目录，路径如下：<br></p>\n<pre><code>/Applications/Beyond Compare.app/Contents/MacOS\n</code></pre>\n<p>第二步，修改启动程序文件 BCompare 为 BCompare.real<br></p>\n<pre><code>mv Bcompare Bcompare.real\n</code></pre>\n<p>第三步，创建一个新的启动程序文件 BCompare<br></p>\n<pre><code>vi BCompare\n</code></pre>\n<p>文件内容如下：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除注册信息</span></span><br><span class=\"line\">rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动真实的Bcompare文件</span></span><br><span class=\"line\">&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@</span><br></pre></td></tr></table></figure>\n\n<p>该脚本的作用时，删除 Beyond Compare 下的注册信息文件，然后再启动真实的 BCompare 启动脚本。<br><br>第四步，给新创建的启动脚本权限：<br></p>\n<pre><code>chmod a+x /Applications/Beyond\\ Compare.app/Contents/MacOS/BCompare\n</code></pre>\n<p>完成以上步骤后，打开 Beyond Compare 就可以正常使用了。你可以注意到，每天打开后显示的剩余试用期时间都是满的。<br></p>\n<h1 id=\"3\">Windows 下的解决方案</h1>\n\n<p>第一步，打开注册表<br><br>使用 <code>Win+R</code> 快捷键打开运行对话框，输入 <code>regedit</code> 打开注册表<br>第二步，找到 Beyond Compare 在注册表中的路径<br></p>\n<pre><code>计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Scooter Software\\Beyond Compare 4\n</code></pre>\n<p>第三步，删除其中的 CacheID 后，重新打开软件，可以看到又有30天的试用期了。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090954164.png\"></p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><p>每次等软件到期后再去删除注册表信息很麻烦，可以在计算机管理中添加一个计划程序。<br><br>第一步，打开计算机管理<br><br>使用 <code>Win+R</code> 快捷键打开运行对话框，输入 <code>compmgmt.msc</code> 即可打开计算机管理。<br><br>第二步，选择任务计划程序库，导入任务<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202404090959396.png\"><br>第三步，将下面 xml 代码保存为 xml 文件，用作第二步中导入任务<br></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-16&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Task</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://schemas.microsoft.com/windows/2004/02/mit/task&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RegistrationInfo</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Date</span>&gt;</span>2023-12-30T10:40:05.8128741<span class=\"tag\">&lt;/<span class=\"name\">Date</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Author</span>&gt;</span>JiacaiGuo<span class=\"tag\">&lt;/<span class=\"name\">Author</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Description</span>&gt;</span>清除Beyond Compare 4 有30天试用期<span class=\"tag\">&lt;/<span class=\"name\">Description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">URI</span>&gt;</span>\\Beyond Compare Clear Trial<span class=\"tag\">&lt;/<span class=\"name\">URI</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">RegistrationInfo</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Triggers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CalendarTrigger</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StartBoundary</span>&gt;</span>2023-12-30T10:00:00<span class=\"tag\">&lt;/<span class=\"name\">StartBoundary</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Enabled</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ScheduleByMonth</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">DaysOfMonth</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Day</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">Day</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">DaysOfMonth</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Months</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">January</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">February</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">March</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">April</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">May</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">June</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">July</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">August</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">September</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">October</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">November</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">December</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Months</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ScheduleByMonth</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">CalendarTrigger</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Triggers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Principals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Principal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Author&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">UserId</span>&gt;</span>S-1-5-21-1882866539-4086113214-3650236343-1001<span class=\"tag\">&lt;/<span class=\"name\">UserId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">LogonType</span>&gt;</span>InteractiveToken<span class=\"tag\">&lt;/<span class=\"name\">LogonType</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RunLevel</span>&gt;</span>LeastPrivilege<span class=\"tag\">&lt;/<span class=\"name\">RunLevel</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Principal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Principals</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class=\"tag\">&lt;/<span class=\"name\">MultipleInstancesPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">DisallowStartIfOnBatteries</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">DisallowStartIfOnBatteries</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StopIfGoingOnBatteries</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">StopIfGoingOnBatteries</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">AllowHardTerminate</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">AllowHardTerminate</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StartWhenAvailable</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">StartWhenAvailable</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RunOnlyIfNetworkAvailable</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RunOnlyIfNetworkAvailable</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">IdleSettings</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StopOnIdleEnd</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">StopOnIdleEnd</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">RestartOnIdle</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RestartOnIdle</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">IdleSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">AllowStartOnDemand</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">AllowStartOnDemand</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">Enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Hidden</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">Hidden</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RunOnlyIfIdle</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">RunOnlyIfIdle</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WakeToRun</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">WakeToRun</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ExecutionTimeLimit</span>&gt;</span>PT72H<span class=\"tag\">&lt;/<span class=\"name\">ExecutionTimeLimit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Priority</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">Priority</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Actions</span> <span class=\"attr\">Context</span>=<span class=\"string\">&quot;Author&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Exec</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Command</span>&gt;</span>C:\\Windows\\System32\\reg.exe<span class=\"tag\">&lt;/<span class=\"name\">Command</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Arguments</span>&gt;</span>delete &quot;hkey_current_user\\software\\scooter software\\beyond compare 4&quot; /v cacheid /f<span class=\"tag\">&lt;/<span class=\"name\">Arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Exec</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Actions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Task</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中， <code>&lt;Author&gt;</code> 、 <code>&lt;UserId&gt;</code> 请改为本机信息。可以通过导出其他的本机计划来查看这两个信息。<br></p>\n"},{"title":"使用 PicGo 搭建图床","date":"2024-05-20T01:10:55.000Z","_content":"# 目录\n[前言](#1)\n[图床](#2)\n[搭建图床](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本教程用于记录笔者使用 **PicGo** 工具创建图床的过程。<br>\n\n<h1 id=\"2\">图床</h1>\n\n图床其实就是在互联网上存储图片的一块空间，你可以把它理解为一个在线数据库，其中的数据是图片。我们可以通过一个 URL 访问图床中的图片。<br>\n### 图床工具\n图床工具主要是方便人们创建搭建图床，比如笔者使用的图床工具是 [PicGo](https://github.com/Molunerfinn/PicGo) 。<br>\nPicGo 支持多个图床服务，比如七牛图床、腾讯云、Github 等。笔者选用的是 Github 。<br>\n\n<h1 id=\"3\">搭建图床</h1>\n\n### Github 仓库\n首先我们要在 Github 上创建一个图床仓库。<br>\n在 [Github](https://github.com/) 上登陆自己的账户。然后点击右上角的加号( `+` )创建一个新的仓库，如下:<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201009405.png?raw=true)<br>\n在 Repository name * 输入框中填写图床的名称，比如笔者使用的是 **MyPictureBase** 。仓库权限选择 Public 。下面的 **Add a README file** 是可选项，选择了 Github 就会根据你的仓库描述自动生成一个 README 文件。然后点击 **Create repository** 按键创建仓库即可。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201011304.png?raw=true)<br>\n#### 创建私人 Token\n点击右上角的头像，选择 \"Settings\" 进入设置页。然后在侧边栏找到 \"Developer settings\" 进入开发者设置页。最后选择创建私人 Token(classic) 。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png)<br>\n设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 \"repo\" 项。最后点击最下方的 \"Generate Token\" 按键即可。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png)<br>\n然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png)<br>\n### PicGo 工具安装使用\nPicGo 工具笔者是直接在 Github 上下载作者生成的 release 文件，具体下载链接可[点击这儿](https://github.com/Molunerfinn/PicGo/releases)。<br>\n笔者选用的是最新的稳定版本 2.3.1 正式版，同时笔者是在 MacOS 平台下使用的，所以下载了 PicGo-2.3.1-arm64.dmg 。<br>\n#### 安装\n下载之后直接双击打开就可以看到 PicGo 软件的可执行文件，将其拽拖到应用文件目录即可。<br>\n但是，由于苹果的安全验证机制，并且 PicGo 并没有执行苹果要求的签证机制，因此我们一开始是无法打开的。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201028811.png?raw=true)<br>\n从 PicGo 作者提供的 [FAQ](https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md) 中我们可以找到此问题的解决方案。<br>\n打开终端并执行下述指令:<br>\n\n1. 临时禁用系统完整性保护\n    <code>sudo spctl --master-disable</code>\n2. 手动放行 PicGo\n    <code>xattr -cr /Applications/PicGo.app</code>\n\n禁用系统完整性保护后，我们可以在系统设置中的隐私和安全中看到。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201036870.png?raw=true)<br>\n#### 使用\nPicGo 软件打开后会最小化到 MacOS 系统右上角。点击右上角图标 <img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201150958.png?raw=true\" style=\"width:30px; height:auto;\"></img> 打开软件，软件主界面如下。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201159299.png?raw=true)<br>\n点击图床设置，选择 Github ，填写相应的信息并确认设置。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201354641.png?raw=true)<br>\n仓库名称一般是`Github用户名/仓库名`，比如笔者是 `illusorycat/MyPictureBase`。<br>\n分支名显而易见，比如笔者是 `main`。\nToken 是在 GitHub 上创建的私人 token 。<br>\n存储路径可不填。<br>\n自定义域名也可不填。<br>\n确认上述信息并将 Github 设置为默认图床即可开始上传了。","source":"_posts/Build-gallery-with-PicGo.md","raw":"---\ntitle: 使用 PicGo 搭建图床\ndate: 2024-05-20 09:10:55\ntags: 工具\n---\n# 目录\n[前言](#1)\n[图床](#2)\n[搭建图床](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本教程用于记录笔者使用 **PicGo** 工具创建图床的过程。<br>\n\n<h1 id=\"2\">图床</h1>\n\n图床其实就是在互联网上存储图片的一块空间，你可以把它理解为一个在线数据库，其中的数据是图片。我们可以通过一个 URL 访问图床中的图片。<br>\n### 图床工具\n图床工具主要是方便人们创建搭建图床，比如笔者使用的图床工具是 [PicGo](https://github.com/Molunerfinn/PicGo) 。<br>\nPicGo 支持多个图床服务，比如七牛图床、腾讯云、Github 等。笔者选用的是 Github 。<br>\n\n<h1 id=\"3\">搭建图床</h1>\n\n### Github 仓库\n首先我们要在 Github 上创建一个图床仓库。<br>\n在 [Github](https://github.com/) 上登陆自己的账户。然后点击右上角的加号( `+` )创建一个新的仓库，如下:<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201009405.png?raw=true)<br>\n在 Repository name * 输入框中填写图床的名称，比如笔者使用的是 **MyPictureBase** 。仓库权限选择 Public 。下面的 **Add a README file** 是可选项，选择了 Github 就会根据你的仓库描述自动生成一个 README 文件。然后点击 **Create repository** 按键创建仓库即可。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201011304.png?raw=true)<br>\n#### 创建私人 Token\n点击右上角的头像，选择 \"Settings\" 进入设置页。然后在侧边栏找到 \"Developer settings\" 进入开发者设置页。最后选择创建私人 Token(classic) 。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png)<br>\n设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 \"repo\" 项。最后点击最下方的 \"Generate Token\" 按键即可。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png)<br>\n然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png)<br>\n### PicGo 工具安装使用\nPicGo 工具笔者是直接在 Github 上下载作者生成的 release 文件，具体下载链接可[点击这儿](https://github.com/Molunerfinn/PicGo/releases)。<br>\n笔者选用的是最新的稳定版本 2.3.1 正式版，同时笔者是在 MacOS 平台下使用的，所以下载了 PicGo-2.3.1-arm64.dmg 。<br>\n#### 安装\n下载之后直接双击打开就可以看到 PicGo 软件的可执行文件，将其拽拖到应用文件目录即可。<br>\n但是，由于苹果的安全验证机制，并且 PicGo 并没有执行苹果要求的签证机制，因此我们一开始是无法打开的。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201028811.png?raw=true)<br>\n从 PicGo 作者提供的 [FAQ](https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md) 中我们可以找到此问题的解决方案。<br>\n打开终端并执行下述指令:<br>\n\n1. 临时禁用系统完整性保护\n    <code>sudo spctl --master-disable</code>\n2. 手动放行 PicGo\n    <code>xattr -cr /Applications/PicGo.app</code>\n\n禁用系统完整性保护后，我们可以在系统设置中的隐私和安全中看到。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201036870.png?raw=true)<br>\n#### 使用\nPicGo 软件打开后会最小化到 MacOS 系统右上角。点击右上角图标 <img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201150958.png?raw=true\" style=\"width:30px; height:auto;\"></img> 打开软件，软件主界面如下。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201159299.png?raw=true)<br>\n点击图床设置，选择 Github ，填写相应的信息并确认设置。<br>\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201354641.png?raw=true)<br>\n仓库名称一般是`Github用户名/仓库名`，比如笔者是 `illusorycat/MyPictureBase`。<br>\n分支名显而易见，比如笔者是 `main`。\nToken 是在 GitHub 上创建的私人 token 。<br>\n存储路径可不填。<br>\n自定义域名也可不填。<br>\n确认上述信息并将 Github 设置为默认图床即可开始上传了。","slug":"Build-gallery-with-PicGo","published":1,"updated":"2024-05-20T01:14:01.266Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biv00026bqeaetceclv","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">图床</a><br><a href=\"#3\">搭建图床</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程用于记录笔者使用 <strong>PicGo</strong> 工具创建图床的过程。<br></p>\n<h1 id=\"2\">图床</h1>\n\n<p>图床其实就是在互联网上存储图片的一块空间，你可以把它理解为一个在线数据库，其中的数据是图片。我们可以通过一个 URL 访问图床中的图片。<br></p>\n<h3 id=\"图床工具\"><a href=\"#图床工具\" class=\"headerlink\" title=\"图床工具\"></a>图床工具</h3><p>图床工具主要是方便人们创建搭建图床，比如笔者使用的图床工具是 <a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a> 。<br><br>PicGo 支持多个图床服务，比如七牛图床、腾讯云、Github 等。笔者选用的是 Github 。<br></p>\n<h1 id=\"3\">搭建图床</h1>\n\n<h3 id=\"Github-仓库\"><a href=\"#Github-仓库\" class=\"headerlink\" title=\"Github 仓库\"></a>Github 仓库</h3><p>首先我们要在 Github 上创建一个图床仓库。<br><br>在 <a href=\"https://github.com/\">Github</a> 上登陆自己的账户。然后点击右上角的加号( <code>+</code> )创建一个新的仓库，如下:<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201009405.png?raw=true\"><br><br>在 Repository name * 输入框中填写图床的名称，比如笔者使用的是 <strong>MyPictureBase</strong> 。仓库权限选择 Public 。下面的 <strong>Add a README file</strong> 是可选项，选择了 Github 就会根据你的仓库描述自动生成一个 README 文件。然后点击 <strong>Create repository</strong> 按键创建仓库即可。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201011304.png?raw=true\"><br></p>\n<h4 id=\"创建私人-Token\"><a href=\"#创建私人-Token\" class=\"headerlink\" title=\"创建私人 Token\"></a>创建私人 Token</h4><p>点击右上角的头像，选择 “Settings” 进入设置页。然后在侧边栏找到 “Developer settings” 进入开发者设置页。最后选择创建私人 Token(classic) 。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png\"><br><br>设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 “repo” 项。最后点击最下方的 “Generate Token” 按键即可。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png\"><br><br>然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png\"><br></p>\n<h3 id=\"PicGo-工具安装使用\"><a href=\"#PicGo-工具安装使用\" class=\"headerlink\" title=\"PicGo 工具安装使用\"></a>PicGo 工具安装使用</h3><p>PicGo 工具笔者是直接在 Github 上下载作者生成的 release 文件，具体下载链接可<a href=\"https://github.com/Molunerfinn/PicGo/releases\">点击这儿</a>。<br><br>笔者选用的是最新的稳定版本 2.3.1 正式版，同时笔者是在 MacOS 平台下使用的，所以下载了 PicGo-2.3.1-arm64.dmg 。<br></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>下载之后直接双击打开就可以看到 PicGo 软件的可执行文件，将其拽拖到应用文件目录即可。<br><br>但是，由于苹果的安全验证机制，并且 PicGo 并没有执行苹果要求的签证机制，因此我们一开始是无法打开的。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201028811.png?raw=true\"><br><br>从 PicGo 作者提供的 <a href=\"https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md\">FAQ</a> 中我们可以找到此问题的解决方案。<br><br>打开终端并执行下述指令:<br></p>\n<ol>\n<li>临时禁用系统完整性保护<br> <code>sudo spctl --master-disable</code></li>\n<li>手动放行 PicGo<br> <code>xattr -cr /Applications/PicGo.app</code></li>\n</ol>\n<p>禁用系统完整性保护后，我们可以在系统设置中的隐私和安全中看到。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201036870.png?raw=true\"><br></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>PicGo 软件打开后会最小化到 MacOS 系统右上角。点击右上角图标 <img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201150958.png?raw=true\" style=\"width:30px; height:auto;\"></img> 打开软件，软件主界面如下。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201159299.png?raw=true\"><br><br>点击图床设置，选择 Github ，填写相应的信息并确认设置。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201354641.png?raw=true\"><br><br>仓库名称一般是<code>Github用户名/仓库名</code>，比如笔者是 <code>illusorycat/MyPictureBase</code>。<br><br>分支名显而易见，比如笔者是 <code>main</code>。<br>Token 是在 GitHub 上创建的私人 token 。<br><br>存储路径可不填。<br><br>自定义域名也可不填。<br><br>确认上述信息并将 Github 设置为默认图床即可开始上传了。</p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">图床</a><br><a href=\"#3\">搭建图床</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程用于记录笔者使用 <strong>PicGo</strong> 工具创建图床的过程。<br></p>\n<h1 id=\"2\">图床</h1>\n\n<p>图床其实就是在互联网上存储图片的一块空间，你可以把它理解为一个在线数据库，其中的数据是图片。我们可以通过一个 URL 访问图床中的图片。<br></p>\n<h3 id=\"图床工具\"><a href=\"#图床工具\" class=\"headerlink\" title=\"图床工具\"></a>图床工具</h3><p>图床工具主要是方便人们创建搭建图床，比如笔者使用的图床工具是 <a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a> 。<br><br>PicGo 支持多个图床服务，比如七牛图床、腾讯云、Github 等。笔者选用的是 Github 。<br></p>\n<h1 id=\"3\">搭建图床</h1>\n\n<h3 id=\"Github-仓库\"><a href=\"#Github-仓库\" class=\"headerlink\" title=\"Github 仓库\"></a>Github 仓库</h3><p>首先我们要在 Github 上创建一个图床仓库。<br><br>在 <a href=\"https://github.com/\">Github</a> 上登陆自己的账户。然后点击右上角的加号( <code>+</code> )创建一个新的仓库，如下:<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201009405.png?raw=true\"><br><br>在 Repository name * 输入框中填写图床的名称，比如笔者使用的是 <strong>MyPictureBase</strong> 。仓库权限选择 Public 。下面的 <strong>Add a README file</strong> 是可选项，选择了 Github 就会根据你的仓库描述自动生成一个 README 文件。然后点击 <strong>Create repository</strong> 按键创建仓库即可。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201011304.png?raw=true\"><br></p>\n<h4 id=\"创建私人-Token\"><a href=\"#创建私人-Token\" class=\"headerlink\" title=\"创建私人 Token\"></a>创建私人 Token</h4><p>点击右上角的头像，选择 “Settings” 进入设置页。然后在侧边栏找到 “Developer settings” 进入开发者设置页。最后选择创建私人 Token(classic) 。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png\"><br><br>设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 “repo” 项。最后点击最下方的 “Generate Token” 按键即可。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png\"><br><br>然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png\"><br></p>\n<h3 id=\"PicGo-工具安装使用\"><a href=\"#PicGo-工具安装使用\" class=\"headerlink\" title=\"PicGo 工具安装使用\"></a>PicGo 工具安装使用</h3><p>PicGo 工具笔者是直接在 Github 上下载作者生成的 release 文件，具体下载链接可<a href=\"https://github.com/Molunerfinn/PicGo/releases\">点击这儿</a>。<br><br>笔者选用的是最新的稳定版本 2.3.1 正式版，同时笔者是在 MacOS 平台下使用的，所以下载了 PicGo-2.3.1-arm64.dmg 。<br></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>下载之后直接双击打开就可以看到 PicGo 软件的可执行文件，将其拽拖到应用文件目录即可。<br><br>但是，由于苹果的安全验证机制，并且 PicGo 并没有执行苹果要求的签证机制，因此我们一开始是无法打开的。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201028811.png?raw=true\"><br><br>从 PicGo 作者提供的 <a href=\"https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md\">FAQ</a> 中我们可以找到此问题的解决方案。<br><br>打开终端并执行下述指令:<br></p>\n<ol>\n<li>临时禁用系统完整性保护<br> <code>sudo spctl --master-disable</code></li>\n<li>手动放行 PicGo<br> <code>xattr -cr /Applications/PicGo.app</code></li>\n</ol>\n<p>禁用系统完整性保护后，我们可以在系统设置中的隐私和安全中看到。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201036870.png?raw=true\"><br></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>PicGo 软件打开后会最小化到 MacOS 系统右上角。点击右上角图标 <img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201150958.png?raw=true\" style=\"width:30px; height:auto;\"></img> 打开软件，软件主界面如下。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201159299.png?raw=true\"><br><br>点击图床设置，选择 Github ，填写相应的信息并确认设置。<br><br><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403201354641.png?raw=true\"><br><br>仓库名称一般是<code>Github用户名/仓库名</code>，比如笔者是 <code>illusorycat/MyPictureBase</code>。<br><br>分支名显而易见，比如笔者是 <code>main</code>。<br>Token 是在 GitHub 上创建的私人 token 。<br><br>存储路径可不填。<br><br>自定义域名也可不填。<br><br>确认上述信息并将 Github 设置为默认图床即可开始上传了。</p>\n"},{"title":"Windows 下编译 FFMPEG","date":"2024-05-20T01:19:06.000Z","_content":"# 目录\n[前言](#1)\n[Windows 下安装编译 FFMPEG](#2)\n\n<h1 id=\"1\">前言</h1>\n\n本教程旨在记录自己源码编译安装 **FFMPEG** 的过程。<br>\n如果没有修改源码需求，笔者还是更建议直接从[官网推荐途径](https://ffmpeg.org/download.html)或者其他可信途径下载二进制文件后使用。<br>\n\n<h1 id=\"2\">Windows 下安装编译 FFMPEG</h1>\n\n首先我们要准备好编译环境，笔者这儿准备的是一台装有 Windows10 系统电脑，同时安装了 Visual Studio 2019。<br>\n在 Windows 下编译 FFMPEG 我们还需要借助 MSYS2 ，可以[在此下载](https://www.msys2.org/)此软件。我们会在 MSYS2 环境中编译 FFMPEG ，编译时使用的编译器( cl.exe ) 和链接器( link.exe ) 则是由 VS2019 提供的。也就是说，我们使用的是 MSYS2 + MSVC 的方案。<br>\n### 下载源码\n编译环境准备好之后，我们下载一份 FFMPEG 源码，你可以是直接下载[最新版本](https://git.ffmpeg.org/ffmpeg.git)，也可以从官网下载[指定版本](https://ffmpeg.org/download.html)。<br>\n源码下载后需要修改源码，将其中包含 CC_IDENT 宏的代码注释掉。否则会在编译时遇到如下错误。<br>\n\n    error C2296: “%”: 非法，左操作数包含“char [138]”类型\n\n源码中最好不要包含任何中文字符，否则中编译时会出现很多如下警告：<br>\n\n     warning C4828: 文件包含在偏移 0x227 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。\n\n这同样意味着，你要删除 CC_IDENT 这个宏定义，因为其包含中文字符。<br>\n### 编译\n在打开 MSYS2 前，我们先进入它的安装目录，修改 **msys2_shell.cmd** 文件，将文件中第**17**行代码打开，即去掉 **rem** 关键字，如下所示：<br>\n\n    @echo off\n    setlocal EnableDelayedExpansion\n\n    set \"WD=%__CD__%\"\n    if NOT EXIST \"%WD%msys-2.0.dll\" set \"WD=%~dp0usr\\bin\\\"\n    set \"LOGINSHELL=bash\"\n    set /a msys2_shiftCounter=0\n\n    rem To activate windows native symlinks uncomment next line\n    rem set MSYS=winsymlinks:nativestrict\n\n    rem Set debugging program for errors\n    rem set MSYS=error_start:%WD%../../mingw64/bin/qtcreator.exe^|-debug^|^<process-id^>\n\n    rem To export full current PATH from environment into MSYS2 use '-use-full-path' parameter\n    rem or uncomment next line\n    set MSYS2_PATH_TYPE=inherit\n    ...\n\n打开后， MSYS2 可以继承 Windows 控制台的环境变量。\n之后，打开 `x64 Native Tools Command Prompt for VS 2019` 命令窗口，可以通过如下方式找到：<br>\n\n    Windows 开始菜单 -> Visual Studio 2019 -> x64 Native Tools Command Prompt for VS 2019\n\n然后在该命令窗口中输入下面的命令启动 MSYS2 软件：<br>\n\n    #切换盘符，如果需要的话\n    #d:\n\n    #进入 MSYS2 的安装目录\n    cd D:\\Application\\msys64\n\n    #启动 MSYS2\n    msys2_shell.cmd\n\n此时会弹出 MSYS2 的命令窗口，在窗口中输入下面命令，安装必要的编译工具：<br>\n\n    pacman -S diffutils make pkg-config yasm\n\n当编译工具安装好后，在 MSYS2 命令窗口进入 FFMPEG 源码目录：<br>\n\n    cd /d/WorkSpace/FFMPEG/ffmpeg-4.3.6\n\n我的 FFMPEG 源码路径是 D:/WorkSpace/FFMPEG/ffmpeg-4.3.6。<br>\n紧接着，运行 FFMPEG 源码目录中的 `configure` 脚本生成 **Makefile** 文件，如下：<br>\n\n    ./configure --prefix=/usr/local/ffmpeg --arch=x86_64 --disable-amd3dnow --disable-amd3dnowext --enable-gpl --enable-nonfree --enable-shared --disable-doc --disable-postproc --disable-avdevice --toolchain=msvc\n\n上述命令的含义是使用 **msvc** 作为 FFMPEG 的编译工具链；编译安装的 FFMPEG 库被放到 `/usr/local/ffmpeg` 目录下，该目录是 MSYS2 环境下的目录；编译的是动态库。<br>\n至于其他的构建选项是基于笔者的需求，可以运行 `./configure --help` 查看支持哪些构建选项。<br>\n上述脚本执行完成后，中 FFMPEG 源码目录下会多一个 Makefile 文件，然后我们就可以编译安装 FFMPEG 了，执行如下命令：<br>\n\n    make -j 8 && make install\n\n因为我们没有安装其他第三方库，因此会有一些内容是没有编译的，比如 ffplay.exe ，因为没有 SDL 库。有需要的话可以自行安装。<br>\n同时我们可以在执行 ffmpeg.exe 程序时看到我们的构建脚本，也就是说我们也可以运行其他途径提供的二进制程序来查看它们的构建脚本。<br>","source":"_posts/Compile-FFMPEG-on-Windows.md","raw":"---\ntitle: Windows 下编译 FFMPEG\ndate: 2024-05-20 09:19:06\ntags: 源码\n---\n# 目录\n[前言](#1)\n[Windows 下安装编译 FFMPEG](#2)\n\n<h1 id=\"1\">前言</h1>\n\n本教程旨在记录自己源码编译安装 **FFMPEG** 的过程。<br>\n如果没有修改源码需求，笔者还是更建议直接从[官网推荐途径](https://ffmpeg.org/download.html)或者其他可信途径下载二进制文件后使用。<br>\n\n<h1 id=\"2\">Windows 下安装编译 FFMPEG</h1>\n\n首先我们要准备好编译环境，笔者这儿准备的是一台装有 Windows10 系统电脑，同时安装了 Visual Studio 2019。<br>\n在 Windows 下编译 FFMPEG 我们还需要借助 MSYS2 ，可以[在此下载](https://www.msys2.org/)此软件。我们会在 MSYS2 环境中编译 FFMPEG ，编译时使用的编译器( cl.exe ) 和链接器( link.exe ) 则是由 VS2019 提供的。也就是说，我们使用的是 MSYS2 + MSVC 的方案。<br>\n### 下载源码\n编译环境准备好之后，我们下载一份 FFMPEG 源码，你可以是直接下载[最新版本](https://git.ffmpeg.org/ffmpeg.git)，也可以从官网下载[指定版本](https://ffmpeg.org/download.html)。<br>\n源码下载后需要修改源码，将其中包含 CC_IDENT 宏的代码注释掉。否则会在编译时遇到如下错误。<br>\n\n    error C2296: “%”: 非法，左操作数包含“char [138]”类型\n\n源码中最好不要包含任何中文字符，否则中编译时会出现很多如下警告：<br>\n\n     warning C4828: 文件包含在偏移 0x227 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。\n\n这同样意味着，你要删除 CC_IDENT 这个宏定义，因为其包含中文字符。<br>\n### 编译\n在打开 MSYS2 前，我们先进入它的安装目录，修改 **msys2_shell.cmd** 文件，将文件中第**17**行代码打开，即去掉 **rem** 关键字，如下所示：<br>\n\n    @echo off\n    setlocal EnableDelayedExpansion\n\n    set \"WD=%__CD__%\"\n    if NOT EXIST \"%WD%msys-2.0.dll\" set \"WD=%~dp0usr\\bin\\\"\n    set \"LOGINSHELL=bash\"\n    set /a msys2_shiftCounter=0\n\n    rem To activate windows native symlinks uncomment next line\n    rem set MSYS=winsymlinks:nativestrict\n\n    rem Set debugging program for errors\n    rem set MSYS=error_start:%WD%../../mingw64/bin/qtcreator.exe^|-debug^|^<process-id^>\n\n    rem To export full current PATH from environment into MSYS2 use '-use-full-path' parameter\n    rem or uncomment next line\n    set MSYS2_PATH_TYPE=inherit\n    ...\n\n打开后， MSYS2 可以继承 Windows 控制台的环境变量。\n之后，打开 `x64 Native Tools Command Prompt for VS 2019` 命令窗口，可以通过如下方式找到：<br>\n\n    Windows 开始菜单 -> Visual Studio 2019 -> x64 Native Tools Command Prompt for VS 2019\n\n然后在该命令窗口中输入下面的命令启动 MSYS2 软件：<br>\n\n    #切换盘符，如果需要的话\n    #d:\n\n    #进入 MSYS2 的安装目录\n    cd D:\\Application\\msys64\n\n    #启动 MSYS2\n    msys2_shell.cmd\n\n此时会弹出 MSYS2 的命令窗口，在窗口中输入下面命令，安装必要的编译工具：<br>\n\n    pacman -S diffutils make pkg-config yasm\n\n当编译工具安装好后，在 MSYS2 命令窗口进入 FFMPEG 源码目录：<br>\n\n    cd /d/WorkSpace/FFMPEG/ffmpeg-4.3.6\n\n我的 FFMPEG 源码路径是 D:/WorkSpace/FFMPEG/ffmpeg-4.3.6。<br>\n紧接着，运行 FFMPEG 源码目录中的 `configure` 脚本生成 **Makefile** 文件，如下：<br>\n\n    ./configure --prefix=/usr/local/ffmpeg --arch=x86_64 --disable-amd3dnow --disable-amd3dnowext --enable-gpl --enable-nonfree --enable-shared --disable-doc --disable-postproc --disable-avdevice --toolchain=msvc\n\n上述命令的含义是使用 **msvc** 作为 FFMPEG 的编译工具链；编译安装的 FFMPEG 库被放到 `/usr/local/ffmpeg` 目录下，该目录是 MSYS2 环境下的目录；编译的是动态库。<br>\n至于其他的构建选项是基于笔者的需求，可以运行 `./configure --help` 查看支持哪些构建选项。<br>\n上述脚本执行完成后，中 FFMPEG 源码目录下会多一个 Makefile 文件，然后我们就可以编译安装 FFMPEG 了，执行如下命令：<br>\n\n    make -j 8 && make install\n\n因为我们没有安装其他第三方库，因此会有一些内容是没有编译的，比如 ffplay.exe ，因为没有 SDL 库。有需要的话可以自行安装。<br>\n同时我们可以在执行 ffmpeg.exe 程序时看到我们的构建脚本，也就是说我们也可以运行其他途径提供的二进制程序来查看它们的构建脚本。<br>","slug":"Compile-FFMPEG-on-Windows","published":1,"updated":"2024-05-20T01:21:56.323Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biw00046bqe0cde9ek3","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">Windows 下安装编译 FFMPEG</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程旨在记录自己源码编译安装 <strong>FFMPEG</strong> 的过程。<br><br>如果没有修改源码需求，笔者还是更建议直接从<a href=\"https://ffmpeg.org/download.html\">官网推荐途径</a>或者其他可信途径下载二进制文件后使用。<br></p>\n<h1 id=\"2\">Windows 下安装编译 FFMPEG</h1>\n\n<p>首先我们要准备好编译环境，笔者这儿准备的是一台装有 Windows10 系统电脑，同时安装了 Visual Studio 2019。<br><br>在 Windows 下编译 FFMPEG 我们还需要借助 MSYS2 ，可以<a href=\"https://www.msys2.org/\">在此下载</a>此软件。我们会在 MSYS2 环境中编译 FFMPEG ，编译时使用的编译器( cl.exe ) 和链接器( link.exe ) 则是由 VS2019 提供的。也就是说，我们使用的是 MSYS2 + MSVC 的方案。<br></p>\n<h3 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h3><p>编译环境准备好之后，我们下载一份 FFMPEG 源码，你可以是直接下载<a href=\"https://git.ffmpeg.org/ffmpeg.git\">最新版本</a>，也可以从官网下载<a href=\"https://ffmpeg.org/download.html\">指定版本</a>。<br><br>源码下载后需要修改源码，将其中包含 CC_IDENT 宏的代码注释掉。否则会在编译时遇到如下错误。<br></p>\n<pre><code>error C2296: “%”: 非法，左操作数包含“char [138]”类型\n</code></pre>\n<p>源码中最好不要包含任何中文字符，否则中编译时会出现很多如下警告：<br></p>\n<pre><code> warning C4828: 文件包含在偏移 0x227 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。\n</code></pre>\n<p>这同样意味着，你要删除 CC_IDENT 这个宏定义，因为其包含中文字符。<br></p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在打开 MSYS2 前，我们先进入它的安装目录，修改 <strong>msys2_shell.cmd</strong> 文件，将文件中第<strong>17</strong>行代码打开，即去掉 <strong>rem</strong> 关键字，如下所示：<br></p>\n<pre><code>@echo off\nsetlocal EnableDelayedExpansion\n\nset &quot;WD=%__CD__%&quot;\nif NOT EXIST &quot;%WD%msys-2.0.dll&quot; set &quot;WD=%~dp0usr\\bin\\&quot;\nset &quot;LOGINSHELL=bash&quot;\nset /a msys2_shiftCounter=0\n\nrem To activate windows native symlinks uncomment next line\nrem set MSYS=winsymlinks:nativestrict\n\nrem Set debugging program for errors\nrem set MSYS=error_start:%WD%../../mingw64/bin/qtcreator.exe^|-debug^|^&lt;process-id^&gt;\n\nrem To export full current PATH from environment into MSYS2 use &#39;-use-full-path&#39; parameter\nrem or uncomment next line\nset MSYS2_PATH_TYPE=inherit\n...\n</code></pre>\n<p>打开后， MSYS2 可以继承 Windows 控制台的环境变量。<br>之后，打开 <code>x64 Native Tools Command Prompt for VS 2019</code> 命令窗口，可以通过如下方式找到：<br></p>\n<pre><code>Windows 开始菜单 -&gt; Visual Studio 2019 -&gt; x64 Native Tools Command Prompt for VS 2019\n</code></pre>\n<p>然后在该命令窗口中输入下面的命令启动 MSYS2 软件：<br></p>\n<pre><code>#切换盘符，如果需要的话\n#d:\n\n#进入 MSYS2 的安装目录\ncd D:\\Application\\msys64\n\n#启动 MSYS2\nmsys2_shell.cmd\n</code></pre>\n<p>此时会弹出 MSYS2 的命令窗口，在窗口中输入下面命令，安装必要的编译工具：<br></p>\n<pre><code>pacman -S diffutils make pkg-config yasm\n</code></pre>\n<p>当编译工具安装好后，在 MSYS2 命令窗口进入 FFMPEG 源码目录：<br></p>\n<pre><code>cd /d/WorkSpace/FFMPEG/ffmpeg-4.3.6\n</code></pre>\n<p>我的 FFMPEG 源码路径是 D:&#x2F;WorkSpace&#x2F;FFMPEG&#x2F;ffmpeg-4.3.6。<br><br>紧接着，运行 FFMPEG 源码目录中的 <code>configure</code> 脚本生成 <strong>Makefile</strong> 文件，如下：<br></p>\n<pre><code>./configure --prefix=/usr/local/ffmpeg --arch=x86_64 --disable-amd3dnow --disable-amd3dnowext --enable-gpl --enable-nonfree --enable-shared --disable-doc --disable-postproc --disable-avdevice --toolchain=msvc\n</code></pre>\n<p>上述命令的含义是使用 <strong>msvc</strong> 作为 FFMPEG 的编译工具链；编译安装的 FFMPEG 库被放到 <code>/usr/local/ffmpeg</code> 目录下，该目录是 MSYS2 环境下的目录；编译的是动态库。<br><br>至于其他的构建选项是基于笔者的需求，可以运行 <code>./configure --help</code> 查看支持哪些构建选项。<br><br>上述脚本执行完成后，中 FFMPEG 源码目录下会多一个 Makefile 文件，然后我们就可以编译安装 FFMPEG 了，执行如下命令：<br></p>\n<pre><code>make -j 8 &amp;&amp; make install\n</code></pre>\n<p>因为我们没有安装其他第三方库，因此会有一些内容是没有编译的，比如 ffplay.exe ，因为没有 SDL 库。有需要的话可以自行安装。<br><br>同时我们可以在执行 ffmpeg.exe 程序时看到我们的构建脚本，也就是说我们也可以运行其他途径提供的二进制程序来查看它们的构建脚本。<br></p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">Windows 下安装编译 FFMPEG</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本教程旨在记录自己源码编译安装 <strong>FFMPEG</strong> 的过程。<br><br>如果没有修改源码需求，笔者还是更建议直接从<a href=\"https://ffmpeg.org/download.html\">官网推荐途径</a>或者其他可信途径下载二进制文件后使用。<br></p>\n<h1 id=\"2\">Windows 下安装编译 FFMPEG</h1>\n\n<p>首先我们要准备好编译环境，笔者这儿准备的是一台装有 Windows10 系统电脑，同时安装了 Visual Studio 2019。<br><br>在 Windows 下编译 FFMPEG 我们还需要借助 MSYS2 ，可以<a href=\"https://www.msys2.org/\">在此下载</a>此软件。我们会在 MSYS2 环境中编译 FFMPEG ，编译时使用的编译器( cl.exe ) 和链接器( link.exe ) 则是由 VS2019 提供的。也就是说，我们使用的是 MSYS2 + MSVC 的方案。<br></p>\n<h3 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h3><p>编译环境准备好之后，我们下载一份 FFMPEG 源码，你可以是直接下载<a href=\"https://git.ffmpeg.org/ffmpeg.git\">最新版本</a>，也可以从官网下载<a href=\"https://ffmpeg.org/download.html\">指定版本</a>。<br><br>源码下载后需要修改源码，将其中包含 CC_IDENT 宏的代码注释掉。否则会在编译时遇到如下错误。<br></p>\n<pre><code>error C2296: “%”: 非法，左操作数包含“char [138]”类型\n</code></pre>\n<p>源码中最好不要包含任何中文字符，否则中编译时会出现很多如下警告：<br></p>\n<pre><code> warning C4828: 文件包含在偏移 0x227 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。\n</code></pre>\n<p>这同样意味着，你要删除 CC_IDENT 这个宏定义，因为其包含中文字符。<br></p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在打开 MSYS2 前，我们先进入它的安装目录，修改 <strong>msys2_shell.cmd</strong> 文件，将文件中第<strong>17</strong>行代码打开，即去掉 <strong>rem</strong> 关键字，如下所示：<br></p>\n<pre><code>@echo off\nsetlocal EnableDelayedExpansion\n\nset &quot;WD=%__CD__%&quot;\nif NOT EXIST &quot;%WD%msys-2.0.dll&quot; set &quot;WD=%~dp0usr\\bin\\&quot;\nset &quot;LOGINSHELL=bash&quot;\nset /a msys2_shiftCounter=0\n\nrem To activate windows native symlinks uncomment next line\nrem set MSYS=winsymlinks:nativestrict\n\nrem Set debugging program for errors\nrem set MSYS=error_start:%WD%../../mingw64/bin/qtcreator.exe^|-debug^|^&lt;process-id^&gt;\n\nrem To export full current PATH from environment into MSYS2 use &#39;-use-full-path&#39; parameter\nrem or uncomment next line\nset MSYS2_PATH_TYPE=inherit\n...\n</code></pre>\n<p>打开后， MSYS2 可以继承 Windows 控制台的环境变量。<br>之后，打开 <code>x64 Native Tools Command Prompt for VS 2019</code> 命令窗口，可以通过如下方式找到：<br></p>\n<pre><code>Windows 开始菜单 -&gt; Visual Studio 2019 -&gt; x64 Native Tools Command Prompt for VS 2019\n</code></pre>\n<p>然后在该命令窗口中输入下面的命令启动 MSYS2 软件：<br></p>\n<pre><code>#切换盘符，如果需要的话\n#d:\n\n#进入 MSYS2 的安装目录\ncd D:\\Application\\msys64\n\n#启动 MSYS2\nmsys2_shell.cmd\n</code></pre>\n<p>此时会弹出 MSYS2 的命令窗口，在窗口中输入下面命令，安装必要的编译工具：<br></p>\n<pre><code>pacman -S diffutils make pkg-config yasm\n</code></pre>\n<p>当编译工具安装好后，在 MSYS2 命令窗口进入 FFMPEG 源码目录：<br></p>\n<pre><code>cd /d/WorkSpace/FFMPEG/ffmpeg-4.3.6\n</code></pre>\n<p>我的 FFMPEG 源码路径是 D:&#x2F;WorkSpace&#x2F;FFMPEG&#x2F;ffmpeg-4.3.6。<br><br>紧接着，运行 FFMPEG 源码目录中的 <code>configure</code> 脚本生成 <strong>Makefile</strong> 文件，如下：<br></p>\n<pre><code>./configure --prefix=/usr/local/ffmpeg --arch=x86_64 --disable-amd3dnow --disable-amd3dnowext --enable-gpl --enable-nonfree --enable-shared --disable-doc --disable-postproc --disable-avdevice --toolchain=msvc\n</code></pre>\n<p>上述命令的含义是使用 <strong>msvc</strong> 作为 FFMPEG 的编译工具链；编译安装的 FFMPEG 库被放到 <code>/usr/local/ffmpeg</code> 目录下，该目录是 MSYS2 环境下的目录；编译的是动态库。<br><br>至于其他的构建选项是基于笔者的需求，可以运行 <code>./configure --help</code> 查看支持哪些构建选项。<br><br>上述脚本执行完成后，中 FFMPEG 源码目录下会多一个 Makefile 文件，然后我们就可以编译安装 FFMPEG 了，执行如下命令：<br></p>\n<pre><code>make -j 8 &amp;&amp; make install\n</code></pre>\n<p>因为我们没有安装其他第三方库，因此会有一些内容是没有编译的，比如 ffplay.exe ，因为没有 SDL 库。有需要的话可以自行安装。<br><br>同时我们可以在执行 ffmpeg.exe 程序时看到我们的构建脚本，也就是说我们也可以运行其他途径提供的二进制程序来查看它们的构建脚本。<br></p>\n"},{"title":"Dart 简述","date":"2024-05-20T01:25:31.000Z","_content":"# 目录\n[前言](#0)\n[基础表达式](#1)\n[类型](#2)\n[模式匹配](#3)\n[函数方法](#4)\n[控制流](#5)\n[错误处理](#6)\n[类 & 对象](#7)\n[类修饰符](#8)\n[并发](#9)\n[空安全](#10)\n\n<h1 id = \"0\">前言</h1>\n\n本文简单整理了来自 [Dart 官网的《 Dart 开发语言 》](https://dart.cn/language)章节内容。仅用于简单理解 Dart 的语法。<br>\n\n<h1 id=\"1\">基础表达式</h1>\n\n## 变量\n以下是创建并初始化变量的例子：<br>\n```dart\nvar name = 'Bob';\n```\n使用 `var` 定义了一个变量，并且通过初始化赋值触发类型推导确定变量的类型。<br>\n如果你明确变量的类型，也可以直接用具体类型替换 `var` 。<br>\nDart 支持空值。<br>\n```dart\nString? name    //Nullable type. Can be `null` or string\nString name     //Non-nullable type.\n```\n你必须在使用变量之前对其进行初始化，Dart 不会为非可空类型设置默认初始值。而可空变量是默认初始化为 null 的。也就是说对于非可空类型变量，在声明时要提供一个默认初始值。<br>\nDart 中的非可空变量类型都继承于 Object ，因此你可以使用 `Object` 类型来定义一个可以存储任意非可空类型数据的变量。<br>\n如果你必须推迟变量的类型检测到运行时，那你可以使用特殊类型 `dynamic` 。<br>\nDart 提供了一个关键字 `late` 。该关键字允许你声明非可空类型变量时不初始化，支持在第一次使用到该变量时才执行初始化流程。<br>\n如果你不打算更改一个变量，可以使用 `final` 或 `const` 。\n```dart\nfinal name = 'Bob';\nfinal String nickname = 'Bobby';\nvar foo = const [];\nfinal bar = const [];\nconst baz = [];\n```\nfinal 对象不能被修改，但是其字段可能可以被修改。 const 对象本身及其内容不能被更改。\n你可以在定义常量时使用类型检查 `is` 和转换 `as` 、集合中的 `if` 和展开操作符 (`...` 和 `...?`) 。<br>\n```dart\nconst object i = 3;\nconst list = [i as int];\nconst map = {if (i is int) i: 'int'};\nconst set = {if (list is List<int>) ...list}\n```\n## 操作符\n操作符与其他语言中的大体相符。此处只介绍一些不常见的操作符。<br>\n \n 1. ！\n    - 作为后缀操作符，用于强调表达式的计算结果永远不会是 null\n    - 作为前缀操作符号，则是常见的反转值功能\n 2. ～/\n    - 除法，但是返回整数结果\n 3. is!\n    - 与 is 操作符的结果相反\n4. ??= \n    - 仅在被赋值对象为 null 时进行赋值\n5. >>>\n    - 无符号右移\n6. .. 和 ?.. \n    - 级联操作符，用于省略调用的变量\n        ```dart\n        var paint = Paint()\n        ..color = Colors.black  // paint.color = COlors.black\n        ```\n7. ... 和 ...?\n    - 这其实不是一个运算符，而是集合本身的一部分，是一种将一个集合中的多个值插入到集合中的简洁方法\n        ```dart\n        var list = [1,2,3];\n        var list2 = [0, ...list];\n        ```\n\n## 注释\n注释的写法与常见语言中的一致。<br>\n## 注解\n元数据注解以 `@` 开始。<br>\n所有 Dart 代码中都内置了四个注解：@Deprecated 、@deprecated 、@override 和 @pragma 。<br>\n@Deprecated 和 @deprecated 的区别在于前者可以指定消息。<br>\n```dart\n@Deprecated('Use turnOn instead')\n```\n我们可以定义自己的注解。<br>\n```dart\nclass Todo {\n    final String who;\n    final String what;\n\n    const Todo(this.who, this.what);\n}\n@Todo('Dash', 'Implement this function')\nvoid doSomething() {\n    print('Do something');\n}\n```\n## 库和导库\nDart 使用 import 关键字来导入库。<br>\n并且 Dart 没有其他语言中的那些访问权限关键字，而是仅仅使用如下规则：<br>\n\n- 以下划线 `_` 开通的标识符仅在库中可见。\n\n下面是 Dart 中的一个导库的例子：<br>\n```dart\nimport 'dart:html';\nimport 'package:test/test.dart';\n```\n我们可以仅加载库的部分：<br>\n```dart\n//Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n//Import all banes EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;\n```\n当导入的多个库中具有冲突的标识符时，我们可以为库指定前缀：<br>\n```dart\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n\nElement elememt1 = Element();\nlib2.Element element2 = lib2.Element();\n```\n如果你在使用 Web 相关功能，你可能会需要 Dart 延迟加载库的功能，请查阅文档。<br>\n\n<h1 id=\"2\">类型</h1>\n\n## 基本类型\nDart 中支持的基本数据类型与其他面对对象的语言类似。<br>\n值得注意的是 Dart 中的字符串的保存使用 UTF-16 。<br>\n同时它可以使用 r 前缀来输出不转义的字符串：<br>\n```dart\nvar s = r'In a raw string, not even \\n gets special treatment.'\n```\n同时，我们可以使用 `$` 将变量放入字符串中，也可以使用 `${}` 将表达式放入字符串中：<br>\n```dart\nvar s = 'string interpolation';\nvar m = {1: 'int'};\n\nprint('Dart has $s, which is very handy.');\nprint('${m}');\n```\nDart 是类型安全语言，这也就意味着你不能不使用像 `if(nonbooleanValue)` 这样的代码。<br>\n## Records 类型\nRecords 是匿名的、不可变的聚合类型。<br>\n```dart\nvar record = ('first', a: 2, b: true, 'last');  // this type is (String, int, bool, String)\n```\n我们可以使用占位符或者字段描述名访问字段值：<br>\n```dart\nprint(record.$1);   // Prints 'first'   \nprint(record.a);\n```\nRecords 类型对象是不可变的，其只有 getter 字段，而没有 setting 字段。<br>\n字段描述名不影响 Records 本身的相等性。<br>\n我们可以使用模式匹配将 Records 值解构为局部局部变量：<br>\n```dart\n(String name, int age) userInfo(Map<String, dynamic> json) {\n    retur (json['name'] as String, json['age'] as int);\n}\n\nfinal json = <String, dynamic> {\n    'name': 'Dash',\n    'age': 10,\n    'color': 'blue'\n};\n\nvar (name, age) = userInfo(json);\n```\n## 集合\nDart 的集合包括 List 、Set 和 Map\n同时支持使用 `...` 、`...?` 、 `if` 、`for` 、`if-case` 构建集合。<br>\n```dart\nvar list = [1,2,3];\nvar list2 = [0, ...list];\nassert(list2.length == 4);\n\nList<int>? list3 = null;\nvar list4 = [0, ...?list3];\nassert(list4.length == 1);\n\nvar nav = ['Home', 'Furniture', 'Plants', if (promoActive) 'Outlet'];    //if promoActive is true, this list has 4 elements, otherwise only 3 elements.\n\nvar nav1 = ['Home', 'Furniture', 'Plants', if (login case 'Manager') 'Inventory'];\n\nvar listOfInts = [1, 2, 3];\nvar listOfStrings = ['#0', for (var i in listOfInts) '#$i'];\nassert(listOfStrings[1] == '#1');\n```\n## 泛型\n```dart\nabstrct class Cache<T> {\n    T getByKey(String key);\n    void setByKey(String key, T value);\n}\n\nclass Foo<T extends Object> {\n    //Any type provided to Foo for T must be non-nullable\n}\n\nT first<T>(List<T> ts) {\n    T tmp = ts[0];\n\n    return tmp;\n}\n```\n## 别名\n```dart\ntypedef IntList = List<int>;\n\ntypedef ListMapper<X> = Map<X, List<X>>;\n```\n对于函数，我们推荐使用内联函数类型而不是函数等 typedef。<br>\n```dart\ntypedef Compare<T> = int Function(T a, T b);\n\nint sort(int a, int b) => a - b;\n\nvoid main() {\n    assert(sort is Compare<int>);   //True\n}\n```\n## 类型系统\nDart 支持在重写方法时，使用一个新类型（在新方法中）替换旧类型（在旧方法中）。类似的，当参数传递给函数时，可以使用另一种类型（实际参数）的对象替换现有类型（具有声明类型的参数）要求的对象。从生产者和消费者的角度来看，消费者接受类型，生产者产生类型。可以使用父类型替换消费者类型，使用子类型替换生产者类型。<br>\n```dart\nCat c = Cat();\nAnimal a = Cat();\nCat c2 = MaineCoon();\n```\n赋值运算符左边是消费者，右边是生产者。<br>\n\n<h1 id=\"3\">模式匹配</h1>\n\n## 概览\n```dart\nswitch (number){\n    case 1:\n        print('one');\n    //Matches of tje value pf pbj is between the constant values of 'first' and 'last'\n    case >= first && <= last:\n        print('in range');\n}\n\nconst a = 'a';\nconst b = 'b';\nswitch (obj) {\n    case [a,b]:\n        print('$a, $b');\n}\n\nvar numList = [1, 2, 3];\nvar [a, b, c] = numList;\nprint(a + b + c);\n\n//下面匹配了一个第一个元素是 'a' 或 'b' 的两元素列表\nswitch (list) {\n    case ['a' || 'b', var c]:\n        print(c);\n}\n```\n总的来说，Dart 提供的模式匹配功能十分强大。<br>\n我们可以使用模式匹配很方便地实现交换两个变量的值。<br>\n```dart\nvar (a, b) = ('left', 'right');\n(b, a) = (a, b);\nprint('$a $b');\n```\n可以让多个 case 共享一个 body：<br>\n```dart\nvar isPrimary = switch (color) {\n    Color.red || Color.yellow || Color.blue => true,\n    _ => false\n}\n```\n可以在 case 中增加添加：<br>\n```dart\nswitch (shape) {\n    case Square(size: var s) || Circle(size: var s) when s> 0:\n        print('Non-empty symmetric shape');\n}\n```\n将 getter 调用的结果绑定到同名变量：<br>\n```dart\nMap<String, int> hist {\n    'a': 23,\n    'b': 100,\n};\n\nfor (var MapEntry(:key, value: count) in hist.entries) {\n    ///\n}\n```\n上述 `.entries` 返回的是一个 `Iterable<MapENtry<K, V>>` ，因为其字段 key 与我们要赋值的变量 key 同名，因此可以将 `key:key` 简化为 `:key` 。<br>\n我们可以使用模式将 Records 的字段直接结构为局部变量，与函数内联。也可以使用模式解构类实例。<br>\n```dart\nvar (name, age) = userInfo(json);\n\nfinal Foo myFoo = Foo(one: 'one', tew: 2);\nvar Foo(:one, :teo) = myFoo;\n```\n使用模式实现函数的策略设计模式：<br>\n```dart\nsealed class Shape{}\n\nclass Square implements Shape {\n    final double length;\n    Square(this.length);\n}\n\nclass Circle implements Shape {\n    final double radius;\n    Circle(this. radius);\n}\n\ndouble calculateArea(Shape shape) => switch (shape) {\n    Square(;ength: var l) => l * l,\n    Circle(radius: var r) => math.pi * r * r\n};\n```\n使用模式我们可以很便捷的验证并使用 json 结构中的数据：<br>\n```dart\nif (json case {'user': [String name, int age]}) {\n    print('User $name is $age years old.');\n}\n```\n## 模式匹配类型\n模式匹配与逻辑组合使用时同样有运算优先级存在。<br>\n我们还可以使用模式匹配来实现空校验或空断言：<br>\n```dart\nString? maybeString = 'nullable with base type String';\nswitch (maybeString) {\n    case var s?:\n    // 's' has type non-nullable String here.\n}\n\nList<String?> row = ['user', null];\nswitch (row) {\n    case ['user', var name!]: //...\n    //'name' is a non-nullable here.\n}\n```\n\n<h1 id=\"4\">函数方法</h1>\n\nDart 中的函数也是对象，类型是 `Function`。<br>\n```dart\nbool isNoble(int atomicNumber) {\n    return _nobleGases[atomicNumber] != null;\n}\n```\n```dart\nbool isBoble(int atomicNumber) => _nobleGases[atomicNumber] != null;\n```\n上述第二种函数声明是第一种的简写语法，仅当函数中只包含一个表达式时可用。也就是说你不可以在 `=>` 之后放一个 if 语句。<br>\n`=> expr` 语法是 `{ return expr; }` 的简写。（类似于其他语言中的宏定义。<br>\n一个函数可以有任意数量的普通参数。这些参数后面可以跟着命名参数和位置参数（但不能同时跟着这两个参数）。<br>\n函数命名参数和位置参数都可以指定默认值，但必须是编译时常量。普通参数不能指定默认值。<br>\n## 命名参数\n定义函数时，使用 `{param1, param2, ...}` 指定命名参数。如果你没有**提供默认值**或将命名参数标记为 `required`,则它们类型必须是可空的，因为 Dart 提供的默认值是 null。<br>\n```dart\nvoid enableFlags(int a, {bool? bold, bool hidden = false, required Widget child}) {...}\n```\n命名参数指这些参数必须通过命名来传递。<br>\n## 位置参数\n定义函数时，使用 `[param1, param2, ...]` 指定位置参数。如果不提供默认值，则它们的参数类型必须是可空的。<br>\n位置参数要求传参时安装定义的顺序传递入参。<br>\n```dart\nString say(String from, String msg, [String? device]) {\n    var result = '$from says $msg';\n    if (deivce != null) {\n        result = '$result with a $device';\n    }\n    return result;\n}\n```\n## main 函数\nmain 作为 flutter 应用程序的入口点。<br>\n```dart\nvoid main(List<String> args) {\n    ...\n}\n```\n## 函数闭包\nDart 支持函数闭包。<br>\n```dart\nFunction makeAdder(int addBy) {\n    return (int i) => addBy + i;\n}\n\nvoid main() {\n    var add2 = makeAdder(2);\n\n    assert(add2(3) == 5);\n}\n```\nDart 闭包访问的是其词法作用域中的变量。如果原变量的值在被捕捉之后发生了变化，也不会影响 Dart 闭包中已经捕捉的值。<br>\n## 生成器\n当你需要延迟产生一个值序列时，可以考虑使用生成器函数。Dart 内置支持两种生成器函数：<br>\n\n- 同步生成器：返回一个 Iterable 对象\n- 异步生成器：返回一个 Stream 对象\n\n#### 实现同步生成器\n使用 `sync*` 标记函数，并使用 `yield` 语句来传递值：\n```dart\nIterable<int> naturalsTo(int n) sync* {\n    int k = 0;\n    while (k < n) yield k++;\n}\n```\n#### 实现异步生成器\n使用 `async*` 标记函数，并使用 `yield` 语句传递值。<br>\n```dart\n    Stream<int> asynchronousNaturalsTo(int n) async* {\n        int k = 0;\n        while (k < n) yield k++;\n    }\n```\n#### 使用 `yield*` 提高递归生成器函数的性能\n```dart\nIterable<int> naturalsDownFrom(int n) sync* {\n    if (n > 0) {\n        yield n;\n        yield* naturalsDownFrom(n - 1);\n    }\n}\n```\n### 外部函数\n外部函数是其主体与其声明分开实现的函数。使用 `external` 关键字。<br>\n```dart\nexternal void someFunc(int i);\n```\n\n<h1 id=\"5\">控制流</h1>\n\n## 循环\nDart 支持 for 循环、while 和 do-while 回路，以及 break 和 continue。<br>\n```dart\nvar callbacks = [];\nfor (var i = 0; i < 2; i++) {\ncallbacks.add(() => print(i));\n}\n\nfor (final c in callbacks) {\nc();\n}\n//The ouput is 0 and then 1, as expected.\n```\n## 分支\nDart 还支持 if 、 if-case 和 switch 分支语句。<br>\nif 后面括号中的条件必须是计算结果为布尔值的表达式。<br>\nif-case 语句支持模式匹配。<br>\n```dart\nif (pair case [int x, int y]) {\n    print('Was coordinate array $x, $y');\n} else {\n    throw FormatException('Invalid coordinates.');\n}\n```\nswitch 语句有如下规则：<br>\n\n- 非空的 case 子句中完成后跳转到 switch 的末尾， 不需要 break。\n- 空 case 子句会隐式添加 fallthrough\n- 可以使用 continue +标签 来实现非顺序的 fallthrough\n- 可以使用default 或 _\n- 支持进一步条件约束，仅需要在 case 主体之后添加 `when` 子句（if-case 语句中也支持）\n\n```dart\nswitch (command) {\n    case 'OPEN':\n        executeOpen();\n        continue newCase;\n    case 'DENIED':\n    case 'CLOSE':\n        executeClosed();    //Runs for both DENIED and CLOSED\n    newCase:\n    case 'PENDING':\n        executeNowClosed(); //Runs for both OPEN and PENDING\n}\n```\n从 Dart 3.0 版本开始，支持 switch 表达式。 switch 表达式必须作为语句的一部分，而不能是单独的语句。<br>\n```dart\nvar x = switch (y) {...};   //this will run switch\nprint(switch (x) {...});\nreturn switch (x) {...};\n/*error usage\n* switch (x) {...};\n*/\n```\nswitch 表达式遵循下述规则：<br>\n\n- Cases 不再需要使用 case 关键字\n- case 主体是一个表达式而不是一系列语句。\n- 每个 case 都必须有一个 body ，空 case 没有隐式的 fallthrough\n- 使用 `=>` 而不是 `:`\n- 使用 `,` 分隔 Cases\n- 默认只能使用 `_`\n\n```dart\ntoken = switch (charCode) {\n    slash || star || plus || minus => operator(charCode),\n    comma || semicolon => punctuation(charCode),\n    >= digit0 && <= digit9 => number(),\n    _ => throw FormatException('Invalid')\n}\n```\n\n<h1 id=\"6\">错误处理</h1>\n\nDart 使用 `throw` 抛出异常，默认提供了 Exception 和 Error 类型，但实际上 Dart 可以抛出任意非空对象作为异常。<br>\nDart 使用 `catch` 捕捉异常，使用 `on` 在捕捉时指定异常类型，使用 `rethrow` 传播异常， 使用 `finally` 执行最终执语句。<br>\n如果在 finally 子句之前异常匹配任意 catch 字句，则执行完 finally 字句后异常会被隐式传播。<br>\ncatch 子句允许一个或两个参数，第一个参数时抛出的异常，第二个参数的堆栈跟踪（ StackTrace 对象）。<br>\nDart 中的方法并不声明它们可能抛出哪些异常，并且不需要捕获任何异常。<br>\n```dart\nvoid misBehave() {\n    try {\n        breedMoreLlamas();\n    } on OutofLamasException{\n        buyMoreLlamas();\n    } on Exception catch (e) {\n        print('Unknown exception: $e');\n        rethrow;\n    } catch (e, s) {\n        print('Exception details:\\n $e');\n        print('Stack trace:\\n $s');\n    } finally {\n        cleanLlamaStalls();\n    }\n}\n```\n\n<h1 id=\"7\">类 & 对象</h1>\n\n## 概述\nDart 是一种面向对象的语言，具有类和基于 mixin 的继承。每个对象都是一个类的实例，除 Null 之外的所有类都是从 Object 中派生。尽管每个类（顶层类 Object? 除外）只有一个超类，但是使用 mixin 可以实现类体在多个类层次结构中重用。扩展方法是一种在不更改类或创建子类的情况下向类添加功能的方法。类修饰符允许你控制库如何对类进行子类型化。<br>\n#### 成员使用\n使用点（`.`）来引用对象的变量或方法。<br>\n#### 构造方法重载\n构造方法的名称可以是 ClassName 或 Classname.identifier ，构造函数名称前的 new 关键字可以省略：<br>\n```dart\nvar p1 = new Point(2, 2);\nvar p2 = Point(2, 2);\nvar p3 = Point.fromJson({'x': 1, 'y': 2});\n```\n大多数语言重载构造函数的方式是重载同名构造函数，而 Dart 选择给构造函数提供 identifier 来实现重载。<br>\n#### 常量对象\n有些类提供了常量构造函数，如果要使用该常量构造函数创建编译时常量，要在构造函数名称前使用 `const` 关键字。<br>\n```dart\nvar p = const ImmutablePoint(2, 2);\n```\nconst 关键字作用的一定得是常量构造函数，而不能是普通的构造函数。<br>\n如果构造两个相同的编译时常量实际上它们会是一个实例。<br>\n```dart\nvar a = const ImmutablePoint(2, 2);\nvar b = const ImmutablePoint(2, 2);\n\nassert(identical(a, b));    //They are the same instance!\n```\n如果是在常量上下文中，你可以省略除第一个 const 关键字之外的其他 const 声明。比如下面的两个语句是等效的：<br>\n```dart\nconst pointAndLine = const {\n    'point': const [const ImmutablePoint(2, 2)],\n    'line': const [const ImmutablePoint(1, 10), const ImmutablePoint(-2, 11)],\n};\nconst pointAndLine = {\n    'point': [ImmutablePoint(2, 2)],\n    'line': [ImmutablePoint(1, 10), ImmutablePoint(-2, 11)],\n};\n```\n常量构造函数也可以构建非常量对象：<br>\n```dart\nvar a = ImmutablePoint(2, 2);   // a isn't a constant\n```\n#### 对象类型\n我们可以获取对象的类型：<br>\n```dart\nprint('The type of a is ${a.runtime.Type}');\n```\n但是，使用 `object as type` 而不是 `object.runtimeType` 会使你的代码更加安全。<br>\n#### 变量\n对于普通的成员变量，必须设定初始值，可以在声明时，也可以在构造函数参数中，还可以在初始值设定列表中。<br>\n```dart\nclass Point {\n    double? x;  //initially null\n    double y = 0;\n    double z;\n\n    Point(this.z);\n    Point.unz(): z = 0;\n}\n```\n没有使用 `late` 关键字描述的成员变量的创建时机为创建实例后，构造函数及其初始值设定列表项执行之前。<br>\n```dart\nclass Point {\n    double? x= 1.5;\n    //ERROR \n    //double? y = this.x;\n    double? y = 1.5;\n\n    late double? y = this.x;\n\n    Point(this.x, this.y);\n}\n```\n所有成员变量都会生成一个隐式的 getter 方法。没有使用 `final` 描述的成员变量，或者使用了 `late final` 描述但是没有初始值设定项的成员变量，都会生成一个隐式的 setter 方法。<br>\n使用 `final` 描述的成员变量必须只设置只设置一次值。\n```dart\nclass ProfileMark {\n    final String name;\n    final DateTime start = DateTime.now();\n\n    ProfileMark(this.name);\n    ProfileMark.unnamed(): name = '';\n}\n```\n如果要在构造函数政务启动后才分配 final 成员变量的值，可以使用下述方法：<br>\n- 使用工厂构造函数\n- 使用 late final 关键字描述。注意，没有初始值设定项的 late final 成员变量会隐式添加一个 setting 方法。\n#### 隐式接口\n所有类都隐式定义了一个接口，其中包含该类的所有实例成员（不包括类成员）及其实现的任何接口。<br>\n类可以通过在 `implements` 子句中声明一个或多个接口，然后提供接口所需的实现。<br>\n```dart\nclass Person {\n    final String _name;\n\n    Person(this._name);\n\n    String greet(String who) => 'Hello, $who. I am $_name';\n}\n\nclass Impostor implements Person {\n    String get _name => '';\n\n    String greet(String who) => 'Hello, $who. Do you kone who I am?';\n}\n```\n#### static\n使用 `static` 关键字可以在类中定义类变量（也称静态变量）和类方法。<br>\n静态变量在使用之前不会初始化。<br>\n```dart\nclass Queue {\n    static const initialCapacity = 16;\n}\n```\n类方法不在实例上运行，因此也无权访问 `this.` 。静态方法可以作为编译时常量。<br>\n## 构造方法\n最常见的构造函数是创建与其类同名的函数来声明构造函数。<br>\n```dart\nclass Point {\n    double x = 0;\n    double y = 0;\n\n    Point(this.x, this.y);\n}\n```\n一般会使用**初始化形式参数**的功能来简化将构造函数的参数分配给实例变量的过程。<br>\n**构造函数是不会继承的。**<br>\n#### 默认构造函数\n如果未声明构造函数，则会提供默认构造函数。默认构造函数没有参数，并且调用超类中的无参数构造函数。<br>\n#### 命名构造函数\n命名构造函数可以为类实现多个构造函数。<br>\n```dart\nconst double xOrigin = 0;\nconst double yOrigin = 0;\n\nclass Point {\n    final double x;\n    final double y;\n\n    Point(this.x, this.y);\n\n    Point.origin(): x = xOrigin, y = yOrigin;\n}\n```\n上述的构造函数还使用到了**初始值设定列表**的功能。<br>\n命名构造函数的使用也很方便，就是 `ClassName.identifier()`。<br>\n#### 初始值设定列表\n```dart\n//...\nPoint.fromJson(Map<String, double> json): x = json['x']!, y = json['y'] {\n    print('In Point.fromJson(): ($x, $y)');\n}\n//...\n```\n初始值设定列表项的右侧无权访问 this 。\n#### 调用非默认超类构造函数\n默认情况下，子类中的构造函数会调用超类的未命名、无参数构造函数。执行顺序如下：<br>\n\n- 初始值设定列表\n- 超类构造函数\n- 构造函数的主体\n\n如果超类没有无参构造函数，或者你需要调用超类的其他构造函数，你就需要手动调用超类的构造函数。<br>\n手动调用超类构造函数的方法是在冒号( `:` )之后，函数体之前。<br>\n```dart\nclass Person {\n    String? firstName;\n\n    Person.fromJson(Map data) {\n        print('in Person');\n    }\n}\n\nclass Employee extends Person {\n    Employee.fromJson(super.data) : super.fromJson() {\n        print('in Employee');\n    }\n}\n\nvoid main {\n    var employee = Employee.fromJson({});\n    print(employee);\n}\n```\n上述代码中手动调用了超类的构造函数，并且使用了**超级参数**功能将子类构造函数的入参直接分配到超类的构造函数入参上。<br>\n#### 超级参数\n超级参数功能可以避免手动将每个参数传递到超类的构造函数中。其语法与初始化形式参数的类似。\n```dart\nclass Vector2d {\n    final double x;\n    final double y;\n\n    Vector2d(this.x, this.y);\n}\n\nclass Vector3d extends Vector2d {\n    final double z;\n\n    Vector3d(super.x, super.y, this.z);\n}\n```\n此功能不能与**重定向构造函数**一起使用。<br>\n#### 重定向构造函数\n有时，构造函数的唯一目的是重定向都同一个类中的另一个构造函数。<br>\n重定向构造函数没有函数体，使用 `this.` 调用其他构造函数。<br>\n```dart\nclass Point {\n    double x, y;\n\n    Point(this.x, this.y);\n\n    Point.alongXAxis(double x): this(x, 0);\n}\n```\n#### 常量构造函数\n如果类生成的对象永不更改，则可以使这些对象成为编译时常量。为此我们可以定义一个 const 构造函数， 并确保所有成员变量都是 final 。<br>\n```dart\nclass ImmutablePoint {\n    static const ImmutablePoint origin = ImmutablePoint(0, 0);\n\n    finnal double x, y;\n\n    const ImmutablePoint(this.x, this.y);\n}\n```\n#### 工厂构造函数\n在实现并不总是创建其类的新实例的构造函数时，我们可以使用关键字 `factory` 来声明一个工厂构造函数，它可能会从缓存中返回一个实例，或者返回子类型的实例。<br>\n工厂构造函数无法访问 this 。\n工厂构造函数的调用与其他构造函数一样。\n## 成员方法\n成员方法与其他语言的类似。<br>\nDart 允许你使用 `operator` 关键字重载下述的运算符：<br>\n`<`     `>`    `<=`     `>=`    `==`    `~`\n`-`     `+`     `/`     `~/`    `*`     `%`\n`|`     `^`     `&`     `<<`    `>>>`   `>>`\n`[]=`   `[]`\n#### 抽象方法\n只有声明没有实现的方法叫做抽象方法。<br>\n抽象方法只能存在于抽象类或混合类中。<br>\n使用 `abstrcat` 关键字声明抽象类。<br>\n#### getter 和 setter\ngetter 和 setter 是对对象属性进行读写访问的特殊方法。我们可以使用 `get` 和 `set` 关键字实现 getter 和 setter 来创建其他属性：<br>\n```dart\nclass Rectangle {\n    double left, top, width, height;\n\n    Rectangle(this.left, this.top, this.widht, this.height);\n\n    double get right => left + width;\n    set right(double value) => left = value - width;\n    double get bottom => top + height;\n    set bottom => top = value - height;\n}\n\nvoid main() {\n    var rect = Rectangle(3, 4, 20, 15);\n    assert(rect.left == 3);\n    rect.right = 12;\n    assert(rect.left == -8);\n}\n```\n#### 特殊的成员方法\n如果要实现像调用函数一样使用对象，要在类中定义 call() 方法。<br>\ncall() 方法的返回值和参数都可以自定义。<br>\n```dart\nclass WannabeFunction {\n    String call(String a, String b, String c) => '$a $b $c';\n}\n\nvar wf = WannabeFunction();\nvar out = wf('Hi', 'there', 'gang');\n\nvoid main() => print(out);\n```\n## 继承\n使用 `extends` 关键字表示继承， 使用 `super` 引用超类。<br>\n子类可以重写实例方法、 getter 和 setter 。你如果你愿意，你可以使用 @override 批注。<br>\n重写需要满足下述要求：<br>\n\n- 返回类型必须与重写方法的返回类型相同或是其子类。\n- 参数类型必须与重写方法的参数类型相同或是其超类。\n- 参数中，位置参数的数量要一致。\n- 泛型方法不能重写非泛型方法，非泛型方法不能重写泛型方法。\n\n有时你可能想要通过使用子类作为参数类型来缩小输入，那请使用 covariant 关键字。\n需要注意的是，如果你重写了 `==` 运算符，那你也要重写 hashCode 的 getter 。\n#### noSuchMethod()\n这个一个特殊的方法，如果你需要可以重写这个方法。<br>\n## 混入( Mixin )\nMixins 是一种定义代码的方法，可以在多个类层次结构中重用。它们旨在为成员提供集体实现。<br>\n在定义类时，使用 with 子句并声明一个或多个 mixin 。<br>\n```dart\nclass Musician extends Performer with Musical {\n\n}\n```\n使用 `mixin` 关键字声明一个 mixin 。同时 mixin 需要满足下述规则：<br>\n\n- Mixin 中不能使用 extends 。\n- Mixin 中不能声明任何生成构造函数。（也就是只允许一个默认构造函数）\n\n```dart\nmixin Musical {\n    bool canPlayPiano = false;\n    bool canCompose = false;\n    bool canConduct = false;\n\n    void entertainMe() {\n        if (canPlayPiano) {\n            print('Playing piano');\n        } else if (canConduct) {\n            print('Waving hands');\n        } else {\n            print('Humming  to self');\n        }\n    }\n}\n```\n有时候你希望限制可以使用 mixin 的类型，则可以在声明 mixin 时使用 `on` 关键字来指定用于限制的超类。<br>\n这样子，只有继承链 (`extends`) 或接口实现链 (`implements`) 中有该超类的类才能使用该 mixin 。<br>\n```dart\nclass Musician {}\nmixin MusicalPerformer on Musician {}\nclass SingerDancer extends Musician with MusicalPerformer {}\n```\n#### mixin class\n`mixin` 声明定义类 mixin ，`class` 声明定义类一个类。`mixin class` 声明定义一个类，这个类既可用作常规类，也可用作 mixin 。它需要同时遵守 mixin 和 class 的约束。<br>\n\n- mixin 声明不能有 extends 或 with 字句\n- class 声明不能有 on 字句\n\n#### abstract mixin class\n如果你想在 mixin class 上实现类似 on 字句的效果，可以使用 `abstract` 关键字，并在其中定义所依赖的抽象方法。<br>\n```dart\nabstract mixin class Musician {\n    void playInstrument(String instrumentName);\n\n    void playPiano() {\n        playInstrument('Piano');\n    }\n\n    void playFlute() {\n        playInstrument('Flute');\n    }\n}\n\nclass Virtuoso with Musician {\n    void playInstrument(String instrumentName) {\n        print('Plays the $instrumentName beautifully');\n    }\n}\n\nclass Novice extends Musician {\n    void playInstrument(String instrumentName) {\n        print('Plays the $instrumentName poorly');\n    }\n}\n```\n## 枚举\n```dart\nenum Color {red, green, blue}\n```\n#### 增强枚举\n枚举允许在其中声明变量、方法和 const 构造函数，使其获得与类相似的行为。但需遵循下述规则：<br>\n\n- 成员变量必须是 final ，包括 mixin 添加的变量。\n- 只允许 const 生成构造函数\n- 工厂构造函数只允许返回一个字段，这个字段是已知的枚举实例 ( enum instance) 。\n- 没有其他类可以 extends Enum 。\n- 不能重写 index 、hashCode 、== 运算符。\n- 不能在枚举中声明与成员变量同名的枚举项。\n- 枚举项是声明必须在整个枚举声明的开头，并且至少声明一个枚举项。\n\n```dart\nenum Vehicle implements Comparable<Vehicle> {\n    car(tires: 4, passengers: 5, carbonPerKilometer: 400),\n    bus(tires: 6, passengers: 50, carbonPerKilometer: 800),\n    bicycle(tires: 2, passengers: 1, carbonPerKilometer: 0);\n\n    const Vehicle({required this.tires, required this.passemgers, required this.carbonPerKilometer});\n\n    final int tires;\n    final int passengers;\n    final int carbonPerKilometer;\n\n    int get carbonFootprint => (carbonPerKilometer / passengers).round();\n\n    bool get isTwoWheeled => this == Vehicle.bicycle;\n\n    @override\n    int compareTo(Vehicle other) => carbonFootprint- other.carbonFootprint;\n}\n```\n#### 使用枚举\n像访问类的静态变量一样访问枚举值。<br>\n枚举中的每个值都有一个 index 的 getter ，它返回枚举值声明的顺序，从 0 开始。<br>\n使用 values 常量可以获取该枚举的值列表。<br>\n使用 name 属性获取枚举值名称。<br>\n```dart\nfinal favoriteColor = Color.blue;\nassert(Color.red.index == 0);\nList<Color> colors = Color.values;\nprint(Color.blue.name);//'blue'\n```\n## 扩展方法\n我们可以使用 `extension on` 关键字扩展类的方法、getter 、setter 或运算符。也可以扩展静态字段和 static helper methods 。<br>\n在 extension 和 on 中间我们可以定义扩展的名称。如果扩展名没有显式定义或者扩展名是以 `_` 开头的，那该扩展仅在声明它们的库中可见。<br>\n```dart\nextension NumberParsing on String {\n    int parseInt() {\n        return int.parse(this);\n    }\n\n    double parseDouble() {\n        return double.parse(this);\n    }\n}\nprint('42'.parseInt());\nprint(NumberParsing('42').parseInt());\n```\n如果变量类型声明为 dynamic ，则不能在该变量上调用扩展方法。<br>\n## 扩展类型\n事实上，扩展类型是不安全的抽象，尽管它能轻松修改现有类型的接口而不产生实际包装器的成本。<br>\n\n<h1 id=\"8\">类修饰符</h1>\n\n类修饰符关键字位于类或 mixin 声明之前，包括：<br>\n\n- abstract\n- base\n- final\n- interface\n- sealed\n- mixin\n\n只有 base 修饰符可以出现在 mixin 声明之前。<br>\n#### abstract\n声明一个抽象类，抽象类不能直接构造实例。<br>\n#### base\n强制lei或 mixin 实现。同时基类不允许在其自己的库之外进行被 implements 。<br>\n必须将实现或继承基类的任何类标记为 base 、final 或 sealed 。这样可以防止外部库破坏基类保证。<br>\n#### interface\ninterface 定义的接口不能在外部库中被继承。\n#### final\n禁止当前类被外部库继承或 implements 。不过可以在同一库中被继承或 implements 。因此其任何子类也必须标记为 base 、final 或 sealed。<br>\n#### sealed\n描述该类的子类是已知的、可枚举的。<br>\n## 组合类修饰符\n类声明可以安装顺序排列：<br>\n\n- （可选）abstract\n- （可选）base 、interface 、 final 或 sealed\n- （可选）mixin\n- class 关键字本身\n\n一些类修饰符是不能组合使用的：<br>\n\n1. abstract 和 sealed 。因为 sealed 已经是隐式 abstract 。\n2. interface 、final 或 sealed ，它们与 mixin 不能混用，因为它们会阻止混入。\n\n\n<h1 id=\"9\">并发</h1>\n\n此章节由于对于 Dart 的并发编程没有什么理解，无法进行较好的整理。故延后。\n[Dart 并发](https://dart.cn/language/concurrency)\n\n<h1 id=\"10\">空安全</h1>\n\n在没有空安全之前，空类型可以看作是所有类型的子类。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071924553.png)\n在空安全之后，空类型是一个单独的类型。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925831.png)\n可空类型是该类型与空类型的超类。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925353.png)\n在空安全之后，函数参数的隐式类型转换被移除。<br>\n在没有空安全之前，Dart 的类型系统中，Object 是顶层类型，Null 是底层类型。在空安全之后，Object? 是顶层类型，Never 是底层类型。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071927113.png)\nthrow 表达式的静态类型就是 Never 。<br>\n```dart\n    Never wrongType(String type, Object value) {\n        throw ArgumentError('Expected $type, but was ${value.runtimeType}.');\n    }\n```\n## late 关键字\n`late` 关键字有多种语义。<br>\nlate 修饰符是“在运行时而非编译时对变量进行约束”。因此 late 修饰的变量允许延迟初始化。而加上了 late 修饰意味着“每次运行都要检查是否已经赋值”。<br>\n","source":"_posts/Dart-brief.md","raw":"---\ntitle: Dart 简述\ndate: 2024-05-20 09:25:31\ntags: 语法\n---\n# 目录\n[前言](#0)\n[基础表达式](#1)\n[类型](#2)\n[模式匹配](#3)\n[函数方法](#4)\n[控制流](#5)\n[错误处理](#6)\n[类 & 对象](#7)\n[类修饰符](#8)\n[并发](#9)\n[空安全](#10)\n\n<h1 id = \"0\">前言</h1>\n\n本文简单整理了来自 [Dart 官网的《 Dart 开发语言 》](https://dart.cn/language)章节内容。仅用于简单理解 Dart 的语法。<br>\n\n<h1 id=\"1\">基础表达式</h1>\n\n## 变量\n以下是创建并初始化变量的例子：<br>\n```dart\nvar name = 'Bob';\n```\n使用 `var` 定义了一个变量，并且通过初始化赋值触发类型推导确定变量的类型。<br>\n如果你明确变量的类型，也可以直接用具体类型替换 `var` 。<br>\nDart 支持空值。<br>\n```dart\nString? name    //Nullable type. Can be `null` or string\nString name     //Non-nullable type.\n```\n你必须在使用变量之前对其进行初始化，Dart 不会为非可空类型设置默认初始值。而可空变量是默认初始化为 null 的。也就是说对于非可空类型变量，在声明时要提供一个默认初始值。<br>\nDart 中的非可空变量类型都继承于 Object ，因此你可以使用 `Object` 类型来定义一个可以存储任意非可空类型数据的变量。<br>\n如果你必须推迟变量的类型检测到运行时，那你可以使用特殊类型 `dynamic` 。<br>\nDart 提供了一个关键字 `late` 。该关键字允许你声明非可空类型变量时不初始化，支持在第一次使用到该变量时才执行初始化流程。<br>\n如果你不打算更改一个变量，可以使用 `final` 或 `const` 。\n```dart\nfinal name = 'Bob';\nfinal String nickname = 'Bobby';\nvar foo = const [];\nfinal bar = const [];\nconst baz = [];\n```\nfinal 对象不能被修改，但是其字段可能可以被修改。 const 对象本身及其内容不能被更改。\n你可以在定义常量时使用类型检查 `is` 和转换 `as` 、集合中的 `if` 和展开操作符 (`...` 和 `...?`) 。<br>\n```dart\nconst object i = 3;\nconst list = [i as int];\nconst map = {if (i is int) i: 'int'};\nconst set = {if (list is List<int>) ...list}\n```\n## 操作符\n操作符与其他语言中的大体相符。此处只介绍一些不常见的操作符。<br>\n \n 1. ！\n    - 作为后缀操作符，用于强调表达式的计算结果永远不会是 null\n    - 作为前缀操作符号，则是常见的反转值功能\n 2. ～/\n    - 除法，但是返回整数结果\n 3. is!\n    - 与 is 操作符的结果相反\n4. ??= \n    - 仅在被赋值对象为 null 时进行赋值\n5. >>>\n    - 无符号右移\n6. .. 和 ?.. \n    - 级联操作符，用于省略调用的变量\n        ```dart\n        var paint = Paint()\n        ..color = Colors.black  // paint.color = COlors.black\n        ```\n7. ... 和 ...?\n    - 这其实不是一个运算符，而是集合本身的一部分，是一种将一个集合中的多个值插入到集合中的简洁方法\n        ```dart\n        var list = [1,2,3];\n        var list2 = [0, ...list];\n        ```\n\n## 注释\n注释的写法与常见语言中的一致。<br>\n## 注解\n元数据注解以 `@` 开始。<br>\n所有 Dart 代码中都内置了四个注解：@Deprecated 、@deprecated 、@override 和 @pragma 。<br>\n@Deprecated 和 @deprecated 的区别在于前者可以指定消息。<br>\n```dart\n@Deprecated('Use turnOn instead')\n```\n我们可以定义自己的注解。<br>\n```dart\nclass Todo {\n    final String who;\n    final String what;\n\n    const Todo(this.who, this.what);\n}\n@Todo('Dash', 'Implement this function')\nvoid doSomething() {\n    print('Do something');\n}\n```\n## 库和导库\nDart 使用 import 关键字来导入库。<br>\n并且 Dart 没有其他语言中的那些访问权限关键字，而是仅仅使用如下规则：<br>\n\n- 以下划线 `_` 开通的标识符仅在库中可见。\n\n下面是 Dart 中的一个导库的例子：<br>\n```dart\nimport 'dart:html';\nimport 'package:test/test.dart';\n```\n我们可以仅加载库的部分：<br>\n```dart\n//Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n//Import all banes EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;\n```\n当导入的多个库中具有冲突的标识符时，我们可以为库指定前缀：<br>\n```dart\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n\nElement elememt1 = Element();\nlib2.Element element2 = lib2.Element();\n```\n如果你在使用 Web 相关功能，你可能会需要 Dart 延迟加载库的功能，请查阅文档。<br>\n\n<h1 id=\"2\">类型</h1>\n\n## 基本类型\nDart 中支持的基本数据类型与其他面对对象的语言类似。<br>\n值得注意的是 Dart 中的字符串的保存使用 UTF-16 。<br>\n同时它可以使用 r 前缀来输出不转义的字符串：<br>\n```dart\nvar s = r'In a raw string, not even \\n gets special treatment.'\n```\n同时，我们可以使用 `$` 将变量放入字符串中，也可以使用 `${}` 将表达式放入字符串中：<br>\n```dart\nvar s = 'string interpolation';\nvar m = {1: 'int'};\n\nprint('Dart has $s, which is very handy.');\nprint('${m}');\n```\nDart 是类型安全语言，这也就意味着你不能不使用像 `if(nonbooleanValue)` 这样的代码。<br>\n## Records 类型\nRecords 是匿名的、不可变的聚合类型。<br>\n```dart\nvar record = ('first', a: 2, b: true, 'last');  // this type is (String, int, bool, String)\n```\n我们可以使用占位符或者字段描述名访问字段值：<br>\n```dart\nprint(record.$1);   // Prints 'first'   \nprint(record.a);\n```\nRecords 类型对象是不可变的，其只有 getter 字段，而没有 setting 字段。<br>\n字段描述名不影响 Records 本身的相等性。<br>\n我们可以使用模式匹配将 Records 值解构为局部局部变量：<br>\n```dart\n(String name, int age) userInfo(Map<String, dynamic> json) {\n    retur (json['name'] as String, json['age'] as int);\n}\n\nfinal json = <String, dynamic> {\n    'name': 'Dash',\n    'age': 10,\n    'color': 'blue'\n};\n\nvar (name, age) = userInfo(json);\n```\n## 集合\nDart 的集合包括 List 、Set 和 Map\n同时支持使用 `...` 、`...?` 、 `if` 、`for` 、`if-case` 构建集合。<br>\n```dart\nvar list = [1,2,3];\nvar list2 = [0, ...list];\nassert(list2.length == 4);\n\nList<int>? list3 = null;\nvar list4 = [0, ...?list3];\nassert(list4.length == 1);\n\nvar nav = ['Home', 'Furniture', 'Plants', if (promoActive) 'Outlet'];    //if promoActive is true, this list has 4 elements, otherwise only 3 elements.\n\nvar nav1 = ['Home', 'Furniture', 'Plants', if (login case 'Manager') 'Inventory'];\n\nvar listOfInts = [1, 2, 3];\nvar listOfStrings = ['#0', for (var i in listOfInts) '#$i'];\nassert(listOfStrings[1] == '#1');\n```\n## 泛型\n```dart\nabstrct class Cache<T> {\n    T getByKey(String key);\n    void setByKey(String key, T value);\n}\n\nclass Foo<T extends Object> {\n    //Any type provided to Foo for T must be non-nullable\n}\n\nT first<T>(List<T> ts) {\n    T tmp = ts[0];\n\n    return tmp;\n}\n```\n## 别名\n```dart\ntypedef IntList = List<int>;\n\ntypedef ListMapper<X> = Map<X, List<X>>;\n```\n对于函数，我们推荐使用内联函数类型而不是函数等 typedef。<br>\n```dart\ntypedef Compare<T> = int Function(T a, T b);\n\nint sort(int a, int b) => a - b;\n\nvoid main() {\n    assert(sort is Compare<int>);   //True\n}\n```\n## 类型系统\nDart 支持在重写方法时，使用一个新类型（在新方法中）替换旧类型（在旧方法中）。类似的，当参数传递给函数时，可以使用另一种类型（实际参数）的对象替换现有类型（具有声明类型的参数）要求的对象。从生产者和消费者的角度来看，消费者接受类型，生产者产生类型。可以使用父类型替换消费者类型，使用子类型替换生产者类型。<br>\n```dart\nCat c = Cat();\nAnimal a = Cat();\nCat c2 = MaineCoon();\n```\n赋值运算符左边是消费者，右边是生产者。<br>\n\n<h1 id=\"3\">模式匹配</h1>\n\n## 概览\n```dart\nswitch (number){\n    case 1:\n        print('one');\n    //Matches of tje value pf pbj is between the constant values of 'first' and 'last'\n    case >= first && <= last:\n        print('in range');\n}\n\nconst a = 'a';\nconst b = 'b';\nswitch (obj) {\n    case [a,b]:\n        print('$a, $b');\n}\n\nvar numList = [1, 2, 3];\nvar [a, b, c] = numList;\nprint(a + b + c);\n\n//下面匹配了一个第一个元素是 'a' 或 'b' 的两元素列表\nswitch (list) {\n    case ['a' || 'b', var c]:\n        print(c);\n}\n```\n总的来说，Dart 提供的模式匹配功能十分强大。<br>\n我们可以使用模式匹配很方便地实现交换两个变量的值。<br>\n```dart\nvar (a, b) = ('left', 'right');\n(b, a) = (a, b);\nprint('$a $b');\n```\n可以让多个 case 共享一个 body：<br>\n```dart\nvar isPrimary = switch (color) {\n    Color.red || Color.yellow || Color.blue => true,\n    _ => false\n}\n```\n可以在 case 中增加添加：<br>\n```dart\nswitch (shape) {\n    case Square(size: var s) || Circle(size: var s) when s> 0:\n        print('Non-empty symmetric shape');\n}\n```\n将 getter 调用的结果绑定到同名变量：<br>\n```dart\nMap<String, int> hist {\n    'a': 23,\n    'b': 100,\n};\n\nfor (var MapEntry(:key, value: count) in hist.entries) {\n    ///\n}\n```\n上述 `.entries` 返回的是一个 `Iterable<MapENtry<K, V>>` ，因为其字段 key 与我们要赋值的变量 key 同名，因此可以将 `key:key` 简化为 `:key` 。<br>\n我们可以使用模式将 Records 的字段直接结构为局部变量，与函数内联。也可以使用模式解构类实例。<br>\n```dart\nvar (name, age) = userInfo(json);\n\nfinal Foo myFoo = Foo(one: 'one', tew: 2);\nvar Foo(:one, :teo) = myFoo;\n```\n使用模式实现函数的策略设计模式：<br>\n```dart\nsealed class Shape{}\n\nclass Square implements Shape {\n    final double length;\n    Square(this.length);\n}\n\nclass Circle implements Shape {\n    final double radius;\n    Circle(this. radius);\n}\n\ndouble calculateArea(Shape shape) => switch (shape) {\n    Square(;ength: var l) => l * l,\n    Circle(radius: var r) => math.pi * r * r\n};\n```\n使用模式我们可以很便捷的验证并使用 json 结构中的数据：<br>\n```dart\nif (json case {'user': [String name, int age]}) {\n    print('User $name is $age years old.');\n}\n```\n## 模式匹配类型\n模式匹配与逻辑组合使用时同样有运算优先级存在。<br>\n我们还可以使用模式匹配来实现空校验或空断言：<br>\n```dart\nString? maybeString = 'nullable with base type String';\nswitch (maybeString) {\n    case var s?:\n    // 's' has type non-nullable String here.\n}\n\nList<String?> row = ['user', null];\nswitch (row) {\n    case ['user', var name!]: //...\n    //'name' is a non-nullable here.\n}\n```\n\n<h1 id=\"4\">函数方法</h1>\n\nDart 中的函数也是对象，类型是 `Function`。<br>\n```dart\nbool isNoble(int atomicNumber) {\n    return _nobleGases[atomicNumber] != null;\n}\n```\n```dart\nbool isBoble(int atomicNumber) => _nobleGases[atomicNumber] != null;\n```\n上述第二种函数声明是第一种的简写语法，仅当函数中只包含一个表达式时可用。也就是说你不可以在 `=>` 之后放一个 if 语句。<br>\n`=> expr` 语法是 `{ return expr; }` 的简写。（类似于其他语言中的宏定义。<br>\n一个函数可以有任意数量的普通参数。这些参数后面可以跟着命名参数和位置参数（但不能同时跟着这两个参数）。<br>\n函数命名参数和位置参数都可以指定默认值，但必须是编译时常量。普通参数不能指定默认值。<br>\n## 命名参数\n定义函数时，使用 `{param1, param2, ...}` 指定命名参数。如果你没有**提供默认值**或将命名参数标记为 `required`,则它们类型必须是可空的，因为 Dart 提供的默认值是 null。<br>\n```dart\nvoid enableFlags(int a, {bool? bold, bool hidden = false, required Widget child}) {...}\n```\n命名参数指这些参数必须通过命名来传递。<br>\n## 位置参数\n定义函数时，使用 `[param1, param2, ...]` 指定位置参数。如果不提供默认值，则它们的参数类型必须是可空的。<br>\n位置参数要求传参时安装定义的顺序传递入参。<br>\n```dart\nString say(String from, String msg, [String? device]) {\n    var result = '$from says $msg';\n    if (deivce != null) {\n        result = '$result with a $device';\n    }\n    return result;\n}\n```\n## main 函数\nmain 作为 flutter 应用程序的入口点。<br>\n```dart\nvoid main(List<String> args) {\n    ...\n}\n```\n## 函数闭包\nDart 支持函数闭包。<br>\n```dart\nFunction makeAdder(int addBy) {\n    return (int i) => addBy + i;\n}\n\nvoid main() {\n    var add2 = makeAdder(2);\n\n    assert(add2(3) == 5);\n}\n```\nDart 闭包访问的是其词法作用域中的变量。如果原变量的值在被捕捉之后发生了变化，也不会影响 Dart 闭包中已经捕捉的值。<br>\n## 生成器\n当你需要延迟产生一个值序列时，可以考虑使用生成器函数。Dart 内置支持两种生成器函数：<br>\n\n- 同步生成器：返回一个 Iterable 对象\n- 异步生成器：返回一个 Stream 对象\n\n#### 实现同步生成器\n使用 `sync*` 标记函数，并使用 `yield` 语句来传递值：\n```dart\nIterable<int> naturalsTo(int n) sync* {\n    int k = 0;\n    while (k < n) yield k++;\n}\n```\n#### 实现异步生成器\n使用 `async*` 标记函数，并使用 `yield` 语句传递值。<br>\n```dart\n    Stream<int> asynchronousNaturalsTo(int n) async* {\n        int k = 0;\n        while (k < n) yield k++;\n    }\n```\n#### 使用 `yield*` 提高递归生成器函数的性能\n```dart\nIterable<int> naturalsDownFrom(int n) sync* {\n    if (n > 0) {\n        yield n;\n        yield* naturalsDownFrom(n - 1);\n    }\n}\n```\n### 外部函数\n外部函数是其主体与其声明分开实现的函数。使用 `external` 关键字。<br>\n```dart\nexternal void someFunc(int i);\n```\n\n<h1 id=\"5\">控制流</h1>\n\n## 循环\nDart 支持 for 循环、while 和 do-while 回路，以及 break 和 continue。<br>\n```dart\nvar callbacks = [];\nfor (var i = 0; i < 2; i++) {\ncallbacks.add(() => print(i));\n}\n\nfor (final c in callbacks) {\nc();\n}\n//The ouput is 0 and then 1, as expected.\n```\n## 分支\nDart 还支持 if 、 if-case 和 switch 分支语句。<br>\nif 后面括号中的条件必须是计算结果为布尔值的表达式。<br>\nif-case 语句支持模式匹配。<br>\n```dart\nif (pair case [int x, int y]) {\n    print('Was coordinate array $x, $y');\n} else {\n    throw FormatException('Invalid coordinates.');\n}\n```\nswitch 语句有如下规则：<br>\n\n- 非空的 case 子句中完成后跳转到 switch 的末尾， 不需要 break。\n- 空 case 子句会隐式添加 fallthrough\n- 可以使用 continue +标签 来实现非顺序的 fallthrough\n- 可以使用default 或 _\n- 支持进一步条件约束，仅需要在 case 主体之后添加 `when` 子句（if-case 语句中也支持）\n\n```dart\nswitch (command) {\n    case 'OPEN':\n        executeOpen();\n        continue newCase;\n    case 'DENIED':\n    case 'CLOSE':\n        executeClosed();    //Runs for both DENIED and CLOSED\n    newCase:\n    case 'PENDING':\n        executeNowClosed(); //Runs for both OPEN and PENDING\n}\n```\n从 Dart 3.0 版本开始，支持 switch 表达式。 switch 表达式必须作为语句的一部分，而不能是单独的语句。<br>\n```dart\nvar x = switch (y) {...};   //this will run switch\nprint(switch (x) {...});\nreturn switch (x) {...};\n/*error usage\n* switch (x) {...};\n*/\n```\nswitch 表达式遵循下述规则：<br>\n\n- Cases 不再需要使用 case 关键字\n- case 主体是一个表达式而不是一系列语句。\n- 每个 case 都必须有一个 body ，空 case 没有隐式的 fallthrough\n- 使用 `=>` 而不是 `:`\n- 使用 `,` 分隔 Cases\n- 默认只能使用 `_`\n\n```dart\ntoken = switch (charCode) {\n    slash || star || plus || minus => operator(charCode),\n    comma || semicolon => punctuation(charCode),\n    >= digit0 && <= digit9 => number(),\n    _ => throw FormatException('Invalid')\n}\n```\n\n<h1 id=\"6\">错误处理</h1>\n\nDart 使用 `throw` 抛出异常，默认提供了 Exception 和 Error 类型，但实际上 Dart 可以抛出任意非空对象作为异常。<br>\nDart 使用 `catch` 捕捉异常，使用 `on` 在捕捉时指定异常类型，使用 `rethrow` 传播异常， 使用 `finally` 执行最终执语句。<br>\n如果在 finally 子句之前异常匹配任意 catch 字句，则执行完 finally 字句后异常会被隐式传播。<br>\ncatch 子句允许一个或两个参数，第一个参数时抛出的异常，第二个参数的堆栈跟踪（ StackTrace 对象）。<br>\nDart 中的方法并不声明它们可能抛出哪些异常，并且不需要捕获任何异常。<br>\n```dart\nvoid misBehave() {\n    try {\n        breedMoreLlamas();\n    } on OutofLamasException{\n        buyMoreLlamas();\n    } on Exception catch (e) {\n        print('Unknown exception: $e');\n        rethrow;\n    } catch (e, s) {\n        print('Exception details:\\n $e');\n        print('Stack trace:\\n $s');\n    } finally {\n        cleanLlamaStalls();\n    }\n}\n```\n\n<h1 id=\"7\">类 & 对象</h1>\n\n## 概述\nDart 是一种面向对象的语言，具有类和基于 mixin 的继承。每个对象都是一个类的实例，除 Null 之外的所有类都是从 Object 中派生。尽管每个类（顶层类 Object? 除外）只有一个超类，但是使用 mixin 可以实现类体在多个类层次结构中重用。扩展方法是一种在不更改类或创建子类的情况下向类添加功能的方法。类修饰符允许你控制库如何对类进行子类型化。<br>\n#### 成员使用\n使用点（`.`）来引用对象的变量或方法。<br>\n#### 构造方法重载\n构造方法的名称可以是 ClassName 或 Classname.identifier ，构造函数名称前的 new 关键字可以省略：<br>\n```dart\nvar p1 = new Point(2, 2);\nvar p2 = Point(2, 2);\nvar p3 = Point.fromJson({'x': 1, 'y': 2});\n```\n大多数语言重载构造函数的方式是重载同名构造函数，而 Dart 选择给构造函数提供 identifier 来实现重载。<br>\n#### 常量对象\n有些类提供了常量构造函数，如果要使用该常量构造函数创建编译时常量，要在构造函数名称前使用 `const` 关键字。<br>\n```dart\nvar p = const ImmutablePoint(2, 2);\n```\nconst 关键字作用的一定得是常量构造函数，而不能是普通的构造函数。<br>\n如果构造两个相同的编译时常量实际上它们会是一个实例。<br>\n```dart\nvar a = const ImmutablePoint(2, 2);\nvar b = const ImmutablePoint(2, 2);\n\nassert(identical(a, b));    //They are the same instance!\n```\n如果是在常量上下文中，你可以省略除第一个 const 关键字之外的其他 const 声明。比如下面的两个语句是等效的：<br>\n```dart\nconst pointAndLine = const {\n    'point': const [const ImmutablePoint(2, 2)],\n    'line': const [const ImmutablePoint(1, 10), const ImmutablePoint(-2, 11)],\n};\nconst pointAndLine = {\n    'point': [ImmutablePoint(2, 2)],\n    'line': [ImmutablePoint(1, 10), ImmutablePoint(-2, 11)],\n};\n```\n常量构造函数也可以构建非常量对象：<br>\n```dart\nvar a = ImmutablePoint(2, 2);   // a isn't a constant\n```\n#### 对象类型\n我们可以获取对象的类型：<br>\n```dart\nprint('The type of a is ${a.runtime.Type}');\n```\n但是，使用 `object as type` 而不是 `object.runtimeType` 会使你的代码更加安全。<br>\n#### 变量\n对于普通的成员变量，必须设定初始值，可以在声明时，也可以在构造函数参数中，还可以在初始值设定列表中。<br>\n```dart\nclass Point {\n    double? x;  //initially null\n    double y = 0;\n    double z;\n\n    Point(this.z);\n    Point.unz(): z = 0;\n}\n```\n没有使用 `late` 关键字描述的成员变量的创建时机为创建实例后，构造函数及其初始值设定列表项执行之前。<br>\n```dart\nclass Point {\n    double? x= 1.5;\n    //ERROR \n    //double? y = this.x;\n    double? y = 1.5;\n\n    late double? y = this.x;\n\n    Point(this.x, this.y);\n}\n```\n所有成员变量都会生成一个隐式的 getter 方法。没有使用 `final` 描述的成员变量，或者使用了 `late final` 描述但是没有初始值设定项的成员变量，都会生成一个隐式的 setter 方法。<br>\n使用 `final` 描述的成员变量必须只设置只设置一次值。\n```dart\nclass ProfileMark {\n    final String name;\n    final DateTime start = DateTime.now();\n\n    ProfileMark(this.name);\n    ProfileMark.unnamed(): name = '';\n}\n```\n如果要在构造函数政务启动后才分配 final 成员变量的值，可以使用下述方法：<br>\n- 使用工厂构造函数\n- 使用 late final 关键字描述。注意，没有初始值设定项的 late final 成员变量会隐式添加一个 setting 方法。\n#### 隐式接口\n所有类都隐式定义了一个接口，其中包含该类的所有实例成员（不包括类成员）及其实现的任何接口。<br>\n类可以通过在 `implements` 子句中声明一个或多个接口，然后提供接口所需的实现。<br>\n```dart\nclass Person {\n    final String _name;\n\n    Person(this._name);\n\n    String greet(String who) => 'Hello, $who. I am $_name';\n}\n\nclass Impostor implements Person {\n    String get _name => '';\n\n    String greet(String who) => 'Hello, $who. Do you kone who I am?';\n}\n```\n#### static\n使用 `static` 关键字可以在类中定义类变量（也称静态变量）和类方法。<br>\n静态变量在使用之前不会初始化。<br>\n```dart\nclass Queue {\n    static const initialCapacity = 16;\n}\n```\n类方法不在实例上运行，因此也无权访问 `this.` 。静态方法可以作为编译时常量。<br>\n## 构造方法\n最常见的构造函数是创建与其类同名的函数来声明构造函数。<br>\n```dart\nclass Point {\n    double x = 0;\n    double y = 0;\n\n    Point(this.x, this.y);\n}\n```\n一般会使用**初始化形式参数**的功能来简化将构造函数的参数分配给实例变量的过程。<br>\n**构造函数是不会继承的。**<br>\n#### 默认构造函数\n如果未声明构造函数，则会提供默认构造函数。默认构造函数没有参数，并且调用超类中的无参数构造函数。<br>\n#### 命名构造函数\n命名构造函数可以为类实现多个构造函数。<br>\n```dart\nconst double xOrigin = 0;\nconst double yOrigin = 0;\n\nclass Point {\n    final double x;\n    final double y;\n\n    Point(this.x, this.y);\n\n    Point.origin(): x = xOrigin, y = yOrigin;\n}\n```\n上述的构造函数还使用到了**初始值设定列表**的功能。<br>\n命名构造函数的使用也很方便，就是 `ClassName.identifier()`。<br>\n#### 初始值设定列表\n```dart\n//...\nPoint.fromJson(Map<String, double> json): x = json['x']!, y = json['y'] {\n    print('In Point.fromJson(): ($x, $y)');\n}\n//...\n```\n初始值设定列表项的右侧无权访问 this 。\n#### 调用非默认超类构造函数\n默认情况下，子类中的构造函数会调用超类的未命名、无参数构造函数。执行顺序如下：<br>\n\n- 初始值设定列表\n- 超类构造函数\n- 构造函数的主体\n\n如果超类没有无参构造函数，或者你需要调用超类的其他构造函数，你就需要手动调用超类的构造函数。<br>\n手动调用超类构造函数的方法是在冒号( `:` )之后，函数体之前。<br>\n```dart\nclass Person {\n    String? firstName;\n\n    Person.fromJson(Map data) {\n        print('in Person');\n    }\n}\n\nclass Employee extends Person {\n    Employee.fromJson(super.data) : super.fromJson() {\n        print('in Employee');\n    }\n}\n\nvoid main {\n    var employee = Employee.fromJson({});\n    print(employee);\n}\n```\n上述代码中手动调用了超类的构造函数，并且使用了**超级参数**功能将子类构造函数的入参直接分配到超类的构造函数入参上。<br>\n#### 超级参数\n超级参数功能可以避免手动将每个参数传递到超类的构造函数中。其语法与初始化形式参数的类似。\n```dart\nclass Vector2d {\n    final double x;\n    final double y;\n\n    Vector2d(this.x, this.y);\n}\n\nclass Vector3d extends Vector2d {\n    final double z;\n\n    Vector3d(super.x, super.y, this.z);\n}\n```\n此功能不能与**重定向构造函数**一起使用。<br>\n#### 重定向构造函数\n有时，构造函数的唯一目的是重定向都同一个类中的另一个构造函数。<br>\n重定向构造函数没有函数体，使用 `this.` 调用其他构造函数。<br>\n```dart\nclass Point {\n    double x, y;\n\n    Point(this.x, this.y);\n\n    Point.alongXAxis(double x): this(x, 0);\n}\n```\n#### 常量构造函数\n如果类生成的对象永不更改，则可以使这些对象成为编译时常量。为此我们可以定义一个 const 构造函数， 并确保所有成员变量都是 final 。<br>\n```dart\nclass ImmutablePoint {\n    static const ImmutablePoint origin = ImmutablePoint(0, 0);\n\n    finnal double x, y;\n\n    const ImmutablePoint(this.x, this.y);\n}\n```\n#### 工厂构造函数\n在实现并不总是创建其类的新实例的构造函数时，我们可以使用关键字 `factory` 来声明一个工厂构造函数，它可能会从缓存中返回一个实例，或者返回子类型的实例。<br>\n工厂构造函数无法访问 this 。\n工厂构造函数的调用与其他构造函数一样。\n## 成员方法\n成员方法与其他语言的类似。<br>\nDart 允许你使用 `operator` 关键字重载下述的运算符：<br>\n`<`     `>`    `<=`     `>=`    `==`    `~`\n`-`     `+`     `/`     `~/`    `*`     `%`\n`|`     `^`     `&`     `<<`    `>>>`   `>>`\n`[]=`   `[]`\n#### 抽象方法\n只有声明没有实现的方法叫做抽象方法。<br>\n抽象方法只能存在于抽象类或混合类中。<br>\n使用 `abstrcat` 关键字声明抽象类。<br>\n#### getter 和 setter\ngetter 和 setter 是对对象属性进行读写访问的特殊方法。我们可以使用 `get` 和 `set` 关键字实现 getter 和 setter 来创建其他属性：<br>\n```dart\nclass Rectangle {\n    double left, top, width, height;\n\n    Rectangle(this.left, this.top, this.widht, this.height);\n\n    double get right => left + width;\n    set right(double value) => left = value - width;\n    double get bottom => top + height;\n    set bottom => top = value - height;\n}\n\nvoid main() {\n    var rect = Rectangle(3, 4, 20, 15);\n    assert(rect.left == 3);\n    rect.right = 12;\n    assert(rect.left == -8);\n}\n```\n#### 特殊的成员方法\n如果要实现像调用函数一样使用对象，要在类中定义 call() 方法。<br>\ncall() 方法的返回值和参数都可以自定义。<br>\n```dart\nclass WannabeFunction {\n    String call(String a, String b, String c) => '$a $b $c';\n}\n\nvar wf = WannabeFunction();\nvar out = wf('Hi', 'there', 'gang');\n\nvoid main() => print(out);\n```\n## 继承\n使用 `extends` 关键字表示继承， 使用 `super` 引用超类。<br>\n子类可以重写实例方法、 getter 和 setter 。你如果你愿意，你可以使用 @override 批注。<br>\n重写需要满足下述要求：<br>\n\n- 返回类型必须与重写方法的返回类型相同或是其子类。\n- 参数类型必须与重写方法的参数类型相同或是其超类。\n- 参数中，位置参数的数量要一致。\n- 泛型方法不能重写非泛型方法，非泛型方法不能重写泛型方法。\n\n有时你可能想要通过使用子类作为参数类型来缩小输入，那请使用 covariant 关键字。\n需要注意的是，如果你重写了 `==` 运算符，那你也要重写 hashCode 的 getter 。\n#### noSuchMethod()\n这个一个特殊的方法，如果你需要可以重写这个方法。<br>\n## 混入( Mixin )\nMixins 是一种定义代码的方法，可以在多个类层次结构中重用。它们旨在为成员提供集体实现。<br>\n在定义类时，使用 with 子句并声明一个或多个 mixin 。<br>\n```dart\nclass Musician extends Performer with Musical {\n\n}\n```\n使用 `mixin` 关键字声明一个 mixin 。同时 mixin 需要满足下述规则：<br>\n\n- Mixin 中不能使用 extends 。\n- Mixin 中不能声明任何生成构造函数。（也就是只允许一个默认构造函数）\n\n```dart\nmixin Musical {\n    bool canPlayPiano = false;\n    bool canCompose = false;\n    bool canConduct = false;\n\n    void entertainMe() {\n        if (canPlayPiano) {\n            print('Playing piano');\n        } else if (canConduct) {\n            print('Waving hands');\n        } else {\n            print('Humming  to self');\n        }\n    }\n}\n```\n有时候你希望限制可以使用 mixin 的类型，则可以在声明 mixin 时使用 `on` 关键字来指定用于限制的超类。<br>\n这样子，只有继承链 (`extends`) 或接口实现链 (`implements`) 中有该超类的类才能使用该 mixin 。<br>\n```dart\nclass Musician {}\nmixin MusicalPerformer on Musician {}\nclass SingerDancer extends Musician with MusicalPerformer {}\n```\n#### mixin class\n`mixin` 声明定义类 mixin ，`class` 声明定义类一个类。`mixin class` 声明定义一个类，这个类既可用作常规类，也可用作 mixin 。它需要同时遵守 mixin 和 class 的约束。<br>\n\n- mixin 声明不能有 extends 或 with 字句\n- class 声明不能有 on 字句\n\n#### abstract mixin class\n如果你想在 mixin class 上实现类似 on 字句的效果，可以使用 `abstract` 关键字，并在其中定义所依赖的抽象方法。<br>\n```dart\nabstract mixin class Musician {\n    void playInstrument(String instrumentName);\n\n    void playPiano() {\n        playInstrument('Piano');\n    }\n\n    void playFlute() {\n        playInstrument('Flute');\n    }\n}\n\nclass Virtuoso with Musician {\n    void playInstrument(String instrumentName) {\n        print('Plays the $instrumentName beautifully');\n    }\n}\n\nclass Novice extends Musician {\n    void playInstrument(String instrumentName) {\n        print('Plays the $instrumentName poorly');\n    }\n}\n```\n## 枚举\n```dart\nenum Color {red, green, blue}\n```\n#### 增强枚举\n枚举允许在其中声明变量、方法和 const 构造函数，使其获得与类相似的行为。但需遵循下述规则：<br>\n\n- 成员变量必须是 final ，包括 mixin 添加的变量。\n- 只允许 const 生成构造函数\n- 工厂构造函数只允许返回一个字段，这个字段是已知的枚举实例 ( enum instance) 。\n- 没有其他类可以 extends Enum 。\n- 不能重写 index 、hashCode 、== 运算符。\n- 不能在枚举中声明与成员变量同名的枚举项。\n- 枚举项是声明必须在整个枚举声明的开头，并且至少声明一个枚举项。\n\n```dart\nenum Vehicle implements Comparable<Vehicle> {\n    car(tires: 4, passengers: 5, carbonPerKilometer: 400),\n    bus(tires: 6, passengers: 50, carbonPerKilometer: 800),\n    bicycle(tires: 2, passengers: 1, carbonPerKilometer: 0);\n\n    const Vehicle({required this.tires, required this.passemgers, required this.carbonPerKilometer});\n\n    final int tires;\n    final int passengers;\n    final int carbonPerKilometer;\n\n    int get carbonFootprint => (carbonPerKilometer / passengers).round();\n\n    bool get isTwoWheeled => this == Vehicle.bicycle;\n\n    @override\n    int compareTo(Vehicle other) => carbonFootprint- other.carbonFootprint;\n}\n```\n#### 使用枚举\n像访问类的静态变量一样访问枚举值。<br>\n枚举中的每个值都有一个 index 的 getter ，它返回枚举值声明的顺序，从 0 开始。<br>\n使用 values 常量可以获取该枚举的值列表。<br>\n使用 name 属性获取枚举值名称。<br>\n```dart\nfinal favoriteColor = Color.blue;\nassert(Color.red.index == 0);\nList<Color> colors = Color.values;\nprint(Color.blue.name);//'blue'\n```\n## 扩展方法\n我们可以使用 `extension on` 关键字扩展类的方法、getter 、setter 或运算符。也可以扩展静态字段和 static helper methods 。<br>\n在 extension 和 on 中间我们可以定义扩展的名称。如果扩展名没有显式定义或者扩展名是以 `_` 开头的，那该扩展仅在声明它们的库中可见。<br>\n```dart\nextension NumberParsing on String {\n    int parseInt() {\n        return int.parse(this);\n    }\n\n    double parseDouble() {\n        return double.parse(this);\n    }\n}\nprint('42'.parseInt());\nprint(NumberParsing('42').parseInt());\n```\n如果变量类型声明为 dynamic ，则不能在该变量上调用扩展方法。<br>\n## 扩展类型\n事实上，扩展类型是不安全的抽象，尽管它能轻松修改现有类型的接口而不产生实际包装器的成本。<br>\n\n<h1 id=\"8\">类修饰符</h1>\n\n类修饰符关键字位于类或 mixin 声明之前，包括：<br>\n\n- abstract\n- base\n- final\n- interface\n- sealed\n- mixin\n\n只有 base 修饰符可以出现在 mixin 声明之前。<br>\n#### abstract\n声明一个抽象类，抽象类不能直接构造实例。<br>\n#### base\n强制lei或 mixin 实现。同时基类不允许在其自己的库之外进行被 implements 。<br>\n必须将实现或继承基类的任何类标记为 base 、final 或 sealed 。这样可以防止外部库破坏基类保证。<br>\n#### interface\ninterface 定义的接口不能在外部库中被继承。\n#### final\n禁止当前类被外部库继承或 implements 。不过可以在同一库中被继承或 implements 。因此其任何子类也必须标记为 base 、final 或 sealed。<br>\n#### sealed\n描述该类的子类是已知的、可枚举的。<br>\n## 组合类修饰符\n类声明可以安装顺序排列：<br>\n\n- （可选）abstract\n- （可选）base 、interface 、 final 或 sealed\n- （可选）mixin\n- class 关键字本身\n\n一些类修饰符是不能组合使用的：<br>\n\n1. abstract 和 sealed 。因为 sealed 已经是隐式 abstract 。\n2. interface 、final 或 sealed ，它们与 mixin 不能混用，因为它们会阻止混入。\n\n\n<h1 id=\"9\">并发</h1>\n\n此章节由于对于 Dart 的并发编程没有什么理解，无法进行较好的整理。故延后。\n[Dart 并发](https://dart.cn/language/concurrency)\n\n<h1 id=\"10\">空安全</h1>\n\n在没有空安全之前，空类型可以看作是所有类型的子类。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071924553.png)\n在空安全之后，空类型是一个单独的类型。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925831.png)\n可空类型是该类型与空类型的超类。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925353.png)\n在空安全之后，函数参数的隐式类型转换被移除。<br>\n在没有空安全之前，Dart 的类型系统中，Object 是顶层类型，Null 是底层类型。在空安全之后，Object? 是顶层类型，Never 是底层类型。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071927113.png)\nthrow 表达式的静态类型就是 Never 。<br>\n```dart\n    Never wrongType(String type, Object value) {\n        throw ArgumentError('Expected $type, but was ${value.runtimeType}.');\n    }\n```\n## late 关键字\n`late` 关键字有多种语义。<br>\nlate 修饰符是“在运行时而非编译时对变量进行约束”。因此 late 修饰的变量允许延迟初始化。而加上了 late 修饰意味着“每次运行都要检查是否已经赋值”。<br>\n","slug":"Dart-brief","published":1,"updated":"2024-05-20T01:26:03.188Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biw00056bqe1mx6hwfl","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#1\">基础表达式</a><br><a href=\"#2\">类型</a><br><a href=\"#3\">模式匹配</a><br><a href=\"#4\">函数方法</a><br><a href=\"#5\">控制流</a><br><a href=\"#6\">错误处理</a><br><a href=\"#7\">类 &amp; 对象</a><br><a href=\"#8\">类修饰符</a><br><a href=\"#9\">并发</a><br><a href=\"#10\">空安全</a></p>\n<h1 id = \"0\">前言</h1>\n\n<p>本文简单整理了来自 <a href=\"https://dart.cn/language\">Dart 官网的《 Dart 开发语言 》</a>章节内容。仅用于简单理解 Dart 的语法。<br></p>\n<h1 id=\"1\">基础表达式</h1>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>以下是创建并初始化变量的例子：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>var</code> 定义了一个变量，并且通过初始化赋值触发类型推导确定变量的类型。<br><br>如果你明确变量的类型，也可以直接用具体类型替换 <code>var</code> 。<br><br>Dart 支持空值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String?</span> name    <span class=\"comment\">//Nullable type. Can be `null` or string</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> name     <span class=\"comment\">//Non-nullable type.</span></span><br></pre></td></tr></table></figure>\n<p>你必须在使用变量之前对其进行初始化，Dart 不会为非可空类型设置默认初始值。而可空变量是默认初始化为 null 的。也就是说对于非可空类型变量，在声明时要提供一个默认初始值。<br><br>Dart 中的非可空变量类型都继承于 Object ，因此你可以使用 <code>Object</code> 类型来定义一个可以存储任意非可空类型数据的变量。<br><br>如果你必须推迟变量的类型检测到运行时，那你可以使用特殊类型 <code>dynamic</code> 。<br><br>Dart 提供了一个关键字 <code>late</code> 。该关键字允许你声明非可空类型变量时不初始化，支持在第一次使用到该变量时才执行初始化流程。<br><br>如果你不打算更改一个变量，可以使用 <code>final</code> 或 <code>const</code> 。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> name = <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">String</span> nickname = <span class=\"string\">&#x27;Bobby&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">final</span> bar = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = [];</span><br></pre></td></tr></table></figure>\n<p>final 对象不能被修改，但是其字段可能可以被修改。 const 对象本身及其内容不能被更改。<br>你可以在定义常量时使用类型检查 <code>is</code> 和转换 <code>as</code> 、集合中的 <code>if</code> 和展开操作符 (<code>...</code> 和 <code>...?</code>) 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object i = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [i <span class=\"keyword\">as</span> <span class=\"built_in\">int</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123;<span class=\"keyword\">if</span> (i <span class=\"keyword\">is</span> <span class=\"built_in\">int</span>) i: <span class=\"string\">&#x27;int&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = &#123;<span class=\"keyword\">if</span> (list <span class=\"keyword\">is</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;) ...list&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>操作符与其他语言中的大体相符。此处只介绍一些不常见的操作符。<br></p>\n<ol>\n<li>！<ul>\n<li>作为后缀操作符，用于强调表达式的计算结果永远不会是 null</li>\n<li>作为前缀操作符号，则是常见的反转值功能</li>\n</ul>\n</li>\n<li>～&#x2F;<ul>\n<li>除法，但是返回整数结果</li>\n</ul>\n</li>\n<li>is!<ul>\n<li>与 is 操作符的结果相反</li>\n</ul>\n</li>\n<li>??&#x3D; <ul>\n<li>仅在被赋值对象为 null 时进行赋值</li>\n</ul>\n</li>\n<li><blockquote>\n<blockquote>\n<blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>无符号右移</li>\n</ul>\n</li>\n<li>.. 和 ?.. <ul>\n<li>级联操作符，用于省略调用的变量  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paint = Paint()</span><br><span class=\"line\">..color = Colors.black  <span class=\"comment\">// paint.color = COlors.black</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>… 和 …?<ul>\n<li>这其实不是一个运算符，而是集合本身的一部分，是一种将一个集合中的多个值插入到集合中的简洁方法  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = [<span class=\"number\">0</span>, ...list];</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释的写法与常见语言中的一致。<br></p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>元数据注解以 <code>@</code> 开始。<br><br>所有 Dart 代码中都内置了四个注解：@Deprecated 、@deprecated 、@override 和 @pragma 。<br><br>@Deprecated 和 @deprecated 的区别在于前者可以指定消息。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Deprecated</span>(<span class=\"string\">&#x27;Use turnOn instead&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们可以定义自己的注解。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Todo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> who;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> what;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Todo(<span class=\"keyword\">this</span>.who, <span class=\"keyword\">this</span>.what);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Todo</span>(<span class=\"string\">&#x27;Dash&#x27;</span>, <span class=\"string\">&#x27;Implement this function&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">void</span> doSomething() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Do something&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"库和导库\"><a href=\"#库和导库\" class=\"headerlink\" title=\"库和导库\"></a>库和导库</h2><p>Dart 使用 import 关键字来导入库。<br><br>并且 Dart 没有其他语言中的那些访问权限关键字，而是仅仅使用如下规则：<br></p>\n<ul>\n<li>以下划线 <code>_</code> 开通的标识符仅在库中可见。</li>\n</ul>\n<p>下面是 Dart 中的一个导库的例子：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:html&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:test/test.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>我们可以仅加载库的部分：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Import only foo.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span> <span class=\"keyword\">show</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Import all banes EXCEPT foo.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">hide</span> foo;</span><br></pre></td></tr></table></figure>\n<p>当导入的多个库中具有冲突的标识符时，我们可以为库指定前缀：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">as</span> lib2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Element</span> elememt1 = <span class=\"built_in\">Element</span>();</span><br><span class=\"line\">lib2.<span class=\"built_in\">Element</span> element2 = lib2.<span class=\"built_in\">Element</span>();</span><br></pre></td></tr></table></figure>\n<p>如果你在使用 Web 相关功能，你可能会需要 Dart 延迟加载库的功能，请查阅文档。<br></p>\n<h1 id=\"2\">类型</h1>\n\n<h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><p>Dart 中支持的基本数据类型与其他面对对象的语言类似。<br><br>值得注意的是 Dart 中的字符串的保存使用 UTF-16 。<br><br>同时它可以使用 r 前缀来输出不转义的字符串：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">r&#x27;In a raw string, not even \\n gets special treatment.&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>同时，我们可以使用 <code>$</code> 将变量放入字符串中，也可以使用 <code>$&#123;&#125;</code> 将表达式放入字符串中：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;string interpolation&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = &#123;<span class=\"number\">1</span>: <span class=\"string\">&#x27;int&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Dart has <span class=\"subst\">$s</span>, which is very handy.&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$&#123;m&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>Dart 是类型安全语言，这也就意味着你不能不使用像 <code>if(nonbooleanValue)</code> 这样的代码。<br></p>\n<h2 id=\"Records-类型\"><a href=\"#Records-类型\" class=\"headerlink\" title=\"Records 类型\"></a>Records 类型</h2><p>Records 是匿名的、不可变的聚合类型。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> record = (<span class=\"string\">&#x27;first&#x27;</span>, a: <span class=\"number\">2</span>, b: <span class=\"keyword\">true</span>, <span class=\"string\">&#x27;last&#x27;</span>);  <span class=\"comment\">// this type is (String, int, bool, String)</span></span><br></pre></td></tr></table></figure>\n<p>我们可以使用占位符或者字段描述名访问字段值：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(record.$<span class=\"number\">1</span>);   <span class=\"comment\">// Prints &#x27;first&#x27;   </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(record.a);</span><br></pre></td></tr></table></figure>\n<p>Records 类型对象是不可变的，其只有 getter 字段，而没有 setting 字段。<br><br>字段描述名不影响 Records 本身的相等性。<br><br>我们可以使用模式匹配将 Records 值解构为局部局部变量：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) userInfo(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json) &#123;</span><br><span class=\"line\">    retur (json[<span class=\"string\">&#x27;name&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"built_in\">String</span>, json[<span class=\"string\">&#x27;age&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"built_in\">int</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> json = &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Dash&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (name, age) = userInfo(json);</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>Dart 的集合包括 List 、Set 和 Map<br>同时支持使用 <code>...</code> 、<code>...?</code> 、 <code>if</code> 、<code>for</code> 、<code>if-case</code> 构建集合。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = [<span class=\"number\">0</span>, ...list];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(list2.length == <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;? list3 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list4 = [<span class=\"number\">0</span>, ...?list3];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(list4.length == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nav = [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Furniture&#x27;</span>, <span class=\"string\">&#x27;Plants&#x27;</span>, <span class=\"keyword\">if</span> (promoActive) <span class=\"string\">&#x27;Outlet&#x27;</span>];    <span class=\"comment\">//if promoActive is true, this list has 4 elements, otherwise only 3 elements.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nav1 = [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Furniture&#x27;</span>, <span class=\"string\">&#x27;Plants&#x27;</span>, <span class=\"keyword\">if</span> (login <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Manager&#x27;</span>) <span class=\"string\">&#x27;Inventory&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfInts = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfStrings = [<span class=\"string\">&#x27;#0&#x27;</span>, <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> listOfInts) <span class=\"string\">&#x27;#<span class=\"subst\">$i</span>&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(listOfStrings[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;#1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstrct <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    T getByKey(<span class=\"built_in\">String</span> key);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Any type provided to Foo for T must be non-nullable</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">T first&lt;T&gt;(<span class=\"built_in\">List</span>&lt;T&gt; ts) &#123;</span><br><span class=\"line\">    T tmp = ts[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> IntList = <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ListMapper&lt;X&gt; = <span class=\"built_in\">Map</span>&lt;X, <span class=\"built_in\">List</span>&lt;X&gt;&gt;;</span><br></pre></td></tr></table></figure>\n<p>对于函数，我们推荐使用内联函数类型而不是函数等 typedef。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Compare&lt;T&gt; = <span class=\"built_in\">int</span> <span class=\"built_in\">Function</span>(T a, T b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> sort(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; a - b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(sort <span class=\"keyword\">is</span> Compare&lt;<span class=\"built_in\">int</span>&gt;);   <span class=\"comment\">//True</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h2><p>Dart 支持在重写方法时，使用一个新类型（在新方法中）替换旧类型（在旧方法中）。类似的，当参数传递给函数时，可以使用另一种类型（实际参数）的对象替换现有类型（具有声明类型的参数）要求的对象。从生产者和消费者的角度来看，消费者接受类型，生产者产生类型。可以使用父类型替换消费者类型，使用子类型替换生产者类型。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat c = Cat();</span><br><span class=\"line\">Animal a = Cat();</span><br><span class=\"line\">Cat c2 = MaineCoon();</span><br></pre></td></tr></table></figure>\n<p>赋值运算符左边是消费者，右边是生产者。<br></p>\n<h1 id=\"3\">模式匹配</h1>\n\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (number)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//Matches of tje value pf pbj is between the constant values of &#x27;first&#x27; and &#x27;last&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &gt;= first &amp;&amp; &lt;= last:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in range&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [a,b]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$a</span>, <span class=\"subst\">$b</span>&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numList = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = numList;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a + b + c);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面匹配了一个第一个元素是 &#x27;a&#x27; 或 &#x27;b&#x27; 的两元素列表</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [<span class=\"string\">&#x27;a&#x27;</span> || <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"keyword\">var</span> c]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总的来说，Dart 提供的模式匹配功能十分强大。<br><br>我们可以使用模式匹配很方便地实现交换两个变量的值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (a, b) = (<span class=\"string\">&#x27;left&#x27;</span>, <span class=\"string\">&#x27;right&#x27;</span>);</span><br><span class=\"line\">(b, a) = (a, b);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$a</span> <span class=\"subst\">$b</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>可以让多个 case 共享一个 body：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isPrimary = <span class=\"keyword\">switch</span> (color) &#123;</span><br><span class=\"line\">    Color.red || Color.yellow || Color.blue =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在 case 中增加添加：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (shape) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Square(size: <span class=\"keyword\">var</span> s) || Circle(size: <span class=\"keyword\">var</span> s) <span class=\"keyword\">when</span> s&gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Non-empty symmetric shape&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 getter 调用的结果绑定到同名变量：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">int</span>&gt; hist &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> MapEntry(:key, value: count) <span class=\"keyword\">in</span> hist.entries) &#123;</span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述 <code>.entries</code> 返回的是一个 <code>Iterable&lt;MapENtry&lt;K, V&gt;&gt;</code> ，因为其字段 key 与我们要赋值的变量 key 同名，因此可以将 <code>key:key</code> 简化为 <code>:key</code> 。<br><br>我们可以使用模式将 Records 的字段直接结构为局部变量，与函数内联。也可以使用模式解构类实例。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (name, age) = userInfo(json);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Foo myFoo = Foo(one: <span class=\"string\">&#x27;one&#x27;</span>, tew: <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Foo(:one, :teo) = myFoo;</span><br></pre></td></tr></table></figure>\n<p>使用模式实现函数的策略设计模式：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> length;</span><br><span class=\"line\">    Square(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> radius;</span><br><span class=\"line\">    Circle(<span class=\"keyword\">this</span>. radius);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">double</span> calculateArea(Shape shape) =&gt; <span class=\"keyword\">switch</span> (shape) &#123;</span><br><span class=\"line\">    Square(;ength: <span class=\"keyword\">var</span> l) =&gt; l * l,</span><br><span class=\"line\">    Circle(radius: <span class=\"keyword\">var</span> r) =&gt; math.pi * r * r</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用模式我们可以很便捷的验证并使用 json 结构中的数据：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (json <span class=\"keyword\">case</span> &#123;<span class=\"string\">&#x27;user&#x27;</span>: [<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age]&#125;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;User <span class=\"subst\">$name</span> is <span class=\"subst\">$age</span> years old.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模式匹配类型\"><a href=\"#模式匹配类型\" class=\"headerlink\" title=\"模式匹配类型\"></a>模式匹配类型</h2><p>模式匹配与逻辑组合使用时同样有运算优先级存在。<br><br>我们还可以使用模式匹配来实现空校验或空断言：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String?</span> maybeString = <span class=\"string\">&#x27;nullable with base type String&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (maybeString) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">var</span> s?:</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;s&#x27; has type non-nullable String here.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String?</span>&gt; row = [<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"keyword\">null</span>];</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (row) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"keyword\">var</span> name!]: <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//&#x27;name&#x27; is a non-nullable here.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4\">函数方法</h1>\n\n<p>Dart 中的函数也是对象，类型是 <code>Function</code>。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isNoble(<span class=\"built_in\">int</span> atomicNumber) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isBoble(<span class=\"built_in\">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>上述第二种函数声明是第一种的简写语法，仅当函数中只包含一个表达式时可用。也就是说你不可以在 <code>=&gt;</code> 之后放一个 if 语句。<br><br><code>=&gt; expr</code> 语法是 <code>&#123; return expr; &#125;</code> 的简写。（类似于其他语言中的宏定义。<br><br>一个函数可以有任意数量的普通参数。这些参数后面可以跟着命名参数和位置参数（但不能同时跟着这两个参数）。<br><br>函数命名参数和位置参数都可以指定默认值，但必须是编译时常量。普通参数不能指定默认值。<br></p>\n<h2 id=\"命名参数\"><a href=\"#命名参数\" class=\"headerlink\" title=\"命名参数\"></a>命名参数</h2><p>定义函数时，使用 <code>&#123;param1, param2, ...&#125;</code> 指定命名参数。如果你没有<strong>提供默认值</strong>或将命名参数标记为 <code>required</code>,则它们类型必须是可空的，因为 Dart 提供的默认值是 null。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> enableFlags(<span class=\"built_in\">int</span> a, &#123;<span class=\"built_in\">bool?</span> bold, <span class=\"built_in\">bool</span> hidden = <span class=\"keyword\">false</span>, <span class=\"keyword\">required</span> Widget child&#125;) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>命名参数指这些参数必须通过命名来传递。<br></p>\n<h2 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h2><p>定义函数时，使用 <code>[param1, param2, ...]</code> 指定位置参数。如果不提供默认值，则它们的参数类型必须是可空的。<br><br>位置参数要求传参时安装定义的顺序传递入参。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg, [<span class=\"built_in\">String?</span> device]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;<span class=\"subst\">$from</span> says <span class=\"subst\">$msg</span>&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deivce != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"string\">&#x27;<span class=\"subst\">$result</span> with a <span class=\"subst\">$device</span>&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main 函数\"></a>main 函数</h2><p>main 作为 flutter 应用程序的入口点。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; args) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数闭包\"><a href=\"#函数闭包\" class=\"headerlink\" title=\"函数闭包\"></a>函数闭包</h2><p>Dart 支持函数闭包。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> makeAdder(<span class=\"built_in\">int</span> addBy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">int</span> i) =&gt; addBy + i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> add2 = makeAdder(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(add2(<span class=\"number\">3</span>) == <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Dart 闭包访问的是其词法作用域中的变量。如果原变量的值在被捕捉之后发生了变化，也不会影响 Dart 闭包中已经捕捉的值。<br></p>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>当你需要延迟产生一个值序列时，可以考虑使用生成器函数。Dart 内置支持两种生成器函数：<br></p>\n<ul>\n<li>同步生成器：返回一个 Iterable 对象</li>\n<li>异步生成器：返回一个 Stream 对象</li>\n</ul>\n<h4 id=\"实现同步生成器\"><a href=\"#实现同步生成器\" class=\"headerlink\" title=\"实现同步生成器\"></a>实现同步生成器</h4><p>使用 <code>sync*</code> 标记函数，并使用 <code>yield</code> 语句来传递值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Iterable</span>&lt;<span class=\"built_in\">int</span>&gt; naturalsTo(<span class=\"built_in\">int</span> n) <span class=\"keyword\">sync</span>* &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; n) <span class=\"keyword\">yield</span> k++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现异步生成器\"><a href=\"#实现异步生成器\" class=\"headerlink\" title=\"实现异步生成器\"></a>实现异步生成器</h4><p>使用 <code>async*</code> 标记函数，并使用 <code>yield</code> 语句传递值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;<span class=\"built_in\">int</span>&gt; asynchronousNaturalsTo(<span class=\"built_in\">int</span> n) <span class=\"keyword\">async</span>* &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; n) <span class=\"keyword\">yield</span> k++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-yield-提高递归生成器函数的性能\"><a href=\"#使用-yield-提高递归生成器函数的性能\" class=\"headerlink\" title=\"使用 yield* 提高递归生成器函数的性能\"></a>使用 <code>yield*</code> 提高递归生成器函数的性能</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Iterable</span>&lt;<span class=\"built_in\">int</span>&gt; naturalsDownFrom(<span class=\"built_in\">int</span> n) <span class=\"keyword\">sync</span>* &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* naturalsDownFrom(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"外部函数\"><a href=\"#外部函数\" class=\"headerlink\" title=\"外部函数\"></a>外部函数</h3><p>外部函数是其主体与其声明分开实现的函数。使用 <code>external</code> 关键字。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">external</span> <span class=\"keyword\">void</span> someFunc(<span class=\"built_in\">int</span> i);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5\">控制流</h1>\n\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>Dart 支持 for 循环、while 和 do-while 回路，以及 break 和 continue。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">callbacks.add(() =&gt; <span class=\"built_in\">print</span>(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> c <span class=\"keyword\">in</span> callbacks) &#123;</span><br><span class=\"line\">c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//The ouput is 0 and then 1, as expected.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>Dart 还支持 if 、 if-case 和 switch 分支语句。<br><br>if 后面括号中的条件必须是计算结果为布尔值的表达式。<br><br>if-case 语句支持模式匹配。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pair <span class=\"keyword\">case</span> [<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> y]) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Was coordinate array <span class=\"subst\">$x</span>, <span class=\"subst\">$y</span>&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> FormatException(<span class=\"string\">&#x27;Invalid coordinates.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>switch 语句有如下规则：<br></p>\n<ul>\n<li>非空的 case 子句中完成后跳转到 switch 的末尾， 不需要 break。</li>\n<li>空 case 子句会隐式添加 fallthrough</li>\n<li>可以使用 continue +标签 来实现非顺序的 fallthrough</li>\n<li>可以使用default 或 _</li>\n<li>支持进一步条件约束，仅需要在 case 主体之后添加 <code>when</code> 子句（if-case 语句中也支持）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (command) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;OPEN&#x27;</span>:</span><br><span class=\"line\">        executeOpen();</span><br><span class=\"line\">        <span class=\"keyword\">continue</span> newCase;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DENIED&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CLOSE&#x27;</span>:</span><br><span class=\"line\">        executeClosed();    <span class=\"comment\">//Runs for both DENIED and CLOSED</span></span><br><span class=\"line\">    newCase:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;PENDING&#x27;</span>:</span><br><span class=\"line\">        executeNowClosed(); <span class=\"comment\">//Runs for both OPEN and PENDING</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 Dart 3.0 版本开始，支持 switch 表达式。 switch 表达式必须作为语句的一部分，而不能是单独的语句。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">switch</span> (y) &#123;...&#125;;   <span class=\"comment\">//this will run switch</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">switch</span> (x) &#123;...&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">switch</span> (x) &#123;...&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*error usage</span></span><br><span class=\"line\"><span class=\"comment\">* switch (x) &#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>switch 表达式遵循下述规则：<br></p>\n<ul>\n<li>Cases 不再需要使用 case 关键字</li>\n<li>case 主体是一个表达式而不是一系列语句。</li>\n<li>每个 case 都必须有一个 body ，空 case 没有隐式的 fallthrough</li>\n<li>使用 <code>=&gt;</code> 而不是 <code>:</code></li>\n<li>使用 <code>,</code> 分隔 Cases</li>\n<li>默认只能使用 <code>_</code></li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token = <span class=\"keyword\">switch</span> (charCode) &#123;</span><br><span class=\"line\">    slash || star || plus || minus =&gt; <span class=\"keyword\">operator</span>(charCode),</span><br><span class=\"line\">    comma || semicolon =&gt; punctuation(charCode),</span><br><span class=\"line\">    &gt;= digit0 &amp;&amp; &lt;= digit9 =&gt; number(),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> FormatException(<span class=\"string\">&#x27;Invalid&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6\">错误处理</h1>\n\n<p>Dart 使用 <code>throw</code> 抛出异常，默认提供了 Exception 和 Error 类型，但实际上 Dart 可以抛出任意非空对象作为异常。<br><br>Dart 使用 <code>catch</code> 捕捉异常，使用 <code>on</code> 在捕捉时指定异常类型，使用 <code>rethrow</code> 传播异常， 使用 <code>finally</code> 执行最终执语句。<br><br>如果在 finally 子句之前异常匹配任意 catch 字句，则执行完 finally 字句后异常会被隐式传播。<br><br>catch 子句允许一个或两个参数，第一个参数时抛出的异常，第二个参数的堆栈跟踪（ StackTrace 对象）。<br><br>Dart 中的方法并不声明它们可能抛出哪些异常，并且不需要捕获任何异常。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> misBehave() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        breedMoreLlamas();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">on</span> OutofLamasException&#123;</span><br><span class=\"line\">        buyMoreLlamas();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">on</span> Exception <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Unknown exception: <span class=\"subst\">$e</span>&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">rethrow</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, s) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exception details:\\n <span class=\"subst\">$e</span>&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Stack trace:\\n <span class=\"subst\">$s</span>&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        cleanLlamaStalls();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7\">类 & 对象</h1>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Dart 是一种面向对象的语言，具有类和基于 mixin 的继承。每个对象都是一个类的实例，除 Null 之外的所有类都是从 Object 中派生。尽管每个类（顶层类 Object? 除外）只有一个超类，但是使用 mixin 可以实现类体在多个类层次结构中重用。扩展方法是一种在不更改类或创建子类的情况下向类添加功能的方法。类修饰符允许你控制库如何对类进行子类型化。<br></p>\n<h4 id=\"成员使用\"><a href=\"#成员使用\" class=\"headerlink\" title=\"成员使用\"></a>成员使用</h4><p>使用点（<code>.</code>）来引用对象的变量或方法。<br></p>\n<h4 id=\"构造方法重载\"><a href=\"#构造方法重载\" class=\"headerlink\" title=\"构造方法重载\"></a>构造方法重载</h4><p>构造方法的名称可以是 ClassName 或 Classname.identifier ，构造函数名称前的 new 关键字可以省略：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = Point(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = Point.fromJson(&#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>大多数语言重载构造函数的方式是重载同名构造函数，而 Dart 选择给构造函数提供 identifier 来实现重载。<br></p>\n<h4 id=\"常量对象\"><a href=\"#常量对象\" class=\"headerlink\" title=\"常量对象\"></a>常量对象</h4><p>有些类提供了常量构造函数，如果要使用该常量构造函数创建编译时常量，要在构造函数名称前使用 <code>const</code> 关键字。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>const 关键字作用的一定得是常量构造函数，而不能是普通的构造函数。<br><br>如果构造两个相同的编译时常量实际上它们会是一个实例。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>(identical(a, b));    <span class=\"comment\">//They are the same instance!</span></span><br></pre></td></tr></table></figure>\n<p>如果是在常量上下文中，你可以省略除第一个 const 关键字之外的其他 const 声明。比如下面的两个语句是等效的：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pointAndLine = <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;point&#x27;</span>: <span class=\"keyword\">const</span> [<span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;line&#x27;</span>: <span class=\"keyword\">const</span> [<span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">1</span>, <span class=\"number\">10</span>), <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">-2</span>, <span class=\"number\">11</span>)],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pointAndLine = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;point&#x27;</span>: [ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;line&#x27;</span>: [ImmutablePoint(<span class=\"number\">1</span>, <span class=\"number\">10</span>), ImmutablePoint(<span class=\"number\">-2</span>, <span class=\"number\">11</span>)],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>常量构造函数也可以构建非常量对象：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);   <span class=\"comment\">// a isn&#x27;t a constant</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h4><p>我们可以获取对象的类型：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The type of a is <span class=\"subst\">$&#123;a.runtime.Type&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，使用 <code>object as type</code> 而不是 <code>object.runtimeType</code> 会使你的代码更加安全。<br></p>\n<h4 id=\"变量-1\"><a href=\"#变量-1\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>对于普通的成员变量，必须设定初始值，可以在声明时，也可以在构造函数参数中，还可以在初始值设定列表中。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> x;  <span class=\"comment\">//initially null</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.z);</span><br><span class=\"line\">    Point.unz(): z = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没有使用 <code>late</code> 关键字描述的成员变量的创建时机为创建实例后，构造函数及其初始值设定列表项执行之前。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> x= <span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"comment\">//ERROR </span></span><br><span class=\"line\">    <span class=\"comment\">//double? y = this.x;</span></span><br><span class=\"line\">    <span class=\"built_in\">double?</span> y = <span class=\"number\">1.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">late</span> <span class=\"built_in\">double?</span> y = <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有成员变量都会生成一个隐式的 getter 方法。没有使用 <code>final</code> 描述的成员变量，或者使用了 <code>late final</code> 描述但是没有初始值设定项的成员变量，都会生成一个隐式的 setter 方法。<br><br>使用 <code>final</code> 描述的成员变量必须只设置只设置一次值。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileMark</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">DateTime</span> start = <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    ProfileMark(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    ProfileMark.unnamed(): name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要在构造函数政务启动后才分配 final 成员变量的值，可以使用下述方法：<br></p>\n<ul>\n<li>使用工厂构造函数</li>\n<li>使用 late final 关键字描述。注意，没有初始值设定项的 late final 成员变量会隐式添加一个 setting 方法。</li>\n</ul>\n<h4 id=\"隐式接口\"><a href=\"#隐式接口\" class=\"headerlink\" title=\"隐式接口\"></a>隐式接口</h4><p>所有类都隐式定义了一个接口，其中包含该类的所有实例成员（不包括类成员）及其实现的任何接口。<br><br>类可以通过在 <code>implements</code> 子句中声明一个或多个接口，然后提供接口所需的实现。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(<span class=\"keyword\">this</span>._name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">String</span> greet(<span class=\"built_in\">String</span> who) =&gt; <span class=\"string\">&#x27;Hello, <span class=\"subst\">$who</span>. I am <span class=\"subst\">$_name</span>&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Impostor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> <span class=\"keyword\">get</span> _name =&gt; <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">String</span> greet(<span class=\"built_in\">String</span> who) =&gt; <span class=\"string\">&#x27;Hello, <span class=\"subst\">$who</span>. Do you kone who I am?&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>使用 <code>static</code> 关键字可以在类中定义类变量（也称静态变量）和类方法。<br><br>静态变量在使用之前不会初始化。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> initialCapacity = <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类方法不在实例上运行，因此也无权访问 <code>this.</code> 。静态方法可以作为编译时常量。<br></p>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>最常见的构造函数是创建与其类同名的函数来声明构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般会使用<strong>初始化形式参数</strong>的功能来简化将构造函数的参数分配给实例变量的过程。<br><br><strong>构造函数是不会继承的。</strong><br></p>\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><p>如果未声明构造函数，则会提供默认构造函数。默认构造函数没有参数，并且调用超类中的无参数构造函数。<br></p>\n<h4 id=\"命名构造函数\"><a href=\"#命名构造函数\" class=\"headerlink\" title=\"命名构造函数\"></a>命名构造函数</h4><p>命名构造函数可以为类实现多个构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> xOrigin = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> yOrigin = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    Point.origin(): x = xOrigin, y = yOrigin;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的构造函数还使用到了<strong>初始值设定列表</strong>的功能。<br><br>命名构造函数的使用也很方便，就是 <code>ClassName.identifier()</code>。<br></p>\n<h4 id=\"初始值设定列表\"><a href=\"#初始值设定列表\" class=\"headerlink\" title=\"初始值设定列表\"></a>初始值设定列表</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">Point.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">double</span>&gt; json): x = json[<span class=\"string\">&#x27;x&#x27;</span>]!, y = json[<span class=\"string\">&#x27;y&#x27;</span>] &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;In Point.fromJson(): (<span class=\"subst\">$x</span>, <span class=\"subst\">$y</span>)&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>初始值设定列表项的右侧无权访问 this 。</p>\n<h4 id=\"调用非默认超类构造函数\"><a href=\"#调用非默认超类构造函数\" class=\"headerlink\" title=\"调用非默认超类构造函数\"></a>调用非默认超类构造函数</h4><p>默认情况下，子类中的构造函数会调用超类的未命名、无参数构造函数。执行顺序如下：<br></p>\n<ul>\n<li>初始值设定列表</li>\n<li>超类构造函数</li>\n<li>构造函数的主体</li>\n</ul>\n<p>如果超类没有无参构造函数，或者你需要调用超类的其他构造函数，你就需要手动调用超类的构造函数。<br><br>手动调用超类构造函数的方法是在冒号( <code>:</code> )之后，函数体之前。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String?</span> firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.fromJson(<span class=\"built_in\">Map</span> data) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in Person&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    Employee.fromJson(<span class=\"keyword\">super</span>.data) : <span class=\"keyword\">super</span>.fromJson() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in Employee&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> employee = Employee.fromJson(&#123;&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中手动调用了超类的构造函数，并且使用了<strong>超级参数</strong>功能将子类构造函数的入参直接分配到超类的构造函数入参上。<br></p>\n<h4 id=\"超级参数\"><a href=\"#超级参数\" class=\"headerlink\" title=\"超级参数\"></a>超级参数</h4><p>超级参数功能可以避免手动将每个参数传递到超类的构造函数中。其语法与初始化形式参数的类似。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector2d(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector3d</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vector2d</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector3d(<span class=\"keyword\">super</span>.x, <span class=\"keyword\">super</span>.y, <span class=\"keyword\">this</span>.z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此功能不能与<strong>重定向构造函数</strong>一起使用。<br></p>\n<h4 id=\"重定向构造函数\"><a href=\"#重定向构造函数\" class=\"headerlink\" title=\"重定向构造函数\"></a>重定向构造函数</h4><p>有时，构造函数的唯一目的是重定向都同一个类中的另一个构造函数。<br><br>重定向构造函数没有函数体，使用 <code>this.</code> 调用其他构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    Point.alongXAxis(<span class=\"built_in\">double</span> x): <span class=\"keyword\">this</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常量构造函数\"><a href=\"#常量构造函数\" class=\"headerlink\" title=\"常量构造函数\"></a>常量构造函数</h4><p>如果类生成的对象永不更改，则可以使这些对象成为编译时常量。为此我们可以定义一个 const 构造函数， 并确保所有成员变量都是 final 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImmutablePoint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> ImmutablePoint origin = ImmutablePoint(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    finnal <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"工厂构造函数\"><a href=\"#工厂构造函数\" class=\"headerlink\" title=\"工厂构造函数\"></a>工厂构造函数</h4><p>在实现并不总是创建其类的新实例的构造函数时，我们可以使用关键字 <code>factory</code> 来声明一个工厂构造函数，它可能会从缓存中返回一个实例，或者返回子类型的实例。<br><br>工厂构造函数无法访问 this 。<br>工厂构造函数的调用与其他构造函数一样。</p>\n<h2 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h2><p>成员方法与其他语言的类似。<br><br>Dart 允许你使用 <code>operator</code> 关键字重载下述的运算符：<br><br><code>&lt;</code>     <code>&gt;</code>    <code>&lt;=</code>     <code>&gt;=</code>    <code>==</code>    <code>~</code><br><code>-</code>     <code>+</code>     <code>/</code>     <code>~/</code>    <code>*</code>     <code>%</code><br><code>|</code>     <code>^</code>     <code>&amp;</code>     <code>&lt;&lt;</code>    <code>&gt;&gt;&gt;</code>   <code>&gt;&gt;</code><br><code>[]=</code>   <code>[]</code></p>\n<h4 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h4><p>只有声明没有实现的方法叫做抽象方法。<br><br>抽象方法只能存在于抽象类或混合类中。<br><br>使用 <code>abstrcat</code> 关键字声明抽象类。<br></p>\n<h4 id=\"getter-和-setter\"><a href=\"#getter-和-setter\" class=\"headerlink\" title=\"getter 和 setter\"></a>getter 和 setter</h4><p>getter 和 setter 是对对象属性进行读写访问的特殊方法。我们可以使用 <code>get</code> 和 <code>set</code> 关键字实现 getter 和 setter 来创建其他属性：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> left, top, width, height;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rectangle(<span class=\"keyword\">this</span>.left, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.widht, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> <span class=\"keyword\">get</span> right =&gt; left + width;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> right(<span class=\"built_in\">double</span> value) =&gt; left = value - width;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> <span class=\"keyword\">get</span> bottom =&gt; top + height;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> bottom =&gt; top = value - height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = Rectangle(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(rect.left == <span class=\"number\">3</span>);</span><br><span class=\"line\">    rect.right = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(rect.left == <span class=\"number\">-8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特殊的成员方法\"><a href=\"#特殊的成员方法\" class=\"headerlink\" title=\"特殊的成员方法\"></a>特殊的成员方法</h4><p>如果要实现像调用函数一样使用对象，要在类中定义 call() 方法。<br><br>call() 方法的返回值和参数都可以自定义。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WannabeFunction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> call(<span class=\"built_in\">String</span> a, <span class=\"built_in\">String</span> b, <span class=\"built_in\">String</span> c) =&gt; <span class=\"string\">&#x27;<span class=\"subst\">$a</span> <span class=\"subst\">$b</span> <span class=\"subst\">$c</span>&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wf = WannabeFunction();</span><br><span class=\"line\"><span class=\"keyword\">var</span> out = wf(<span class=\"string\">&#x27;Hi&#x27;</span>, <span class=\"string\">&#x27;there&#x27;</span>, <span class=\"string\">&#x27;gang&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; <span class=\"built_in\">print</span>(out);</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>使用 <code>extends</code> 关键字表示继承， 使用 <code>super</code> 引用超类。<br><br>子类可以重写实例方法、 getter 和 setter 。你如果你愿意，你可以使用 @override 批注。<br><br>重写需要满足下述要求：<br></p>\n<ul>\n<li>返回类型必须与重写方法的返回类型相同或是其子类。</li>\n<li>参数类型必须与重写方法的参数类型相同或是其超类。</li>\n<li>参数中，位置参数的数量要一致。</li>\n<li>泛型方法不能重写非泛型方法，非泛型方法不能重写泛型方法。</li>\n</ul>\n<p>有时你可能想要通过使用子类作为参数类型来缩小输入，那请使用 covariant 关键字。<br>需要注意的是，如果你重写了 <code>==</code> 运算符，那你也要重写 hashCode 的 getter 。</p>\n<h4 id=\"noSuchMethod\"><a href=\"#noSuchMethod\" class=\"headerlink\" title=\"noSuchMethod()\"></a>noSuchMethod()</h4><p>这个一个特殊的方法，如果你需要可以重写这个方法。<br></p>\n<h2 id=\"混入-Mixin\"><a href=\"#混入-Mixin\" class=\"headerlink\" title=\"混入( Mixin )\"></a>混入( Mixin )</h2><p>Mixins 是一种定义代码的方法，可以在多个类层次结构中重用。它们旨在为成员提供集体实现。<br><br>在定义类时，使用 with 子句并声明一个或多个 mixin 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> <span class=\"keyword\">extends</span> <span class=\"title\">Performer</span> <span class=\"title\">with</span> <span class=\"title\">Musical</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>mixin</code> 关键字声明一个 mixin 。同时 mixin 需要满足下述规则：<br></p>\n<ul>\n<li>Mixin 中不能使用 extends 。</li>\n<li>Mixin 中不能声明任何生成构造函数。（也就是只允许一个默认构造函数）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixin</span> Musical &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canPlayPiano = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canCompose = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canConduct = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> entertainMe() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canPlayPiano) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Playing piano&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (canConduct) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waving hands&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Humming  to self&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候你希望限制可以使用 mixin 的类型，则可以在声明 mixin 时使用 <code>on</code> 关键字来指定用于限制的超类。<br><br>这样子，只有继承链 (<code>extends</code>) 或接口实现链 (<code>implements</code>) 中有该超类的类才能使用该 mixin 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> MusicalPerformer <span class=\"keyword\">on</span> Musician &#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingerDancer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Musician</span> <span class=\"title\">with</span> <span class=\"title\">MusicalPerformer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mixin-class\"><a href=\"#mixin-class\" class=\"headerlink\" title=\"mixin class\"></a>mixin class</h4><p><code>mixin</code> 声明定义类 mixin ，<code>class</code> 声明定义类一个类。<code>mixin class</code> 声明定义一个类，这个类既可用作常规类，也可用作 mixin 。它需要同时遵守 mixin 和 class 的约束。<br></p>\n<ul>\n<li>mixin 声明不能有 extends 或 with 字句</li>\n<li>class 声明不能有 on 字句</li>\n</ul>\n<h4 id=\"abstract-mixin-class\"><a href=\"#abstract-mixin-class\" class=\"headerlink\" title=\"abstract mixin class\"></a>abstract mixin class</h4><p>如果你想在 mixin class 上实现类似 on 字句的效果，可以使用 <code>abstract</code> 关键字，并在其中定义所依赖的抽象方法。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">mixin</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> playPiano() &#123;</span><br><span class=\"line\">        playInstrument(<span class=\"string\">&#x27;Piano&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> playFlute() &#123;</span><br><span class=\"line\">        playInstrument(<span class=\"string\">&#x27;Flute&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Virtuoso</span> <span class=\"title\">with</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Plays the <span class=\"subst\">$instrumentName</span> beautifully&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Novice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Plays the <span class=\"subst\">$instrumentName</span> poorly&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color &#123;red, green, blue&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增强枚举\"><a href=\"#增强枚举\" class=\"headerlink\" title=\"增强枚举\"></a>增强枚举</h4><p>枚举允许在其中声明变量、方法和 const 构造函数，使其获得与类相似的行为。但需遵循下述规则：<br></p>\n<ul>\n<li>成员变量必须是 final ，包括 mixin 添加的变量。</li>\n<li>只允许 const 生成构造函数</li>\n<li>工厂构造函数只允许返回一个字段，这个字段是已知的枚举实例 ( enum instance) 。</li>\n<li>没有其他类可以 extends Enum 。</li>\n<li>不能重写 index 、hashCode 、&#x3D;&#x3D; 运算符。</li>\n<li>不能在枚举中声明与成员变量同名的枚举项。</li>\n<li>枚举项是声明必须在整个枚举声明的开头，并且至少声明一个枚举项。</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Vehicle <span class=\"keyword\">implements</span> <span class=\"built_in\">Comparable</span>&lt;Vehicle&gt; &#123;</span><br><span class=\"line\">    car(tires: <span class=\"number\">4</span>, passengers: <span class=\"number\">5</span>, carbonPerKilometer: <span class=\"number\">400</span>),</span><br><span class=\"line\">    bus(tires: <span class=\"number\">6</span>, passengers: <span class=\"number\">50</span>, carbonPerKilometer: <span class=\"number\">800</span>),</span><br><span class=\"line\">    bicycle(tires: <span class=\"number\">2</span>, passengers: <span class=\"number\">1</span>, carbonPerKilometer: <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Vehicle(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.tires, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.passemgers, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.carbonPerKilometer&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> tires;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> passengers;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> carbonPerKilometer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"keyword\">get</span> carbonFootprint =&gt; (carbonPerKilometer / passengers).round();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> isTwoWheeled =&gt; <span class=\"keyword\">this</span> == Vehicle.bicycle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@override</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> compareTo(Vehicle other) =&gt; carbonFootprint- other.carbonFootprint;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用枚举\"><a href=\"#使用枚举\" class=\"headerlink\" title=\"使用枚举\"></a>使用枚举</h4><p>像访问类的静态变量一样访问枚举值。<br><br>枚举中的每个值都有一个 index 的 getter ，它返回枚举值声明的顺序，从 0 开始。<br><br>使用 values 常量可以获取该枚举的值列表。<br><br>使用 name 属性获取枚举值名称。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> favoriteColor = Color.blue;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(Color.red.index == <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Color.blue.name);<span class=\"comment\">//&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h2><p>我们可以使用 <code>extension on</code> 关键字扩展类的方法、getter 、setter 或运算符。也可以扩展静态字段和 static helper methods 。<br><br>在 extension 和 on 中间我们可以定义扩展的名称。如果扩展名没有显式定义或者扩展名是以 <code>_</code> 开头的，那该扩展仅在声明它们的库中可见。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> NumberParsing <span class=\"keyword\">on</span> <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> parseInt() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.parse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> parseDouble() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">double</span>.parse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;42&#x27;</span>.parseInt());</span><br><span class=\"line\"><span class=\"built_in\">print</span>(NumberParsing(<span class=\"string\">&#x27;42&#x27;</span>).parseInt());</span><br></pre></td></tr></table></figure>\n<p>如果变量类型声明为 dynamic ，则不能在该变量上调用扩展方法。<br></p>\n<h2 id=\"扩展类型\"><a href=\"#扩展类型\" class=\"headerlink\" title=\"扩展类型\"></a>扩展类型</h2><p>事实上，扩展类型是不安全的抽象，尽管它能轻松修改现有类型的接口而不产生实际包装器的成本。<br></p>\n<h1 id=\"8\">类修饰符</h1>\n\n<p>类修饰符关键字位于类或 mixin 声明之前，包括：<br></p>\n<ul>\n<li>abstract</li>\n<li>base</li>\n<li>final</li>\n<li>interface</li>\n<li>sealed</li>\n<li>mixin</li>\n</ul>\n<p>只有 base 修饰符可以出现在 mixin 声明之前。<br></p>\n<h4 id=\"abstract\"><a href=\"#abstract\" class=\"headerlink\" title=\"abstract\"></a>abstract</h4><p>声明一个抽象类，抽象类不能直接构造实例。<br></p>\n<h4 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h4><p>强制lei或 mixin 实现。同时基类不允许在其自己的库之外进行被 implements 。<br><br>必须将实现或继承基类的任何类标记为 base 、final 或 sealed 。这样可以防止外部库破坏基类保证。<br></p>\n<h4 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h4><p>interface 定义的接口不能在外部库中被继承。</p>\n<h4 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h4><p>禁止当前类被外部库继承或 implements 。不过可以在同一库中被继承或 implements 。因此其任何子类也必须标记为 base 、final 或 sealed。<br></p>\n<h4 id=\"sealed\"><a href=\"#sealed\" class=\"headerlink\" title=\"sealed\"></a>sealed</h4><p>描述该类的子类是已知的、可枚举的。<br></p>\n<h2 id=\"组合类修饰符\"><a href=\"#组合类修饰符\" class=\"headerlink\" title=\"组合类修饰符\"></a>组合类修饰符</h2><p>类声明可以安装顺序排列：<br></p>\n<ul>\n<li>（可选）abstract</li>\n<li>（可选）base 、interface 、 final 或 sealed</li>\n<li>（可选）mixin</li>\n<li>class 关键字本身</li>\n</ul>\n<p>一些类修饰符是不能组合使用的：<br></p>\n<ol>\n<li>abstract 和 sealed 。因为 sealed 已经是隐式 abstract 。</li>\n<li>interface 、final 或 sealed ，它们与 mixin 不能混用，因为它们会阻止混入。</li>\n</ol>\n<h1 id=\"9\">并发</h1>\n\n<p>此章节由于对于 Dart 的并发编程没有什么理解，无法进行较好的整理。故延后。<br><a href=\"https://dart.cn/language/concurrency\">Dart 并发</a></p>\n<h1 id=\"10\">空安全</h1>\n\n<p>在没有空安全之前，空类型可以看作是所有类型的子类。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071924553.png\"><br>在空安全之后，空类型是一个单独的类型。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925831.png\"><br>可空类型是该类型与空类型的超类。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925353.png\"><br>在空安全之后，函数参数的隐式类型转换被移除。<br><br>在没有空安全之前，Dart 的类型系统中，Object 是顶层类型，Null 是底层类型。在空安全之后，Object? 是顶层类型，Never 是底层类型。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071927113.png\"><br>throw 表达式的静态类型就是 Never 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Never</span> wrongType(<span class=\"built_in\">String</span> type, <span class=\"built_in\">Object</span> value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ArgumentError(<span class=\"string\">&#x27;Expected <span class=\"subst\">$type</span>, but was <span class=\"subst\">$&#123;value.runtimeType&#125;</span>.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"late-关键字\"><a href=\"#late-关键字\" class=\"headerlink\" title=\"late 关键字\"></a>late 关键字</h2><p><code>late</code> 关键字有多种语义。<br><br>late 修饰符是“在运行时而非编译时对变量进行约束”。因此 late 修饰的变量允许延迟初始化。而加上了 late 修饰意味着“每次运行都要检查是否已经赋值”。<br></p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#1\">基础表达式</a><br><a href=\"#2\">类型</a><br><a href=\"#3\">模式匹配</a><br><a href=\"#4\">函数方法</a><br><a href=\"#5\">控制流</a><br><a href=\"#6\">错误处理</a><br><a href=\"#7\">类 &amp; 对象</a><br><a href=\"#8\">类修饰符</a><br><a href=\"#9\">并发</a><br><a href=\"#10\">空安全</a></p>\n<h1 id = \"0\">前言</h1>\n\n<p>本文简单整理了来自 <a href=\"https://dart.cn/language\">Dart 官网的《 Dart 开发语言 》</a>章节内容。仅用于简单理解 Dart 的语法。<br></p>\n<h1 id=\"1\">基础表达式</h1>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>以下是创建并初始化变量的例子：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>var</code> 定义了一个变量，并且通过初始化赋值触发类型推导确定变量的类型。<br><br>如果你明确变量的类型，也可以直接用具体类型替换 <code>var</code> 。<br><br>Dart 支持空值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String?</span> name    <span class=\"comment\">//Nullable type. Can be `null` or string</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> name     <span class=\"comment\">//Non-nullable type.</span></span><br></pre></td></tr></table></figure>\n<p>你必须在使用变量之前对其进行初始化，Dart 不会为非可空类型设置默认初始值。而可空变量是默认初始化为 null 的。也就是说对于非可空类型变量，在声明时要提供一个默认初始值。<br><br>Dart 中的非可空变量类型都继承于 Object ，因此你可以使用 <code>Object</code> 类型来定义一个可以存储任意非可空类型数据的变量。<br><br>如果你必须推迟变量的类型检测到运行时，那你可以使用特殊类型 <code>dynamic</code> 。<br><br>Dart 提供了一个关键字 <code>late</code> 。该关键字允许你声明非可空类型变量时不初始化，支持在第一次使用到该变量时才执行初始化流程。<br><br>如果你不打算更改一个变量，可以使用 <code>final</code> 或 <code>const</code> 。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> name = <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">String</span> nickname = <span class=\"string\">&#x27;Bobby&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">final</span> bar = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = [];</span><br></pre></td></tr></table></figure>\n<p>final 对象不能被修改，但是其字段可能可以被修改。 const 对象本身及其内容不能被更改。<br>你可以在定义常量时使用类型检查 <code>is</code> 和转换 <code>as</code> 、集合中的 <code>if</code> 和展开操作符 (<code>...</code> 和 <code>...?</code>) 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object i = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [i <span class=\"keyword\">as</span> <span class=\"built_in\">int</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123;<span class=\"keyword\">if</span> (i <span class=\"keyword\">is</span> <span class=\"built_in\">int</span>) i: <span class=\"string\">&#x27;int&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = &#123;<span class=\"keyword\">if</span> (list <span class=\"keyword\">is</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;) ...list&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>操作符与其他语言中的大体相符。此处只介绍一些不常见的操作符。<br></p>\n<ol>\n<li>！<ul>\n<li>作为后缀操作符，用于强调表达式的计算结果永远不会是 null</li>\n<li>作为前缀操作符号，则是常见的反转值功能</li>\n</ul>\n</li>\n<li>～&#x2F;<ul>\n<li>除法，但是返回整数结果</li>\n</ul>\n</li>\n<li>is!<ul>\n<li>与 is 操作符的结果相反</li>\n</ul>\n</li>\n<li>??&#x3D; <ul>\n<li>仅在被赋值对象为 null 时进行赋值</li>\n</ul>\n</li>\n<li><blockquote>\n<blockquote>\n<blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>无符号右移</li>\n</ul>\n</li>\n<li>.. 和 ?.. <ul>\n<li>级联操作符，用于省略调用的变量  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paint = Paint()</span><br><span class=\"line\">..color = Colors.black  <span class=\"comment\">// paint.color = COlors.black</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>… 和 …?<ul>\n<li>这其实不是一个运算符，而是集合本身的一部分，是一种将一个集合中的多个值插入到集合中的简洁方法  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = [<span class=\"number\">0</span>, ...list];</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>注释的写法与常见语言中的一致。<br></p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>元数据注解以 <code>@</code> 开始。<br><br>所有 Dart 代码中都内置了四个注解：@Deprecated 、@deprecated 、@override 和 @pragma 。<br><br>@Deprecated 和 @deprecated 的区别在于前者可以指定消息。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Deprecated</span>(<span class=\"string\">&#x27;Use turnOn instead&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们可以定义自己的注解。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Todo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> who;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> what;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Todo(<span class=\"keyword\">this</span>.who, <span class=\"keyword\">this</span>.what);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Todo</span>(<span class=\"string\">&#x27;Dash&#x27;</span>, <span class=\"string\">&#x27;Implement this function&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">void</span> doSomething() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Do something&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"库和导库\"><a href=\"#库和导库\" class=\"headerlink\" title=\"库和导库\"></a>库和导库</h2><p>Dart 使用 import 关键字来导入库。<br><br>并且 Dart 没有其他语言中的那些访问权限关键字，而是仅仅使用如下规则：<br></p>\n<ul>\n<li>以下划线 <code>_</code> 开通的标识符仅在库中可见。</li>\n</ul>\n<p>下面是 Dart 中的一个导库的例子：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:html&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:test/test.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>我们可以仅加载库的部分：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Import only foo.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span> <span class=\"keyword\">show</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Import all banes EXCEPT foo.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">hide</span> foo;</span><br></pre></td></tr></table></figure>\n<p>当导入的多个库中具有冲突的标识符时，我们可以为库指定前缀：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">as</span> lib2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Element</span> elememt1 = <span class=\"built_in\">Element</span>();</span><br><span class=\"line\">lib2.<span class=\"built_in\">Element</span> element2 = lib2.<span class=\"built_in\">Element</span>();</span><br></pre></td></tr></table></figure>\n<p>如果你在使用 Web 相关功能，你可能会需要 Dart 延迟加载库的功能，请查阅文档。<br></p>\n<h1 id=\"2\">类型</h1>\n\n<h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><p>Dart 中支持的基本数据类型与其他面对对象的语言类似。<br><br>值得注意的是 Dart 中的字符串的保存使用 UTF-16 。<br><br>同时它可以使用 r 前缀来输出不转义的字符串：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">r&#x27;In a raw string, not even \\n gets special treatment.&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>同时，我们可以使用 <code>$</code> 将变量放入字符串中，也可以使用 <code>$&#123;&#125;</code> 将表达式放入字符串中：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;string interpolation&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = &#123;<span class=\"number\">1</span>: <span class=\"string\">&#x27;int&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Dart has <span class=\"subst\">$s</span>, which is very handy.&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$&#123;m&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>Dart 是类型安全语言，这也就意味着你不能不使用像 <code>if(nonbooleanValue)</code> 这样的代码。<br></p>\n<h2 id=\"Records-类型\"><a href=\"#Records-类型\" class=\"headerlink\" title=\"Records 类型\"></a>Records 类型</h2><p>Records 是匿名的、不可变的聚合类型。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> record = (<span class=\"string\">&#x27;first&#x27;</span>, a: <span class=\"number\">2</span>, b: <span class=\"keyword\">true</span>, <span class=\"string\">&#x27;last&#x27;</span>);  <span class=\"comment\">// this type is (String, int, bool, String)</span></span><br></pre></td></tr></table></figure>\n<p>我们可以使用占位符或者字段描述名访问字段值：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(record.$<span class=\"number\">1</span>);   <span class=\"comment\">// Prints &#x27;first&#x27;   </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(record.a);</span><br></pre></td></tr></table></figure>\n<p>Records 类型对象是不可变的，其只有 getter 字段，而没有 setting 字段。<br><br>字段描述名不影响 Records 本身的相等性。<br><br>我们可以使用模式匹配将 Records 值解构为局部局部变量：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age) userInfo(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json) &#123;</span><br><span class=\"line\">    retur (json[<span class=\"string\">&#x27;name&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"built_in\">String</span>, json[<span class=\"string\">&#x27;age&#x27;</span>] <span class=\"keyword\">as</span> <span class=\"built_in\">int</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> json = &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Dash&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;blue&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (name, age) = userInfo(json);</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>Dart 的集合包括 List 、Set 和 Map<br>同时支持使用 <code>...</code> 、<code>...?</code> 、 <code>if</code> 、<code>for</code> 、<code>if-case</code> 构建集合。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = [<span class=\"number\">0</span>, ...list];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(list2.length == <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;? list3 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list4 = [<span class=\"number\">0</span>, ...?list3];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(list4.length == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nav = [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Furniture&#x27;</span>, <span class=\"string\">&#x27;Plants&#x27;</span>, <span class=\"keyword\">if</span> (promoActive) <span class=\"string\">&#x27;Outlet&#x27;</span>];    <span class=\"comment\">//if promoActive is true, this list has 4 elements, otherwise only 3 elements.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nav1 = [<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"string\">&#x27;Furniture&#x27;</span>, <span class=\"string\">&#x27;Plants&#x27;</span>, <span class=\"keyword\">if</span> (login <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Manager&#x27;</span>) <span class=\"string\">&#x27;Inventory&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfInts = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfStrings = [<span class=\"string\">&#x27;#0&#x27;</span>, <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> listOfInts) <span class=\"string\">&#x27;#<span class=\"subst\">$i</span>&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(listOfStrings[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;#1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstrct <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    T getByKey(<span class=\"built_in\">String</span> key);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> setByKey(<span class=\"built_in\">String</span> key, T value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Any type provided to Foo for T must be non-nullable</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">T first&lt;T&gt;(<span class=\"built_in\">List</span>&lt;T&gt; ts) &#123;</span><br><span class=\"line\">    T tmp = ts[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> IntList = <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ListMapper&lt;X&gt; = <span class=\"built_in\">Map</span>&lt;X, <span class=\"built_in\">List</span>&lt;X&gt;&gt;;</span><br></pre></td></tr></table></figure>\n<p>对于函数，我们推荐使用内联函数类型而不是函数等 typedef。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Compare&lt;T&gt; = <span class=\"built_in\">int</span> <span class=\"built_in\">Function</span>(T a, T b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> sort(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; a - b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(sort <span class=\"keyword\">is</span> Compare&lt;<span class=\"built_in\">int</span>&gt;);   <span class=\"comment\">//True</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h2><p>Dart 支持在重写方法时，使用一个新类型（在新方法中）替换旧类型（在旧方法中）。类似的，当参数传递给函数时，可以使用另一种类型（实际参数）的对象替换现有类型（具有声明类型的参数）要求的对象。从生产者和消费者的角度来看，消费者接受类型，生产者产生类型。可以使用父类型替换消费者类型，使用子类型替换生产者类型。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat c = Cat();</span><br><span class=\"line\">Animal a = Cat();</span><br><span class=\"line\">Cat c2 = MaineCoon();</span><br></pre></td></tr></table></figure>\n<p>赋值运算符左边是消费者，右边是生产者。<br></p>\n<h1 id=\"3\">模式匹配</h1>\n\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (number)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//Matches of tje value pf pbj is between the constant values of &#x27;first&#x27; and &#x27;last&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &gt;= first &amp;&amp; &lt;= last:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in range&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [a,b]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$a</span>, <span class=\"subst\">$b</span>&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numList = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = numList;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a + b + c);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面匹配了一个第一个元素是 &#x27;a&#x27; 或 &#x27;b&#x27; 的两元素列表</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [<span class=\"string\">&#x27;a&#x27;</span> || <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"keyword\">var</span> c]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总的来说，Dart 提供的模式匹配功能十分强大。<br><br>我们可以使用模式匹配很方便地实现交换两个变量的值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (a, b) = (<span class=\"string\">&#x27;left&#x27;</span>, <span class=\"string\">&#x27;right&#x27;</span>);</span><br><span class=\"line\">(b, a) = (a, b);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;<span class=\"subst\">$a</span> <span class=\"subst\">$b</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>可以让多个 case 共享一个 body：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isPrimary = <span class=\"keyword\">switch</span> (color) &#123;</span><br><span class=\"line\">    Color.red || Color.yellow || Color.blue =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在 case 中增加添加：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (shape) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Square(size: <span class=\"keyword\">var</span> s) || Circle(size: <span class=\"keyword\">var</span> s) <span class=\"keyword\">when</span> s&gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Non-empty symmetric shape&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 getter 调用的结果绑定到同名变量：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">int</span>&gt; hist &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> MapEntry(:key, value: count) <span class=\"keyword\">in</span> hist.entries) &#123;</span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述 <code>.entries</code> 返回的是一个 <code>Iterable&lt;MapENtry&lt;K, V&gt;&gt;</code> ，因为其字段 key 与我们要赋值的变量 key 同名，因此可以将 <code>key:key</code> 简化为 <code>:key</code> 。<br><br>我们可以使用模式将 Records 的字段直接结构为局部变量，与函数内联。也可以使用模式解构类实例。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (name, age) = userInfo(json);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Foo myFoo = Foo(one: <span class=\"string\">&#x27;one&#x27;</span>, tew: <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Foo(:one, :teo) = myFoo;</span><br></pre></td></tr></table></figure>\n<p>使用模式实现函数的策略设计模式：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> length;</span><br><span class=\"line\">    Square(<span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> radius;</span><br><span class=\"line\">    Circle(<span class=\"keyword\">this</span>. radius);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">double</span> calculateArea(Shape shape) =&gt; <span class=\"keyword\">switch</span> (shape) &#123;</span><br><span class=\"line\">    Square(;ength: <span class=\"keyword\">var</span> l) =&gt; l * l,</span><br><span class=\"line\">    Circle(radius: <span class=\"keyword\">var</span> r) =&gt; math.pi * r * r</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用模式我们可以很便捷的验证并使用 json 结构中的数据：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (json <span class=\"keyword\">case</span> &#123;<span class=\"string\">&#x27;user&#x27;</span>: [<span class=\"built_in\">String</span> name, <span class=\"built_in\">int</span> age]&#125;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;User <span class=\"subst\">$name</span> is <span class=\"subst\">$age</span> years old.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模式匹配类型\"><a href=\"#模式匹配类型\" class=\"headerlink\" title=\"模式匹配类型\"></a>模式匹配类型</h2><p>模式匹配与逻辑组合使用时同样有运算优先级存在。<br><br>我们还可以使用模式匹配来实现空校验或空断言：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String?</span> maybeString = <span class=\"string\">&#x27;nullable with base type String&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (maybeString) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">var</span> s?:</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;s&#x27; has type non-nullable String here.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String?</span>&gt; row = [<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"keyword\">null</span>];</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (row) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> [<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"keyword\">var</span> name!]: <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//&#x27;name&#x27; is a non-nullable here.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4\">函数方法</h1>\n\n<p>Dart 中的函数也是对象，类型是 <code>Function</code>。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isNoble(<span class=\"built_in\">int</span> atomicNumber) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isBoble(<span class=\"built_in\">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>上述第二种函数声明是第一种的简写语法，仅当函数中只包含一个表达式时可用。也就是说你不可以在 <code>=&gt;</code> 之后放一个 if 语句。<br><br><code>=&gt; expr</code> 语法是 <code>&#123; return expr; &#125;</code> 的简写。（类似于其他语言中的宏定义。<br><br>一个函数可以有任意数量的普通参数。这些参数后面可以跟着命名参数和位置参数（但不能同时跟着这两个参数）。<br><br>函数命名参数和位置参数都可以指定默认值，但必须是编译时常量。普通参数不能指定默认值。<br></p>\n<h2 id=\"命名参数\"><a href=\"#命名参数\" class=\"headerlink\" title=\"命名参数\"></a>命名参数</h2><p>定义函数时，使用 <code>&#123;param1, param2, ...&#125;</code> 指定命名参数。如果你没有<strong>提供默认值</strong>或将命名参数标记为 <code>required</code>,则它们类型必须是可空的，因为 Dart 提供的默认值是 null。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> enableFlags(<span class=\"built_in\">int</span> a, &#123;<span class=\"built_in\">bool?</span> bold, <span class=\"built_in\">bool</span> hidden = <span class=\"keyword\">false</span>, <span class=\"keyword\">required</span> Widget child&#125;) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>命名参数指这些参数必须通过命名来传递。<br></p>\n<h2 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h2><p>定义函数时，使用 <code>[param1, param2, ...]</code> 指定位置参数。如果不提供默认值，则它们的参数类型必须是可空的。<br><br>位置参数要求传参时安装定义的顺序传递入参。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg, [<span class=\"built_in\">String?</span> device]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;<span class=\"subst\">$from</span> says <span class=\"subst\">$msg</span>&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deivce != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"string\">&#x27;<span class=\"subst\">$result</span> with a <span class=\"subst\">$device</span>&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main 函数\"></a>main 函数</h2><p>main 作为 flutter 应用程序的入口点。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; args) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数闭包\"><a href=\"#函数闭包\" class=\"headerlink\" title=\"函数闭包\"></a>函数闭包</h2><p>Dart 支持函数闭包。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> makeAdder(<span class=\"built_in\">int</span> addBy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">int</span> i) =&gt; addBy + i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> add2 = makeAdder(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(add2(<span class=\"number\">3</span>) == <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Dart 闭包访问的是其词法作用域中的变量。如果原变量的值在被捕捉之后发生了变化，也不会影响 Dart 闭包中已经捕捉的值。<br></p>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>当你需要延迟产生一个值序列时，可以考虑使用生成器函数。Dart 内置支持两种生成器函数：<br></p>\n<ul>\n<li>同步生成器：返回一个 Iterable 对象</li>\n<li>异步生成器：返回一个 Stream 对象</li>\n</ul>\n<h4 id=\"实现同步生成器\"><a href=\"#实现同步生成器\" class=\"headerlink\" title=\"实现同步生成器\"></a>实现同步生成器</h4><p>使用 <code>sync*</code> 标记函数，并使用 <code>yield</code> 语句来传递值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Iterable</span>&lt;<span class=\"built_in\">int</span>&gt; naturalsTo(<span class=\"built_in\">int</span> n) <span class=\"keyword\">sync</span>* &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; n) <span class=\"keyword\">yield</span> k++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现异步生成器\"><a href=\"#实现异步生成器\" class=\"headerlink\" title=\"实现异步生成器\"></a>实现异步生成器</h4><p>使用 <code>async*</code> 标记函数，并使用 <code>yield</code> 语句传递值。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;<span class=\"built_in\">int</span>&gt; asynchronousNaturalsTo(<span class=\"built_in\">int</span> n) <span class=\"keyword\">async</span>* &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; n) <span class=\"keyword\">yield</span> k++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-yield-提高递归生成器函数的性能\"><a href=\"#使用-yield-提高递归生成器函数的性能\" class=\"headerlink\" title=\"使用 yield* 提高递归生成器函数的性能\"></a>使用 <code>yield*</code> 提高递归生成器函数的性能</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Iterable</span>&lt;<span class=\"built_in\">int</span>&gt; naturalsDownFrom(<span class=\"built_in\">int</span> n) <span class=\"keyword\">sync</span>* &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>* naturalsDownFrom(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"外部函数\"><a href=\"#外部函数\" class=\"headerlink\" title=\"外部函数\"></a>外部函数</h3><p>外部函数是其主体与其声明分开实现的函数。使用 <code>external</code> 关键字。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">external</span> <span class=\"keyword\">void</span> someFunc(<span class=\"built_in\">int</span> i);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5\">控制流</h1>\n\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>Dart 支持 for 循环、while 和 do-while 回路，以及 break 和 continue。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">callbacks.add(() =&gt; <span class=\"built_in\">print</span>(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> c <span class=\"keyword\">in</span> callbacks) &#123;</span><br><span class=\"line\">c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//The ouput is 0 and then 1, as expected.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>Dart 还支持 if 、 if-case 和 switch 分支语句。<br><br>if 后面括号中的条件必须是计算结果为布尔值的表达式。<br><br>if-case 语句支持模式匹配。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pair <span class=\"keyword\">case</span> [<span class=\"built_in\">int</span> x, <span class=\"built_in\">int</span> y]) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Was coordinate array <span class=\"subst\">$x</span>, <span class=\"subst\">$y</span>&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> FormatException(<span class=\"string\">&#x27;Invalid coordinates.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>switch 语句有如下规则：<br></p>\n<ul>\n<li>非空的 case 子句中完成后跳转到 switch 的末尾， 不需要 break。</li>\n<li>空 case 子句会隐式添加 fallthrough</li>\n<li>可以使用 continue +标签 来实现非顺序的 fallthrough</li>\n<li>可以使用default 或 _</li>\n<li>支持进一步条件约束，仅需要在 case 主体之后添加 <code>when</code> 子句（if-case 语句中也支持）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (command) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;OPEN&#x27;</span>:</span><br><span class=\"line\">        executeOpen();</span><br><span class=\"line\">        <span class=\"keyword\">continue</span> newCase;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DENIED&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CLOSE&#x27;</span>:</span><br><span class=\"line\">        executeClosed();    <span class=\"comment\">//Runs for both DENIED and CLOSED</span></span><br><span class=\"line\">    newCase:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;PENDING&#x27;</span>:</span><br><span class=\"line\">        executeNowClosed(); <span class=\"comment\">//Runs for both OPEN and PENDING</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 Dart 3.0 版本开始，支持 switch 表达式。 switch 表达式必须作为语句的一部分，而不能是单独的语句。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">switch</span> (y) &#123;...&#125;;   <span class=\"comment\">//this will run switch</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">switch</span> (x) &#123;...&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">switch</span> (x) &#123;...&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*error usage</span></span><br><span class=\"line\"><span class=\"comment\">* switch (x) &#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>switch 表达式遵循下述规则：<br></p>\n<ul>\n<li>Cases 不再需要使用 case 关键字</li>\n<li>case 主体是一个表达式而不是一系列语句。</li>\n<li>每个 case 都必须有一个 body ，空 case 没有隐式的 fallthrough</li>\n<li>使用 <code>=&gt;</code> 而不是 <code>:</code></li>\n<li>使用 <code>,</code> 分隔 Cases</li>\n<li>默认只能使用 <code>_</code></li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token = <span class=\"keyword\">switch</span> (charCode) &#123;</span><br><span class=\"line\">    slash || star || plus || minus =&gt; <span class=\"keyword\">operator</span>(charCode),</span><br><span class=\"line\">    comma || semicolon =&gt; punctuation(charCode),</span><br><span class=\"line\">    &gt;= digit0 &amp;&amp; &lt;= digit9 =&gt; number(),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> FormatException(<span class=\"string\">&#x27;Invalid&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6\">错误处理</h1>\n\n<p>Dart 使用 <code>throw</code> 抛出异常，默认提供了 Exception 和 Error 类型，但实际上 Dart 可以抛出任意非空对象作为异常。<br><br>Dart 使用 <code>catch</code> 捕捉异常，使用 <code>on</code> 在捕捉时指定异常类型，使用 <code>rethrow</code> 传播异常， 使用 <code>finally</code> 执行最终执语句。<br><br>如果在 finally 子句之前异常匹配任意 catch 字句，则执行完 finally 字句后异常会被隐式传播。<br><br>catch 子句允许一个或两个参数，第一个参数时抛出的异常，第二个参数的堆栈跟踪（ StackTrace 对象）。<br><br>Dart 中的方法并不声明它们可能抛出哪些异常，并且不需要捕获任何异常。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> misBehave() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        breedMoreLlamas();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">on</span> OutofLamasException&#123;</span><br><span class=\"line\">        buyMoreLlamas();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">on</span> Exception <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Unknown exception: <span class=\"subst\">$e</span>&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">rethrow</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e, s) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Exception details:\\n <span class=\"subst\">$e</span>&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Stack trace:\\n <span class=\"subst\">$s</span>&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        cleanLlamaStalls();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7\">类 & 对象</h1>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Dart 是一种面向对象的语言，具有类和基于 mixin 的继承。每个对象都是一个类的实例，除 Null 之外的所有类都是从 Object 中派生。尽管每个类（顶层类 Object? 除外）只有一个超类，但是使用 mixin 可以实现类体在多个类层次结构中重用。扩展方法是一种在不更改类或创建子类的情况下向类添加功能的方法。类修饰符允许你控制库如何对类进行子类型化。<br></p>\n<h4 id=\"成员使用\"><a href=\"#成员使用\" class=\"headerlink\" title=\"成员使用\"></a>成员使用</h4><p>使用点（<code>.</code>）来引用对象的变量或方法。<br></p>\n<h4 id=\"构造方法重载\"><a href=\"#构造方法重载\" class=\"headerlink\" title=\"构造方法重载\"></a>构造方法重载</h4><p>构造方法的名称可以是 ClassName 或 Classname.identifier ，构造函数名称前的 new 关键字可以省略：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = Point(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = Point.fromJson(&#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>大多数语言重载构造函数的方式是重载同名构造函数，而 Dart 选择给构造函数提供 identifier 来实现重载。<br></p>\n<h4 id=\"常量对象\"><a href=\"#常量对象\" class=\"headerlink\" title=\"常量对象\"></a>常量对象</h4><p>有些类提供了常量构造函数，如果要使用该常量构造函数创建编译时常量，要在构造函数名称前使用 <code>const</code> 关键字。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>const 关键字作用的一定得是常量构造函数，而不能是普通的构造函数。<br><br>如果构造两个相同的编译时常量实际上它们会是一个实例。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>(identical(a, b));    <span class=\"comment\">//They are the same instance!</span></span><br></pre></td></tr></table></figure>\n<p>如果是在常量上下文中，你可以省略除第一个 const 关键字之外的其他 const 声明。比如下面的两个语句是等效的：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pointAndLine = <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;point&#x27;</span>: <span class=\"keyword\">const</span> [<span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;line&#x27;</span>: <span class=\"keyword\">const</span> [<span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">1</span>, <span class=\"number\">10</span>), <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">-2</span>, <span class=\"number\">11</span>)],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pointAndLine = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;point&#x27;</span>: [ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;line&#x27;</span>: [ImmutablePoint(<span class=\"number\">1</span>, <span class=\"number\">10</span>), ImmutablePoint(<span class=\"number\">-2</span>, <span class=\"number\">11</span>)],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>常量构造函数也可以构建非常量对象：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = ImmutablePoint(<span class=\"number\">2</span>, <span class=\"number\">2</span>);   <span class=\"comment\">// a isn&#x27;t a constant</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h4><p>我们可以获取对象的类型：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The type of a is <span class=\"subst\">$&#123;a.runtime.Type&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，使用 <code>object as type</code> 而不是 <code>object.runtimeType</code> 会使你的代码更加安全。<br></p>\n<h4 id=\"变量-1\"><a href=\"#变量-1\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>对于普通的成员变量，必须设定初始值，可以在声明时，也可以在构造函数参数中，还可以在初始值设定列表中。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> x;  <span class=\"comment\">//initially null</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.z);</span><br><span class=\"line\">    Point.unz(): z = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没有使用 <code>late</code> 关键字描述的成员变量的创建时机为创建实例后，构造函数及其初始值设定列表项执行之前。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double?</span> x= <span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"comment\">//ERROR </span></span><br><span class=\"line\">    <span class=\"comment\">//double? y = this.x;</span></span><br><span class=\"line\">    <span class=\"built_in\">double?</span> y = <span class=\"number\">1.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">late</span> <span class=\"built_in\">double?</span> y = <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有成员变量都会生成一个隐式的 getter 方法。没有使用 <code>final</code> 描述的成员变量，或者使用了 <code>late final</code> 描述但是没有初始值设定项的成员变量，都会生成一个隐式的 setter 方法。<br><br>使用 <code>final</code> 描述的成员变量必须只设置只设置一次值。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileMark</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">DateTime</span> start = <span class=\"built_in\">DateTime</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">    ProfileMark(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    ProfileMark.unnamed(): name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要在构造函数政务启动后才分配 final 成员变量的值，可以使用下述方法：<br></p>\n<ul>\n<li>使用工厂构造函数</li>\n<li>使用 late final 关键字描述。注意，没有初始值设定项的 late final 成员变量会隐式添加一个 setting 方法。</li>\n</ul>\n<h4 id=\"隐式接口\"><a href=\"#隐式接口\" class=\"headerlink\" title=\"隐式接口\"></a>隐式接口</h4><p>所有类都隐式定义了一个接口，其中包含该类的所有实例成员（不包括类成员）及其实现的任何接口。<br><br>类可以通过在 <code>implements</code> 子句中声明一个或多个接口，然后提供接口所需的实现。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> _name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person(<span class=\"keyword\">this</span>._name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">String</span> greet(<span class=\"built_in\">String</span> who) =&gt; <span class=\"string\">&#x27;Hello, <span class=\"subst\">$who</span>. I am <span class=\"subst\">$_name</span>&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Impostor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> <span class=\"keyword\">get</span> _name =&gt; <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">String</span> greet(<span class=\"built_in\">String</span> who) =&gt; <span class=\"string\">&#x27;Hello, <span class=\"subst\">$who</span>. Do you kone who I am?&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>使用 <code>static</code> 关键字可以在类中定义类变量（也称静态变量）和类方法。<br><br>静态变量在使用之前不会初始化。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> initialCapacity = <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类方法不在实例上运行，因此也无权访问 <code>this.</code> 。静态方法可以作为编译时常量。<br></p>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>最常见的构造函数是创建与其类同名的函数来声明构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般会使用<strong>初始化形式参数</strong>的功能来简化将构造函数的参数分配给实例变量的过程。<br><br><strong>构造函数是不会继承的。</strong><br></p>\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><p>如果未声明构造函数，则会提供默认构造函数。默认构造函数没有参数，并且调用超类中的无参数构造函数。<br></p>\n<h4 id=\"命名构造函数\"><a href=\"#命名构造函数\" class=\"headerlink\" title=\"命名构造函数\"></a>命名构造函数</h4><p>命名构造函数可以为类实现多个构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> xOrigin = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> yOrigin = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    Point.origin(): x = xOrigin, y = yOrigin;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的构造函数还使用到了<strong>初始值设定列表</strong>的功能。<br><br>命名构造函数的使用也很方便，就是 <code>ClassName.identifier()</code>。<br></p>\n<h4 id=\"初始值设定列表\"><a href=\"#初始值设定列表\" class=\"headerlink\" title=\"初始值设定列表\"></a>初始值设定列表</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">Point.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">double</span>&gt; json): x = json[<span class=\"string\">&#x27;x&#x27;</span>]!, y = json[<span class=\"string\">&#x27;y&#x27;</span>] &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;In Point.fromJson(): (<span class=\"subst\">$x</span>, <span class=\"subst\">$y</span>)&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>初始值设定列表项的右侧无权访问 this 。</p>\n<h4 id=\"调用非默认超类构造函数\"><a href=\"#调用非默认超类构造函数\" class=\"headerlink\" title=\"调用非默认超类构造函数\"></a>调用非默认超类构造函数</h4><p>默认情况下，子类中的构造函数会调用超类的未命名、无参数构造函数。执行顺序如下：<br></p>\n<ul>\n<li>初始值设定列表</li>\n<li>超类构造函数</li>\n<li>构造函数的主体</li>\n</ul>\n<p>如果超类没有无参构造函数，或者你需要调用超类的其他构造函数，你就需要手动调用超类的构造函数。<br><br>手动调用超类构造函数的方法是在冒号( <code>:</code> )之后，函数体之前。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String?</span> firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.fromJson(<span class=\"built_in\">Map</span> data) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in Person&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    Employee.fromJson(<span class=\"keyword\">super</span>.data) : <span class=\"keyword\">super</span>.fromJson() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;in Employee&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> employee = Employee.fromJson(&#123;&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(employee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中手动调用了超类的构造函数，并且使用了<strong>超级参数</strong>功能将子类构造函数的入参直接分配到超类的构造函数入参上。<br></p>\n<h4 id=\"超级参数\"><a href=\"#超级参数\" class=\"headerlink\" title=\"超级参数\"></a>超级参数</h4><p>超级参数功能可以避免手动将每个参数传递到超类的构造函数中。其语法与初始化形式参数的类似。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector2d(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector3d</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vector2d</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> z;</span><br><span class=\"line\"></span><br><span class=\"line\">    Vector3d(<span class=\"keyword\">super</span>.x, <span class=\"keyword\">super</span>.y, <span class=\"keyword\">this</span>.z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此功能不能与<strong>重定向构造函数</strong>一起使用。<br></p>\n<h4 id=\"重定向构造函数\"><a href=\"#重定向构造函数\" class=\"headerlink\" title=\"重定向构造函数\"></a>重定向构造函数</h4><p>有时，构造函数的唯一目的是重定向都同一个类中的另一个构造函数。<br><br>重定向构造函数没有函数体，使用 <code>this.</code> 调用其他构造函数。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    Point.alongXAxis(<span class=\"built_in\">double</span> x): <span class=\"keyword\">this</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常量构造函数\"><a href=\"#常量构造函数\" class=\"headerlink\" title=\"常量构造函数\"></a>常量构造函数</h4><p>如果类生成的对象永不更改，则可以使这些对象成为编译时常量。为此我们可以定义一个 const 构造函数， 并确保所有成员变量都是 final 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImmutablePoint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> ImmutablePoint origin = ImmutablePoint(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    finnal <span class=\"built_in\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"工厂构造函数\"><a href=\"#工厂构造函数\" class=\"headerlink\" title=\"工厂构造函数\"></a>工厂构造函数</h4><p>在实现并不总是创建其类的新实例的构造函数时，我们可以使用关键字 <code>factory</code> 来声明一个工厂构造函数，它可能会从缓存中返回一个实例，或者返回子类型的实例。<br><br>工厂构造函数无法访问 this 。<br>工厂构造函数的调用与其他构造函数一样。</p>\n<h2 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h2><p>成员方法与其他语言的类似。<br><br>Dart 允许你使用 <code>operator</code> 关键字重载下述的运算符：<br><br><code>&lt;</code>     <code>&gt;</code>    <code>&lt;=</code>     <code>&gt;=</code>    <code>==</code>    <code>~</code><br><code>-</code>     <code>+</code>     <code>/</code>     <code>~/</code>    <code>*</code>     <code>%</code><br><code>|</code>     <code>^</code>     <code>&amp;</code>     <code>&lt;&lt;</code>    <code>&gt;&gt;&gt;</code>   <code>&gt;&gt;</code><br><code>[]=</code>   <code>[]</code></p>\n<h4 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h4><p>只有声明没有实现的方法叫做抽象方法。<br><br>抽象方法只能存在于抽象类或混合类中。<br><br>使用 <code>abstrcat</code> 关键字声明抽象类。<br></p>\n<h4 id=\"getter-和-setter\"><a href=\"#getter-和-setter\" class=\"headerlink\" title=\"getter 和 setter\"></a>getter 和 setter</h4><p>getter 和 setter 是对对象属性进行读写访问的特殊方法。我们可以使用 <code>get</code> 和 <code>set</code> 关键字实现 getter 和 setter 来创建其他属性：<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> left, top, width, height;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rectangle(<span class=\"keyword\">this</span>.left, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.widht, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> <span class=\"keyword\">get</span> right =&gt; left + width;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> right(<span class=\"built_in\">double</span> value) =&gt; left = value - width;</span><br><span class=\"line\">    <span class=\"built_in\">double</span> <span class=\"keyword\">get</span> bottom =&gt; top + height;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> bottom =&gt; top = value - height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = Rectangle(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(rect.left == <span class=\"number\">3</span>);</span><br><span class=\"line\">    rect.right = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(rect.left == <span class=\"number\">-8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"特殊的成员方法\"><a href=\"#特殊的成员方法\" class=\"headerlink\" title=\"特殊的成员方法\"></a>特殊的成员方法</h4><p>如果要实现像调用函数一样使用对象，要在类中定义 call() 方法。<br><br>call() 方法的返回值和参数都可以自定义。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WannabeFunction</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">String</span> call(<span class=\"built_in\">String</span> a, <span class=\"built_in\">String</span> b, <span class=\"built_in\">String</span> c) =&gt; <span class=\"string\">&#x27;<span class=\"subst\">$a</span> <span class=\"subst\">$b</span> <span class=\"subst\">$c</span>&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wf = WannabeFunction();</span><br><span class=\"line\"><span class=\"keyword\">var</span> out = wf(<span class=\"string\">&#x27;Hi&#x27;</span>, <span class=\"string\">&#x27;there&#x27;</span>, <span class=\"string\">&#x27;gang&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; <span class=\"built_in\">print</span>(out);</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>使用 <code>extends</code> 关键字表示继承， 使用 <code>super</code> 引用超类。<br><br>子类可以重写实例方法、 getter 和 setter 。你如果你愿意，你可以使用 @override 批注。<br><br>重写需要满足下述要求：<br></p>\n<ul>\n<li>返回类型必须与重写方法的返回类型相同或是其子类。</li>\n<li>参数类型必须与重写方法的参数类型相同或是其超类。</li>\n<li>参数中，位置参数的数量要一致。</li>\n<li>泛型方法不能重写非泛型方法，非泛型方法不能重写泛型方法。</li>\n</ul>\n<p>有时你可能想要通过使用子类作为参数类型来缩小输入，那请使用 covariant 关键字。<br>需要注意的是，如果你重写了 <code>==</code> 运算符，那你也要重写 hashCode 的 getter 。</p>\n<h4 id=\"noSuchMethod\"><a href=\"#noSuchMethod\" class=\"headerlink\" title=\"noSuchMethod()\"></a>noSuchMethod()</h4><p>这个一个特殊的方法，如果你需要可以重写这个方法。<br></p>\n<h2 id=\"混入-Mixin\"><a href=\"#混入-Mixin\" class=\"headerlink\" title=\"混入( Mixin )\"></a>混入( Mixin )</h2><p>Mixins 是一种定义代码的方法，可以在多个类层次结构中重用。它们旨在为成员提供集体实现。<br><br>在定义类时，使用 with 子句并声明一个或多个 mixin 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> <span class=\"keyword\">extends</span> <span class=\"title\">Performer</span> <span class=\"title\">with</span> <span class=\"title\">Musical</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>mixin</code> 关键字声明一个 mixin 。同时 mixin 需要满足下述规则：<br></p>\n<ul>\n<li>Mixin 中不能使用 extends 。</li>\n<li>Mixin 中不能声明任何生成构造函数。（也就是只允许一个默认构造函数）</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixin</span> Musical &#123;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canPlayPiano = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canCompose = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bool</span> canConduct = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> entertainMe() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canPlayPiano) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Playing piano&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (canConduct) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waving hands&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Humming  to self&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候你希望限制可以使用 mixin 的类型，则可以在声明 mixin 时使用 <code>on</code> 关键字来指定用于限制的超类。<br><br>这样子，只有继承链 (<code>extends</code>) 或接口实现链 (<code>implements</code>) 中有该超类的类才能使用该 mixin 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">mixin</span> MusicalPerformer <span class=\"keyword\">on</span> Musician &#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingerDancer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Musician</span> <span class=\"title\">with</span> <span class=\"title\">MusicalPerformer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mixin-class\"><a href=\"#mixin-class\" class=\"headerlink\" title=\"mixin class\"></a>mixin class</h4><p><code>mixin</code> 声明定义类 mixin ，<code>class</code> 声明定义类一个类。<code>mixin class</code> 声明定义一个类，这个类既可用作常规类，也可用作 mixin 。它需要同时遵守 mixin 和 class 的约束。<br></p>\n<ul>\n<li>mixin 声明不能有 extends 或 with 字句</li>\n<li>class 声明不能有 on 字句</li>\n</ul>\n<h4 id=\"abstract-mixin-class\"><a href=\"#abstract-mixin-class\" class=\"headerlink\" title=\"abstract mixin class\"></a>abstract mixin class</h4><p>如果你想在 mixin class 上实现类似 on 字句的效果，可以使用 <code>abstract</code> 关键字，并在其中定义所依赖的抽象方法。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">mixin</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> playPiano() &#123;</span><br><span class=\"line\">        playInstrument(<span class=\"string\">&#x27;Piano&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> playFlute() &#123;</span><br><span class=\"line\">        playInstrument(<span class=\"string\">&#x27;Flute&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Virtuoso</span> <span class=\"title\">with</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Plays the <span class=\"subst\">$instrumentName</span> beautifully&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Novice</span> <span class=\"keyword\">extends</span> <span class=\"title\">Musician</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> playInstrument(<span class=\"built_in\">String</span> instrumentName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Plays the <span class=\"subst\">$instrumentName</span> poorly&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color &#123;red, green, blue&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增强枚举\"><a href=\"#增强枚举\" class=\"headerlink\" title=\"增强枚举\"></a>增强枚举</h4><p>枚举允许在其中声明变量、方法和 const 构造函数，使其获得与类相似的行为。但需遵循下述规则：<br></p>\n<ul>\n<li>成员变量必须是 final ，包括 mixin 添加的变量。</li>\n<li>只允许 const 生成构造函数</li>\n<li>工厂构造函数只允许返回一个字段，这个字段是已知的枚举实例 ( enum instance) 。</li>\n<li>没有其他类可以 extends Enum 。</li>\n<li>不能重写 index 、hashCode 、&#x3D;&#x3D; 运算符。</li>\n<li>不能在枚举中声明与成员变量同名的枚举项。</li>\n<li>枚举项是声明必须在整个枚举声明的开头，并且至少声明一个枚举项。</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Vehicle <span class=\"keyword\">implements</span> <span class=\"built_in\">Comparable</span>&lt;Vehicle&gt; &#123;</span><br><span class=\"line\">    car(tires: <span class=\"number\">4</span>, passengers: <span class=\"number\">5</span>, carbonPerKilometer: <span class=\"number\">400</span>),</span><br><span class=\"line\">    bus(tires: <span class=\"number\">6</span>, passengers: <span class=\"number\">50</span>, carbonPerKilometer: <span class=\"number\">800</span>),</span><br><span class=\"line\">    bicycle(tires: <span class=\"number\">2</span>, passengers: <span class=\"number\">1</span>, carbonPerKilometer: <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Vehicle(&#123;<span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.tires, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.passemgers, <span class=\"keyword\">required</span> <span class=\"keyword\">this</span>.carbonPerKilometer&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> tires;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> passengers;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> carbonPerKilometer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"keyword\">get</span> carbonFootprint =&gt; (carbonPerKilometer / passengers).round();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> isTwoWheeled =&gt; <span class=\"keyword\">this</span> == Vehicle.bicycle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@override</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> compareTo(Vehicle other) =&gt; carbonFootprint- other.carbonFootprint;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用枚举\"><a href=\"#使用枚举\" class=\"headerlink\" title=\"使用枚举\"></a>使用枚举</h4><p>像访问类的静态变量一样访问枚举值。<br><br>枚举中的每个值都有一个 index 的 getter ，它返回枚举值声明的顺序，从 0 开始。<br><br>使用 values 常量可以获取该枚举的值列表。<br><br>使用 name 属性获取枚举值名称。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> favoriteColor = Color.blue;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(Color.red.index == <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Color.blue.name);<span class=\"comment\">//&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h2><p>我们可以使用 <code>extension on</code> 关键字扩展类的方法、getter 、setter 或运算符。也可以扩展静态字段和 static helper methods 。<br><br>在 extension 和 on 中间我们可以定义扩展的名称。如果扩展名没有显式定义或者扩展名是以 <code>_</code> 开头的，那该扩展仅在声明它们的库中可见。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> NumberParsing <span class=\"keyword\">on</span> <span class=\"built_in\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> parseInt() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.parse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> parseDouble() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">double</span>.parse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;42&#x27;</span>.parseInt());</span><br><span class=\"line\"><span class=\"built_in\">print</span>(NumberParsing(<span class=\"string\">&#x27;42&#x27;</span>).parseInt());</span><br></pre></td></tr></table></figure>\n<p>如果变量类型声明为 dynamic ，则不能在该变量上调用扩展方法。<br></p>\n<h2 id=\"扩展类型\"><a href=\"#扩展类型\" class=\"headerlink\" title=\"扩展类型\"></a>扩展类型</h2><p>事实上，扩展类型是不安全的抽象，尽管它能轻松修改现有类型的接口而不产生实际包装器的成本。<br></p>\n<h1 id=\"8\">类修饰符</h1>\n\n<p>类修饰符关键字位于类或 mixin 声明之前，包括：<br></p>\n<ul>\n<li>abstract</li>\n<li>base</li>\n<li>final</li>\n<li>interface</li>\n<li>sealed</li>\n<li>mixin</li>\n</ul>\n<p>只有 base 修饰符可以出现在 mixin 声明之前。<br></p>\n<h4 id=\"abstract\"><a href=\"#abstract\" class=\"headerlink\" title=\"abstract\"></a>abstract</h4><p>声明一个抽象类，抽象类不能直接构造实例。<br></p>\n<h4 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h4><p>强制lei或 mixin 实现。同时基类不允许在其自己的库之外进行被 implements 。<br><br>必须将实现或继承基类的任何类标记为 base 、final 或 sealed 。这样可以防止外部库破坏基类保证。<br></p>\n<h4 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h4><p>interface 定义的接口不能在外部库中被继承。</p>\n<h4 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h4><p>禁止当前类被外部库继承或 implements 。不过可以在同一库中被继承或 implements 。因此其任何子类也必须标记为 base 、final 或 sealed。<br></p>\n<h4 id=\"sealed\"><a href=\"#sealed\" class=\"headerlink\" title=\"sealed\"></a>sealed</h4><p>描述该类的子类是已知的、可枚举的。<br></p>\n<h2 id=\"组合类修饰符\"><a href=\"#组合类修饰符\" class=\"headerlink\" title=\"组合类修饰符\"></a>组合类修饰符</h2><p>类声明可以安装顺序排列：<br></p>\n<ul>\n<li>（可选）abstract</li>\n<li>（可选）base 、interface 、 final 或 sealed</li>\n<li>（可选）mixin</li>\n<li>class 关键字本身</li>\n</ul>\n<p>一些类修饰符是不能组合使用的：<br></p>\n<ol>\n<li>abstract 和 sealed 。因为 sealed 已经是隐式 abstract 。</li>\n<li>interface 、final 或 sealed ，它们与 mixin 不能混用，因为它们会阻止混入。</li>\n</ol>\n<h1 id=\"9\">并发</h1>\n\n<p>此章节由于对于 Dart 的并发编程没有什么理解，无法进行较好的整理。故延后。<br><a href=\"https://dart.cn/language/concurrency\">Dart 并发</a></p>\n<h1 id=\"10\">空安全</h1>\n\n<p>在没有空安全之前，空类型可以看作是所有类型的子类。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071924553.png\"><br>在空安全之后，空类型是一个单独的类型。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925831.png\"><br>可空类型是该类型与空类型的超类。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071925353.png\"><br>在空安全之后，函数参数的隐式类型转换被移除。<br><br>在没有空安全之前，Dart 的类型系统中，Object 是顶层类型，Null 是底层类型。在空安全之后，Object? 是顶层类型，Never 是底层类型。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405071927113.png\"><br>throw 表达式的静态类型就是 Never 。<br></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Never</span> wrongType(<span class=\"built_in\">String</span> type, <span class=\"built_in\">Object</span> value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ArgumentError(<span class=\"string\">&#x27;Expected <span class=\"subst\">$type</span>, but was <span class=\"subst\">$&#123;value.runtimeType&#125;</span>.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"late-关键字\"><a href=\"#late-关键字\" class=\"headerlink\" title=\"late 关键字\"></a>late 关键字</h2><p><code>late</code> 关键字有多种语义。<br><br>late 修饰符是“在运行时而非编译时对变量进行约束”。因此 late 修饰的变量允许延迟初始化。而加上了 late 修饰意味着“每次运行都要检查是否已经赋值”。<br></p>\n"},{"title":"Hexo 环境配置","date":"2024-05-20T01:13:17.000Z","_content":"# 目录\n[前言](#1)\n[本地环境](#2)\n[云端环境](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本文记录笔记使用 Hexo 搭建个人博客网站的过程。<br>\n\n<h1 id=\"2\">本地环境</h1>\n\n## 运行环境\n本地需要先安装 Git 和 Node.js ，具体安装可以参考[此文档](https://hexo.io/docs/)。\n前置环境安装完成后后，执行下述语句安装 Hexo ：<br>\n```shell\nsudo npm install -g hexo-cli\n```\n如果有遇到没有文件夹访问权限问题，可以使用下述语句：<br>\n```shell\nsudo chown -R `whiami` path\n```\n## 本地博客\n使用下述指令创建博客工作空间：<br>\n```shell\nhexo init <folder>\n```\n一个比较常见的博客工作空间结构如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202026908.png)\n创建完成后，我们可以修改 _config.yml 文件中的内容来简单的自定义我们的博客网站。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202023026.png)\n比较主要的字段是 **title** 和 **author** 。**language** 字段是在语言国际性下标识默认语言。**timezone**字段会自动识别，如果需要也可以静态固定。<br>\nsource 文件夹一般用于存放文章， **_posts** 存放要发表的文章， **_drafts** 存放草稿。<br>\nthemes 文件夹存放我们需要的主体，可以在[官网](https://hexo.io/themes/)查找需要的主题然后应用到自己的博客网站上。但是一般刚搭建时不推荐大家去过多的关注主题，而是先完成网站搭建并运作起来。<br>\n使用下述语句创建新文章，默认会存放在 _posts 文件夹中：<br>\n```shell\nhexo new \"article name\"\n```\n使用下述指定编译并本地运行博客网站：<br>\n```shell\nhexo clean\nhexo g\nhexo server\n```\n然后就可以通过 `http://localhost:4000/` 访问。<br>\n\n<h1 id=\"3\">云端环境</h1>\n\n搭建个人博客网站肯定是希望被别人看见，那我们就需要把博客站点部署在云端，才可以让别人通过浏览器访问到。<br>\n笔者选择了在 Github Pags 部署，方便且快捷。<br>\n## github 账户设置\n你需要有一个 [github](https://github.com) 账户。\n接着你需要创建一个私人访问 Token ，如果你已经有就不需要重新创建。<br>\n点击 github 网站右上角的头像，选择 \"Settings\" 进入设置页。然后在侧边栏找到 \"Developer settings\" 进入开发者设置页。最后选择创建私人 Token(classic) 。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png)<br>\n设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 \"repo\" 项。最后点击最下方的 \"Generate Token\" 按键即可。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png)<br>\n然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png)<br>\n## github 仓库\n假设你到 GitHub 账户名为 myName ，你需要新建一个 Github 仓库，仓库名为 `myName.github.io`。勾选添加 README 文件。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202042714.png)\n在本地进入你的博客工作空间，然后将github 仓库克隆到此空间：<br>\n```shell\ncd myBlog/\ngit clone https://github.com/myName/myName.github.io.git ./\n```\n`https://github.com/myName/myName.github.io.git` 是 github 上创建的仓库路径，`./` 是表示克隆到当前目录，也就是博客工作空间文件夹。<br>\n在第一次执行 git 指令时，一般会让你输入相关信息，输入你的 github 账户名称和邮箱，已经上述提到的私人 Token 即可。如果你需要一个可视化操作界面，也可以直接下载 github Desktop 客户端。<br>\n执行下述语句编译博客网站：<br>\n```shell\nhexo clean\nhexo g\n```\n执行下述语句将修改提交到 github 上：<br>\n```shell\ngit add .\ngit commit -m \"first modify\"\ngit push\n```\n这样子你的修改就上传到 github 了。然后你就可以通过 myName.github.io 访问到你的博客网站了。默认一开始就有一篇 hello 文章在其中。<br>\n之后只需要在 _posts 文件夹中撰写新的文章，然后重新上述流程上传即可。<br>","source":"_posts/Hexo-environment-configuration.md","raw":"---\ntitle: Hexo 环境配置\ndate: 2024-05-20 09:13:17\ntags: 工具\n---\n# 目录\n[前言](#1)\n[本地环境](#2)\n[云端环境](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本文记录笔记使用 Hexo 搭建个人博客网站的过程。<br>\n\n<h1 id=\"2\">本地环境</h1>\n\n## 运行环境\n本地需要先安装 Git 和 Node.js ，具体安装可以参考[此文档](https://hexo.io/docs/)。\n前置环境安装完成后后，执行下述语句安装 Hexo ：<br>\n```shell\nsudo npm install -g hexo-cli\n```\n如果有遇到没有文件夹访问权限问题，可以使用下述语句：<br>\n```shell\nsudo chown -R `whiami` path\n```\n## 本地博客\n使用下述指令创建博客工作空间：<br>\n```shell\nhexo init <folder>\n```\n一个比较常见的博客工作空间结构如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202026908.png)\n创建完成后，我们可以修改 _config.yml 文件中的内容来简单的自定义我们的博客网站。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202023026.png)\n比较主要的字段是 **title** 和 **author** 。**language** 字段是在语言国际性下标识默认语言。**timezone**字段会自动识别，如果需要也可以静态固定。<br>\nsource 文件夹一般用于存放文章， **_posts** 存放要发表的文章， **_drafts** 存放草稿。<br>\nthemes 文件夹存放我们需要的主体，可以在[官网](https://hexo.io/themes/)查找需要的主题然后应用到自己的博客网站上。但是一般刚搭建时不推荐大家去过多的关注主题，而是先完成网站搭建并运作起来。<br>\n使用下述语句创建新文章，默认会存放在 _posts 文件夹中：<br>\n```shell\nhexo new \"article name\"\n```\n使用下述指定编译并本地运行博客网站：<br>\n```shell\nhexo clean\nhexo g\nhexo server\n```\n然后就可以通过 `http://localhost:4000/` 访问。<br>\n\n<h1 id=\"3\">云端环境</h1>\n\n搭建个人博客网站肯定是希望被别人看见，那我们就需要把博客站点部署在云端，才可以让别人通过浏览器访问到。<br>\n笔者选择了在 Github Pags 部署，方便且快捷。<br>\n## github 账户设置\n你需要有一个 [github](https://github.com) 账户。\n接着你需要创建一个私人访问 Token ，如果你已经有就不需要重新创建。<br>\n点击 github 网站右上角的头像，选择 \"Settings\" 进入设置页。然后在侧边栏找到 \"Developer settings\" 进入开发者设置页。最后选择创建私人 Token(classic) 。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png)<br>\n设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 \"repo\" 项。最后点击最下方的 \"Generate Token\" 按键即可。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png)<br>\n然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png)<br>\n## github 仓库\n假设你到 GitHub 账户名为 myName ，你需要新建一个 Github 仓库，仓库名为 `myName.github.io`。勾选添加 README 文件。<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202042714.png)\n在本地进入你的博客工作空间，然后将github 仓库克隆到此空间：<br>\n```shell\ncd myBlog/\ngit clone https://github.com/myName/myName.github.io.git ./\n```\n`https://github.com/myName/myName.github.io.git` 是 github 上创建的仓库路径，`./` 是表示克隆到当前目录，也就是博客工作空间文件夹。<br>\n在第一次执行 git 指令时，一般会让你输入相关信息，输入你的 github 账户名称和邮箱，已经上述提到的私人 Token 即可。如果你需要一个可视化操作界面，也可以直接下载 github Desktop 客户端。<br>\n执行下述语句编译博客网站：<br>\n```shell\nhexo clean\nhexo g\n```\n执行下述语句将修改提交到 github 上：<br>\n```shell\ngit add .\ngit commit -m \"first modify\"\ngit push\n```\n这样子你的修改就上传到 github 了。然后你就可以通过 myName.github.io 访问到你的博客网站了。默认一开始就有一篇 hello 文章在其中。<br>\n之后只需要在 _posts 文件夹中撰写新的文章，然后重新上述流程上传即可。<br>","slug":"Hexo-environment-configuration","published":1,"updated":"2024-05-20T12:52:40.240Z","comments":1,"layout":"post","photos":[],"_id":"clwom2bix00066bqebgvb3prz","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">本地环境</a><br><a href=\"#3\">云端环境</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文记录笔记使用 Hexo 搭建个人博客网站的过程。<br></p>\n<h1 id=\"2\">本地环境</h1>\n\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>本地需要先安装 Git 和 Node.js ，具体安装可以参考<a href=\"https://hexo.io/docs/\">此文档</a>。<br>前置环境安装完成后后，执行下述语句安装 Hexo ：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>如果有遇到没有文件夹访问权限问题，可以使用下述语句：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R `whiami` path</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地博客\"><a href=\"#本地博客\" class=\"headerlink\" title=\"本地博客\"></a>本地博客</h2><p>使用下述指令创建博客工作空间：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<p>一个比较常见的博客工作空间结构如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202026908.png\"><br>创建完成后，我们可以修改 _config.yml 文件中的内容来简单的自定义我们的博客网站。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202023026.png\"><br>比较主要的字段是 <strong>title</strong> 和 <strong>author</strong> 。<strong>language</strong> 字段是在语言国际性下标识默认语言。<strong>timezone</strong>字段会自动识别，如果需要也可以静态固定。<br><br>source 文件夹一般用于存放文章， <strong>_posts</strong> 存放要发表的文章， <strong>_drafts</strong> 存放草稿。<br><br>themes 文件夹存放我们需要的主体，可以在<a href=\"https://hexo.io/themes/\">官网</a>查找需要的主题然后应用到自己的博客网站上。但是一般刚搭建时不推荐大家去过多的关注主题，而是先完成网站搭建并运作起来。<br><br>使用下述语句创建新文章，默认会存放在 _posts 文件夹中：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;article name&quot;</span><br></pre></td></tr></table></figure>\n<p>使用下述指定编译并本地运行博客网站：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>然后就可以通过 <code>http://localhost:4000/</code> 访问。<br></p>\n<h1 id=\"3\">云端环境</h1>\n\n<p>搭建个人博客网站肯定是希望被别人看见，那我们就需要把博客站点部署在云端，才可以让别人通过浏览器访问到。<br><br>笔者选择了在 Github Pags 部署，方便且快捷。<br></p>\n<h2 id=\"github-账户设置\"><a href=\"#github-账户设置\" class=\"headerlink\" title=\"github 账户设置\"></a>github 账户设置</h2><p>你需要有一个 <a href=\"https://github.com/\">github</a> 账户。<br>接着你需要创建一个私人访问 Token ，如果你已经有就不需要重新创建。<br><br>点击 github 网站右上角的头像，选择 “Settings” 进入设置页。然后在侧边栏找到 “Developer settings” 进入开发者设置页。最后选择创建私人 Token(classic) 。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png\"><br><br>设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 “repo” 项。最后点击最下方的 “Generate Token” 按键即可。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png\"><br><br>然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png\"><br></p>\n<h2 id=\"github-仓库\"><a href=\"#github-仓库\" class=\"headerlink\" title=\"github 仓库\"></a>github 仓库</h2><p>假设你到 GitHub 账户名为 myName ，你需要新建一个 Github 仓库，仓库名为 <code>myName.github.io</code>。勾选添加 README 文件。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202042714.png\"><br>在本地进入你的博客工作空间，然后将github 仓库克隆到此空间：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myBlog/</span><br><span class=\"line\">git clone https://github.com/myName/myName.github.io.git ./</span><br></pre></td></tr></table></figure>\n<p><code>https://github.com/myName/myName.github.io.git</code> 是 github 上创建的仓库路径，<code>./</code> 是表示克隆到当前目录，也就是博客工作空间文件夹。<br><br>在第一次执行 git 指令时，一般会让你输入相关信息，输入你的 github 账户名称和邮箱，已经上述提到的私人 Token 即可。如果你需要一个可视化操作界面，也可以直接下载 github Desktop 客户端。<br><br>执行下述语句编译博客网站：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>执行下述语句将修改提交到 github 上：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first modify&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这样子你的修改就上传到 github 了。然后你就可以通过 myName.github.io 访问到你的博客网站了。默认一开始就有一篇 hello 文章在其中。<br><br>之后只需要在 _posts 文件夹中撰写新的文章，然后重新上述流程上传即可。<br></p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">本地环境</a><br><a href=\"#3\">云端环境</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文记录笔记使用 Hexo 搭建个人博客网站的过程。<br></p>\n<h1 id=\"2\">本地环境</h1>\n\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>本地需要先安装 Git 和 Node.js ，具体安装可以参考<a href=\"https://hexo.io/docs/\">此文档</a>。<br>前置环境安装完成后后，执行下述语句安装 Hexo ：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>如果有遇到没有文件夹访问权限问题，可以使用下述语句：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R `whiami` path</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地博客\"><a href=\"#本地博客\" class=\"headerlink\" title=\"本地博客\"></a>本地博客</h2><p>使用下述指令创建博客工作空间：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<p>一个比较常见的博客工作空间结构如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202026908.png\"><br>创建完成后，我们可以修改 _config.yml 文件中的内容来简单的自定义我们的博客网站。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202023026.png\"><br>比较主要的字段是 <strong>title</strong> 和 <strong>author</strong> 。<strong>language</strong> 字段是在语言国际性下标识默认语言。<strong>timezone</strong>字段会自动识别，如果需要也可以静态固定。<br><br>source 文件夹一般用于存放文章， <strong>_posts</strong> 存放要发表的文章， <strong>_drafts</strong> 存放草稿。<br><br>themes 文件夹存放我们需要的主体，可以在<a href=\"https://hexo.io/themes/\">官网</a>查找需要的主题然后应用到自己的博客网站上。但是一般刚搭建时不推荐大家去过多的关注主题，而是先完成网站搭建并运作起来。<br><br>使用下述语句创建新文章，默认会存放在 _posts 文件夹中：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;article name&quot;</span><br></pre></td></tr></table></figure>\n<p>使用下述指定编译并本地运行博客网站：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>然后就可以通过 <code>http://localhost:4000/</code> 访问。<br></p>\n<h1 id=\"3\">云端环境</h1>\n\n<p>搭建个人博客网站肯定是希望被别人看见，那我们就需要把博客站点部署在云端，才可以让别人通过浏览器访问到。<br><br>笔者选择了在 Github Pags 部署，方便且快捷。<br></p>\n<h2 id=\"github-账户设置\"><a href=\"#github-账户设置\" class=\"headerlink\" title=\"github 账户设置\"></a>github 账户设置</h2><p>你需要有一个 <a href=\"https://github.com/\">github</a> 账户。<br>接着你需要创建一个私人访问 Token ，如果你已经有就不需要重新创建。<br><br>点击 github 网站右上角的头像，选择 “Settings” 进入设置页。然后在侧边栏找到 “Developer settings” 进入开发者设置页。最后选择创建私人 Token(classic) 。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201411328.png\"><br><br>设置 Token 的过期时间时可以尽可能的延长它或者直接选择不过期。勾选下面的 “repo” 项。最后点击最下方的 “Generate Token” 按键即可。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201413750.png\"><br><br>然后你就可以看到你生成的私人 Token ，请确保不要让其他人知晓它，在离开这个界面之前复制并保存它，否则你将找不到它。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202403201416467.png\"><br></p>\n<h2 id=\"github-仓库\"><a href=\"#github-仓库\" class=\"headerlink\" title=\"github 仓库\"></a>github 仓库</h2><p>假设你到 GitHub 账户名为 myName ，你需要新建一个 Github 仓库，仓库名为 <code>myName.github.io</code>。勾选添加 README 文件。<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405202042714.png\"><br>在本地进入你的博客工作空间，然后将github 仓库克隆到此空间：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myBlog/</span><br><span class=\"line\">git clone https://github.com/myName/myName.github.io.git ./</span><br></pre></td></tr></table></figure>\n<p><code>https://github.com/myName/myName.github.io.git</code> 是 github 上创建的仓库路径，<code>./</code> 是表示克隆到当前目录，也就是博客工作空间文件夹。<br><br>在第一次执行 git 指令时，一般会让你输入相关信息，输入你的 github 账户名称和邮箱，已经上述提到的私人 Token 即可。如果你需要一个可视化操作界面，也可以直接下载 github Desktop 客户端。<br><br>执行下述语句编译博客网站：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>执行下述语句将修改提交到 github 上：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first modify&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>这样子你的修改就上传到 github 了。然后你就可以通过 myName.github.io 访问到你的博客网站了。默认一开始就有一篇 hello 文章在其中。<br><br>之后只需要在 _posts 文件夹中撰写新的文章，然后重新上述流程上传即可。<br></p>\n"},{"title":"Markdown 简述","date":"2024-05-20T00:53:30.000Z","_content":"# 目录\n[前言](#1)\n[Markdown 基本语法](#2)\n[Markdown 扩展语法](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本篇教程旨在方便自己使用 **Markdown** 语法。<br>\n本篇参考 [Markdown 官网](https://markdown.com.cn)上的资料编写而成。感兴趣的亦可直接移步官网查阅。<br>\n对于编写Markdown文本时使用的工具有很多可选，官网上也推荐了一些比较好用的工具。笔者自己则是使用的 **VSCode** 编辑器+ **Markdown Preview Enhanced** 扩展。对于该搭配的选择，是因为如下几个原因：<br>\n- VSCode 既可以作为一个代码编辑器，也可以作为一个文本编辑器<br>\n- MPE 扩展可以帮助我们实时预览 Markdown 文本的效果，同时在预览页面上支持右键菜单，提供了很多功能，比如导出 PDF 等<br>\n\n<h1 id=\"2\">Markdown 基本语法</h1>\n\n### 1. 标题语法\n要创建标题，请在标题前添加井号(`#`)。`#` 的数量代表了标题的级别。<br>\n需要注意的是，标准的标题语法要求在 `#` 和标题文字之间使用一个空格进行分隔<br>\n\n|Markdown语法|HTML|预览效果|\n|:---:|:---:|:---|\n|`# Heading Level 1`|`<h1>Heading level 1</h1>`|<h1>Heading level 1</h1>|\n|`## Heading Level 2`|`<h2>Heading level 2</h2>`|<h2>Heading level 1</h2>|\n|`### Heading Level 3`|`<h3>Heading level 3</h3>`|<h3>Heading level 1</h3>|\n|`#### Heading Level 4`|`<h4>Heading level 4</h4>`|<h4>Heading level 1</h4>|\n|`##### Heading Level 5`|`<h5>Heading level 5</h5>`|<h5>Heading level 1</h5>|\n|`###### Heading Level 6`|`<h6>Heading level 6</h6>`|<h6>Heading level 1</h6>|\n\n标题语法还支持其他可选语法，但笔者就不在此处赘述了，感兴趣的可以通过上面 Markdown 官网的超链接查看<br>\n### 2. 段落语法\n要创建段落，请使用空白行将一行或多行文本进行分隔。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`I really like using Markdown.`<br><br>`I think I'll use it to format all of my documents from now on.`|<p>`<p>I really like using Markdown.</p >`</p ><p>`<p>I think I'll use it to format all of my documents from now on.</p >`<p>|<p>I really like using Markdown.</p ><p>I think I'll use it to format all of my documents from now on.</p >|\n\n需要注意的是，不要在 Markdown 中使用空格或制表符缩紧段落，因为这会变成代码语法(在后面会讲到)。<br>\n### 3. 换行语法\n在 Markdown 中，换行需要在一行的末尾添加两个空格，再回车键，即可创建一个换行(`<br>`)<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`This is the first line.`<br>`And this is the second line.`|`This is the first line.<br>`<br>`And this is the second line.`|This is the first line.<br>And this is the second line.|\n\n换行和段落的区别在于不同段落之间的行间距比较大。<br>\n几乎每个 Markdown 程序都会支持使用两个或多个空格进行换行，但是空格是很难在编辑器中看见的，这就会有争议，因此笔者更推荐使用 `<br>` 来表示换行。(其中的实现机理涉及后面会讲到的内嵌HTML标签)<br>\n### 4. 强调语法\n我们习惯通过将文本设置为粗体或斜体来强调其需要得到注意。<br>\n#### 粗体\n我们在需要加粗的文本前后各添加两个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`I just love **bold text**.`|`I just love <strong>bold text</strong>.`|I just love **bold text**.|\n\n#### 斜体\n我们在需要用斜体显示的文本前后各添加一个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`Italicized text is the *cat's meow*.`|`Italicized text is the <em>cat's meow</em>.`|Italicized text is the *cat's meow*.|\n\n#### 粗体和斜体\n我们在需要同时使用粗体和斜体突出显示的文本前后各添加三个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`This text is ***really important***.`|`This text is <strong><em>really important</em></strong>.`|This text is ***really important***.|\n\n### 5. 引用语法\n引用语法用于创建一个特色样式，表示这一块内容是引用他处的。<br>\n要创建块引用，请在段落前添加一个 `>` 符号。<br>\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.\n\n渲染效果如下所示：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n#### 多个段落的块引用\n我们只需要为段落之间的空白行也添加一个 `>` 符号即可。<br>\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.  \n    >  \n    > The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n渲染效果如下：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.  \n>  \n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n#### 嵌套块引用\n块引用还可以嵌套。再要嵌套的段落前添加一个 `>>` 符号。\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.\n    >  \n    >> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n渲染效果如下：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>  \n>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n#### 带有其他元素的块引用\n块引用可以包含其他 Markdown 格式的元素。但并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。<br>\n\n    > #### The quarterly results look great!\n        >\n    > - Revenue was off the chart.\n    > - Profits were higher than ever.\n    >\n    >  *Everything* is going according to **plan**.\n\n渲染效果如下：<br>\n\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.\n\n### 6. 列表语法\n我们可以将多个条目组织成有序或无序列表。\n#### 有序列表\n要创建有序列表，只需要在每个列表项前添加数字并紧跟一个英文句号。<br>\n需要注意的是，数字和英文句号与列表项之间需要使用空格分隔。<br>\n列表中的项的数字不需要有序，但列表会以第一项的数字作为起始序号为整个列表编码序号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`1. First item`<br>`2. Second item`<br>`3. Third item`<br>`4. Fourth item`|   `<ol>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<li>Third item</li>`<br>`<li>Fourth item</li>`<br>`</ol>`|<ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol>|\n|`2. First item`<br>`5. Second item`<br>`9. Third item`<br>`3. Fourth item`|   `<ol>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<li>Third item</li>`<br>`<li>Fourth item</li>`<br>`</ol>`|<ol start=\"2\"><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol>|\n\n#### 无序列表\n要创建无序列表，只需要在每个列表项前添加破折号( `-` )即可。<br>\n同时你可以通过使用缩进来实现列表项的嵌套<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`- First item`<br>`- Second item`<br>` - Third item`<br>`- Fourth item`|`<ul>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<ul>`<br>`<li>Third item</li>`<br>`</ul>`<br>`<li>Fourth item</li>`<br>`</ul>`|<ul><li>First item</li><li>Second item</li><ul><li>Third item</li></ul><li>Fourth item</li></ul>|\n\n至于 Markdown 语法中有序列表是否可以做嵌套读者可以自己实践一下。<br>\n#### 在列表中嵌套其他元素\n要在保留列表连续性的同时在列表中添加另一种元素，可以将该元素缩进四个空格或一个制表符。<br>\n简单的，我们可以在列表中嵌套段落、引用块、代码块、图片等，也可以在有序列表中嵌套无序列表。<br>\n\n1. Open the file.\n2. Find the following code block on line 21:\n\n        <html>\n         <head>\n          <title>Text</title>\n         </head>\n        </html>\n\n3. Update the title to match the name of your website.\n\n### 7. 代码语法\n要将单词或短语表示为代码，你可以将它们包裹在反引号( `` ` ``)中。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`` At he command prompt, type `nano`. ``|`At he command prompt, type<code>nano</code>.`|At he command prompt, type `nano`.|\n\n#### 转义反引号\n如果你要表示为代码的单词或短语中包含反引号，则可以通过将单词或短语包裹中双反引号(<code>``</code>)中。<br>\n注意，请不要将反引号和双反引号拼接在一起，那样子 Markdown 会识别不出来的！<br>\n\n<table>\n <tr>\n  <th>Markdown语法</th>\n  <th>HTML</th>\n  <th>预览效果</th>\n </tr>\n <tr>\n  <td><code>``Use `code` in your Markdown file.``</code></td>\n  <td><code>&lt;code&gt;Use `code` in your Markdown file.&lt;/code&gt;</code></td>\n  <td><code>Use `code` in your Markdown file.</code></td>\n </tr>\n</table>\n\n#### 代码块\n要创建代码块，只需要在代码块的每一行缩进四个空格或一个制表符。<br>\n\n        <html>\n         <head>\n         </head>\n        </html> \n\n渲染效果如下：<br>\n\n    <html>\n     <head>\n     </head>\n    </html> \n\n在 Markdown 的扩展语法中，还提供了一种不用缩进就可以创建代码块的方式。<br>\n### 8. 分隔线语法\n要创建分隔线，只需要在单独的一行上使用三个或多个星号( `***` )、破折号( `---` )、下划线( `___` )，注意三种不能混用。<br>\n\n    ***\n    ---\n    ——————\n\n以上三种分隔线的渲染效果是一致的：<br>\n\n-------------\n\n为了兼容性，最好在分隔线前后均添加空白行。<br>\n### 9. 链接语法\nMarkdown 的链接语法如下：<br>\n\n    [超链接显示名](超链接地址 “超链接 title ”)\n\n其中超链接 title 是可选的，添加 title 的效果为鼠标悬浮在链接上时会文字。注意超链接 title 和地址之间要用空格分隔。<br>\n\n    这是一个链接[Markdown语法](https://markdown.com.cn \"官方教程\")。\n\n渲染效果如下：<br>\n这是一个链接 [Markdown语法](https://markdown.com.cn \"官方教程\")。<br>\n需要注意的是，如果你的地址中存在空格，那最好使用%20替换，否则可能存在兼容性问题。<br>\n#### 网址和 Email 语法\n如果你不需要为你的超链接地址设置额外的显示文本，你可以直接用尖括号建起包裹变成超链接。<br>\n    \n    <https://markdown.com.cn>\n    <fake@example.com>\n\n渲染效果如下：<br>\n<https://markdown.com.cn>\n<fake@example.com>\n#### 带格式的链接\n你可以使用一些格式强调你的链接，比如粗体和斜体。<br>\n\n    I love supporting the **[EFF](https://eff.org)**.\n    I love supporting the *[EFF](https://eff.org)*.\n    \nI love supporting the **[EFF](https://eff.org)**.\nI love supporting the *[EFF](https://eff.org)*.\n事实上用粗体强调链接并不算太好的注意，对吗！<br>\n除此之外，你也可以用代码格式强调链接。其语法与上述不同，它需要你在中括号中用代码语法包裹链接显示名。<br>\n\n    I love supporting the [`EFF`](https://eff.org)\n\nI love supporting the [`EFF`](https://eff.org)\n#### 引用类型链接\n这种链接格式多用于文献写中，由于不常用，故不在此记录。需要时查阅官网教程即可。<br>\n### 10. 图片语法\n图片语法与链接语法极为相似，仅仅只是在链接语法前增加一个感叹号( `!` )。<br>\n<pre><code>![图片名](图片地址 \"图片 title \")</code></pre><br>\n\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403142336781.png?raw=true \"这是 title\")<br>\n当鼠标悬浮在图片上时，则会显示图片 title。<br>\n#### 带链接的图片\n给图片增加链接，仅需要将图片的 Markdown 放在链接的中括号中即可。<br>\n<pre><code>[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)</code></pre><br>\n[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)<br>\n\n### 11. 转义字符语法\n转义字符语法用于显示原本用于格式化 Markdown文档的字符，只需要在字符签名添加反斜杠字符即可。\n\n    \\*Without the backslash, this would be a bullet in an unordered list.\n\n渲染效果如下：<br>\n\\*Without the backslash, this would be a bullet in an unordered list.\n#### 可转移的字符\n以下列出的字符都可以通过增加反斜杠字符来实现转义。<br>\n\n<table>\n <tr><th>Character</tr>\n <tr><td>\\</tr>\n <tr><td>`</tr>\n <tr><td>*</tr>\n <tr><td>_</tr>\n <tr><td>{}</tr>\n <tr><td>[]</tr>\n <tr><td>()</tr>\n <tr><td>#</tr>\n <tr><td>+</tr>\n <tr><td>-</tr>\n <tr><td>.</tr>\n <tr><td>!</tr>\n <tr><td>|</tr>\n</table>\n\n### 12. 内嵌 HTML 标签\nMarkdown 支持内嵌 HTML 标签。\n对于 HTML 的行级内联标签如`<span>`、`<cite>`、`<del>`不受限制，可以中 Markdown 的段落、列表或者标题中任意使用。<br>\n但是对于区块标签如`<div>`、`<table>`、`<pre>`、`<p>`等标签，必须在前后加上空行，以便与内容区分。\n同时， Markdown 语法无法在 HTML 区块中进行处理。也就是说，你无法在 HTML 区块中使用 Markdown 语法。<br>\n\n<h1 id=\"3\">Markdown 扩展语法</h1>\n\n适当使用扩展语法可以更好的充实你的文档。但是，请注意，并不是所有扩展语法都被支持，也并不是所有的处理器都支持你使用的扩展语法。<br>\n### 1. 表格\n我们使用管道( `|` )分隔每列，使用至少三个连字符( `---`) 创建分隔标题和内容。<br>\n\n    | Syntax     | Description|\n    | -----------| -----------|\n    | Header     | Title      |\n    | Paragraph  | Text       |\n\n呈现的输出如下:\n\n| Syntax     | Description|\n| -----------| -----------|\n| Header     | Title      |\n| Paragraph  | Text       |\n\n**Tip:** 很显然，手动敲这一大串语法很麻烦，我们可以使用 [Markdown Tables Generator](https://www.tablesgenerator.com/markdown_tables) 。只需要使用图形界面构建表，然后将生成的 Markdown 格式的文本复制到你想要的地方即可。\n#### 对齐\n我们可以中标题行中使用冒号( `:`) 来设置该列的文本对齐方式。\n\n    | Syntax    | Description |   Test Text |\n    | :---      | :---:       |        ---: |\n    | Header    |    TItle    | Here's this |\n    | Paragraph |     Text    |    And more |\n\n呈现的输出如下所示：<br>\n\n| Syntax    | Description |   Test Text |\n| :---      | :---:       |        ---: |\n| Header    |    TItle    | Here's this |\n| Paragraph |     Text    |    And more |\n\n#### 格式化表格中的文字\n我们可以在表格中添加链接，代码(不支持代码块)和强调。<br>\n#### 在表中显示管道字符\n我们可以使用表格的 HTML 字符代码( `&#124;` ) 在表中显示管道( `|` )字符。<br>\n\n    | Character |\n    | ---       |\n    | &#124;    |\n\n呈现的输出如下: <br>\n\n| Character |\n| ---       |\n| &#124;    |\n\n### 2. 围栏代码块\n有时使用缩进来创建代码块很不方便。这时我们可以尝试使用围栏代码块语法。\n在代码块前后的行使用三个反引号( <code>```</code> ) 或三个波浪号( <code>~~~</code> )。\n\n````\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n````\n\n呈现的输出如下:<br>\n\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n和在代码行中显示反引号一样，在代码块中显示反引号同样不能仅靠转义符( `\\` )。<br>\n在代码块中显示反引号，你需要将代码块包裹在四个反引号之间。<br>\n#### 语法高亮\n许多 Markdown 处理器都支持维码代码块的语法突出显示，只需要在代码块的反引号旁边指定一种语言。<br>\n\n````\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n````\n\n呈现效果如下:<br>\n\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n### 3. 标题编号\n许多 Markdown 处理器支持标题的自定义 ID 。<br>\n\n    ### My Great Heading {#custom-id}\n\nHTML 语法如下:<br>\n\n```HTML\n    <h3 id=\"custom-id\">My Great Heading</h3>\n```\n\n#### 链接到标题 ID\n我们可以创建链接语法链接到文件中具有自定义 ID 的标题。<br>\n\n    [Heading IDs](#heading-ids)\n\nHTML 语法如下:<br>\n\n```HTML\n    <a href=\"custom-id\">My Great Heading</a>\n```\n\n其他网站可以通过将自定义标题 ID 添加到我特的完整 URL (例如 `[Heading IDs](url#custom-id)` ) 来链接到标题。<br>\n### 4. 定义列表\n在基本语法中我们介绍了列表，包括有序列表和无序列表。现在我们介绍另外一种列表，定义列表。<br>\n创建定义列表的语法是，在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。<br>\n\n    First Term\n    : This is the definition of the first term.\n\n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\nHTML 看起来像这样:<br>\n\n    <dl>\n     <dt>First Term</dt>\n     <dd>This is the definition of the first term.</dd>\n     <dt>Second Term</dt>\n     <dd>This is one definition of the second term.</dd>\n     <dd>This is another definition of the second term.</dd>\n\n呈现的输出如下所示：<br>\n\nFirst Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n\n需要注意的是， Markdown 语法中，前一个定义术语的内容与后一个定义术语直接需要用一个空行隔开。<br>\n### 5. 删除线\n我们可以在单词前后使用两个波浪号( `~~` ) 来创建删除线的效果。<br>\n\n    ~~世界是平坦的。~~ 我们现在知道世界是圆的。\n\n~~世界是平坦的。~~ 我们现在知道世界是圆的。<br>\n### 6. 任务列表语法\n这次我们介绍另一种新的列表语法，任务列表。<br>\n要创建任务列表，我们需要在任务列表项前添加破折号( `-` )和方括号( `[]` )。破折号、方括号和列表项之间都要使用空格隔开。<br>\n如果你想勾选任务，则在方括号之间添加 `x` 。<br>\n\n    - [x] Write the press release\n    - [ ] Update the website\n    - [ ] Contact the media\n\n呈现的输出如下: <br>\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n### 7. 使用 Emoji 表情\n我们可以简单地将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入 emoji shortcodes 。<br>\n#### 复制和粘贴表情符号\n我们可以简单地从 [Emojipedia](https://emojipedia.org/) 等来源复制表情符号。<br>\n**Tip:** 如果你使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8 。<br>\n#### 使用表情符号简码\n一些 Markdown 应用程序允许通过键入表情符号简码来插入表情符号。这同样意味着表情符号简码因应用程序而异。<br>\n表情符号简码以冒号开头和结尾。<br>\n\n    去露营了！ :tent: 很快回来。\n    真好笑！ :joy:\n\n去露营了！ :tent: 很快回来。<br>\n真好笑！ :joy: <br>\n**Tip:** 你可以使用此[表情符号简码列表](https://gist.github.com/rxaviers/7360908)。","source":"_posts/Markdown-brief.md","raw":"---\ntitle: Markdown 简述\ndate: 2024-05-20 08:53:30\ntags: 语法\n---\n# 目录\n[前言](#1)\n[Markdown 基本语法](#2)\n[Markdown 扩展语法](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本篇教程旨在方便自己使用 **Markdown** 语法。<br>\n本篇参考 [Markdown 官网](https://markdown.com.cn)上的资料编写而成。感兴趣的亦可直接移步官网查阅。<br>\n对于编写Markdown文本时使用的工具有很多可选，官网上也推荐了一些比较好用的工具。笔者自己则是使用的 **VSCode** 编辑器+ **Markdown Preview Enhanced** 扩展。对于该搭配的选择，是因为如下几个原因：<br>\n- VSCode 既可以作为一个代码编辑器，也可以作为一个文本编辑器<br>\n- MPE 扩展可以帮助我们实时预览 Markdown 文本的效果，同时在预览页面上支持右键菜单，提供了很多功能，比如导出 PDF 等<br>\n\n<h1 id=\"2\">Markdown 基本语法</h1>\n\n### 1. 标题语法\n要创建标题，请在标题前添加井号(`#`)。`#` 的数量代表了标题的级别。<br>\n需要注意的是，标准的标题语法要求在 `#` 和标题文字之间使用一个空格进行分隔<br>\n\n|Markdown语法|HTML|预览效果|\n|:---:|:---:|:---|\n|`# Heading Level 1`|`<h1>Heading level 1</h1>`|<h1>Heading level 1</h1>|\n|`## Heading Level 2`|`<h2>Heading level 2</h2>`|<h2>Heading level 1</h2>|\n|`### Heading Level 3`|`<h3>Heading level 3</h3>`|<h3>Heading level 1</h3>|\n|`#### Heading Level 4`|`<h4>Heading level 4</h4>`|<h4>Heading level 1</h4>|\n|`##### Heading Level 5`|`<h5>Heading level 5</h5>`|<h5>Heading level 1</h5>|\n|`###### Heading Level 6`|`<h6>Heading level 6</h6>`|<h6>Heading level 1</h6>|\n\n标题语法还支持其他可选语法，但笔者就不在此处赘述了，感兴趣的可以通过上面 Markdown 官网的超链接查看<br>\n### 2. 段落语法\n要创建段落，请使用空白行将一行或多行文本进行分隔。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`I really like using Markdown.`<br><br>`I think I'll use it to format all of my documents from now on.`|<p>`<p>I really like using Markdown.</p >`</p ><p>`<p>I think I'll use it to format all of my documents from now on.</p >`<p>|<p>I really like using Markdown.</p ><p>I think I'll use it to format all of my documents from now on.</p >|\n\n需要注意的是，不要在 Markdown 中使用空格或制表符缩紧段落，因为这会变成代码语法(在后面会讲到)。<br>\n### 3. 换行语法\n在 Markdown 中，换行需要在一行的末尾添加两个空格，再回车键，即可创建一个换行(`<br>`)<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`This is the first line.`<br>`And this is the second line.`|`This is the first line.<br>`<br>`And this is the second line.`|This is the first line.<br>And this is the second line.|\n\n换行和段落的区别在于不同段落之间的行间距比较大。<br>\n几乎每个 Markdown 程序都会支持使用两个或多个空格进行换行，但是空格是很难在编辑器中看见的，这就会有争议，因此笔者更推荐使用 `<br>` 来表示换行。(其中的实现机理涉及后面会讲到的内嵌HTML标签)<br>\n### 4. 强调语法\n我们习惯通过将文本设置为粗体或斜体来强调其需要得到注意。<br>\n#### 粗体\n我们在需要加粗的文本前后各添加两个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`I just love **bold text**.`|`I just love <strong>bold text</strong>.`|I just love **bold text**.|\n\n#### 斜体\n我们在需要用斜体显示的文本前后各添加一个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`Italicized text is the *cat's meow*.`|`Italicized text is the <em>cat's meow</em>.`|Italicized text is the *cat's meow*.|\n\n#### 粗体和斜体\n我们在需要同时使用粗体和斜体突出显示的文本前后各添加三个星号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`This text is ***really important***.`|`This text is <strong><em>really important</em></strong>.`|This text is ***really important***.|\n\n### 5. 引用语法\n引用语法用于创建一个特色样式，表示这一块内容是引用他处的。<br>\n要创建块引用，请在段落前添加一个 `>` 符号。<br>\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.\n\n渲染效果如下所示：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n#### 多个段落的块引用\n我们只需要为段落之间的空白行也添加一个 `>` 符号即可。<br>\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.  \n    >  \n    > The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n渲染效果如下：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.  \n>  \n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n#### 嵌套块引用\n块引用还可以嵌套。再要嵌套的段落前添加一个 `>>` 符号。\n\n    > Dorothy followed her through many of the beautiful rooms in her castle.\n    >  \n    >> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n渲染效果如下：<br>\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>  \n>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n#### 带有其他元素的块引用\n块引用可以包含其他 Markdown 格式的元素。但并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。<br>\n\n    > #### The quarterly results look great!\n        >\n    > - Revenue was off the chart.\n    > - Profits were higher than ever.\n    >\n    >  *Everything* is going according to **plan**.\n\n渲染效果如下：<br>\n\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.\n\n### 6. 列表语法\n我们可以将多个条目组织成有序或无序列表。\n#### 有序列表\n要创建有序列表，只需要在每个列表项前添加数字并紧跟一个英文句号。<br>\n需要注意的是，数字和英文句号与列表项之间需要使用空格分隔。<br>\n列表中的项的数字不需要有序，但列表会以第一项的数字作为起始序号为整个列表编码序号。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`1. First item`<br>`2. Second item`<br>`3. Third item`<br>`4. Fourth item`|   `<ol>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<li>Third item</li>`<br>`<li>Fourth item</li>`<br>`</ol>`|<ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol>|\n|`2. First item`<br>`5. Second item`<br>`9. Third item`<br>`3. Fourth item`|   `<ol>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<li>Third item</li>`<br>`<li>Fourth item</li>`<br>`</ol>`|<ol start=\"2\"><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol>|\n\n#### 无序列表\n要创建无序列表，只需要在每个列表项前添加破折号( `-` )即可。<br>\n同时你可以通过使用缩进来实现列表项的嵌套<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`- First item`<br>`- Second item`<br>` - Third item`<br>`- Fourth item`|`<ul>`<br>`<li>First item</li>`<br>`<li>Second item</li>`<br>`<ul>`<br>`<li>Third item</li>`<br>`</ul>`<br>`<li>Fourth item</li>`<br>`</ul>`|<ul><li>First item</li><li>Second item</li><ul><li>Third item</li></ul><li>Fourth item</li></ul>|\n\n至于 Markdown 语法中有序列表是否可以做嵌套读者可以自己实践一下。<br>\n#### 在列表中嵌套其他元素\n要在保留列表连续性的同时在列表中添加另一种元素，可以将该元素缩进四个空格或一个制表符。<br>\n简单的，我们可以在列表中嵌套段落、引用块、代码块、图片等，也可以在有序列表中嵌套无序列表。<br>\n\n1. Open the file.\n2. Find the following code block on line 21:\n\n        <html>\n         <head>\n          <title>Text</title>\n         </head>\n        </html>\n\n3. Update the title to match the name of your website.\n\n### 7. 代码语法\n要将单词或短语表示为代码，你可以将它们包裹在反引号( `` ` ``)中。<br>\n\n|Markdown语法|HTML|预览效果|\n|---|---|---|\n|`` At he command prompt, type `nano`. ``|`At he command prompt, type<code>nano</code>.`|At he command prompt, type `nano`.|\n\n#### 转义反引号\n如果你要表示为代码的单词或短语中包含反引号，则可以通过将单词或短语包裹中双反引号(<code>``</code>)中。<br>\n注意，请不要将反引号和双反引号拼接在一起，那样子 Markdown 会识别不出来的！<br>\n\n<table>\n <tr>\n  <th>Markdown语法</th>\n  <th>HTML</th>\n  <th>预览效果</th>\n </tr>\n <tr>\n  <td><code>``Use `code` in your Markdown file.``</code></td>\n  <td><code>&lt;code&gt;Use `code` in your Markdown file.&lt;/code&gt;</code></td>\n  <td><code>Use `code` in your Markdown file.</code></td>\n </tr>\n</table>\n\n#### 代码块\n要创建代码块，只需要在代码块的每一行缩进四个空格或一个制表符。<br>\n\n        <html>\n         <head>\n         </head>\n        </html> \n\n渲染效果如下：<br>\n\n    <html>\n     <head>\n     </head>\n    </html> \n\n在 Markdown 的扩展语法中，还提供了一种不用缩进就可以创建代码块的方式。<br>\n### 8. 分隔线语法\n要创建分隔线，只需要在单独的一行上使用三个或多个星号( `***` )、破折号( `---` )、下划线( `___` )，注意三种不能混用。<br>\n\n    ***\n    ---\n    ——————\n\n以上三种分隔线的渲染效果是一致的：<br>\n\n-------------\n\n为了兼容性，最好在分隔线前后均添加空白行。<br>\n### 9. 链接语法\nMarkdown 的链接语法如下：<br>\n\n    [超链接显示名](超链接地址 “超链接 title ”)\n\n其中超链接 title 是可选的，添加 title 的效果为鼠标悬浮在链接上时会文字。注意超链接 title 和地址之间要用空格分隔。<br>\n\n    这是一个链接[Markdown语法](https://markdown.com.cn \"官方教程\")。\n\n渲染效果如下：<br>\n这是一个链接 [Markdown语法](https://markdown.com.cn \"官方教程\")。<br>\n需要注意的是，如果你的地址中存在空格，那最好使用%20替换，否则可能存在兼容性问题。<br>\n#### 网址和 Email 语法\n如果你不需要为你的超链接地址设置额外的显示文本，你可以直接用尖括号建起包裹变成超链接。<br>\n    \n    <https://markdown.com.cn>\n    <fake@example.com>\n\n渲染效果如下：<br>\n<https://markdown.com.cn>\n<fake@example.com>\n#### 带格式的链接\n你可以使用一些格式强调你的链接，比如粗体和斜体。<br>\n\n    I love supporting the **[EFF](https://eff.org)**.\n    I love supporting the *[EFF](https://eff.org)*.\n    \nI love supporting the **[EFF](https://eff.org)**.\nI love supporting the *[EFF](https://eff.org)*.\n事实上用粗体强调链接并不算太好的注意，对吗！<br>\n除此之外，你也可以用代码格式强调链接。其语法与上述不同，它需要你在中括号中用代码语法包裹链接显示名。<br>\n\n    I love supporting the [`EFF`](https://eff.org)\n\nI love supporting the [`EFF`](https://eff.org)\n#### 引用类型链接\n这种链接格式多用于文献写中，由于不常用，故不在此记录。需要时查阅官网教程即可。<br>\n### 10. 图片语法\n图片语法与链接语法极为相似，仅仅只是在链接语法前增加一个感叹号( `!` )。<br>\n<pre><code>![图片名](图片地址 \"图片 title \")</code></pre><br>\n\n![](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403142336781.png?raw=true \"这是 title\")<br>\n当鼠标悬浮在图片上时，则会显示图片 title。<br>\n#### 带链接的图片\n给图片增加链接，仅需要将图片的 Markdown 放在链接的中括号中即可。<br>\n<pre><code>[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)</code></pre><br>\n[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)<br>\n\n### 11. 转义字符语法\n转义字符语法用于显示原本用于格式化 Markdown文档的字符，只需要在字符签名添加反斜杠字符即可。\n\n    \\*Without the backslash, this would be a bullet in an unordered list.\n\n渲染效果如下：<br>\n\\*Without the backslash, this would be a bullet in an unordered list.\n#### 可转移的字符\n以下列出的字符都可以通过增加反斜杠字符来实现转义。<br>\n\n<table>\n <tr><th>Character</tr>\n <tr><td>\\</tr>\n <tr><td>`</tr>\n <tr><td>*</tr>\n <tr><td>_</tr>\n <tr><td>{}</tr>\n <tr><td>[]</tr>\n <tr><td>()</tr>\n <tr><td>#</tr>\n <tr><td>+</tr>\n <tr><td>-</tr>\n <tr><td>.</tr>\n <tr><td>!</tr>\n <tr><td>|</tr>\n</table>\n\n### 12. 内嵌 HTML 标签\nMarkdown 支持内嵌 HTML 标签。\n对于 HTML 的行级内联标签如`<span>`、`<cite>`、`<del>`不受限制，可以中 Markdown 的段落、列表或者标题中任意使用。<br>\n但是对于区块标签如`<div>`、`<table>`、`<pre>`、`<p>`等标签，必须在前后加上空行，以便与内容区分。\n同时， Markdown 语法无法在 HTML 区块中进行处理。也就是说，你无法在 HTML 区块中使用 Markdown 语法。<br>\n\n<h1 id=\"3\">Markdown 扩展语法</h1>\n\n适当使用扩展语法可以更好的充实你的文档。但是，请注意，并不是所有扩展语法都被支持，也并不是所有的处理器都支持你使用的扩展语法。<br>\n### 1. 表格\n我们使用管道( `|` )分隔每列，使用至少三个连字符( `---`) 创建分隔标题和内容。<br>\n\n    | Syntax     | Description|\n    | -----------| -----------|\n    | Header     | Title      |\n    | Paragraph  | Text       |\n\n呈现的输出如下:\n\n| Syntax     | Description|\n| -----------| -----------|\n| Header     | Title      |\n| Paragraph  | Text       |\n\n**Tip:** 很显然，手动敲这一大串语法很麻烦，我们可以使用 [Markdown Tables Generator](https://www.tablesgenerator.com/markdown_tables) 。只需要使用图形界面构建表，然后将生成的 Markdown 格式的文本复制到你想要的地方即可。\n#### 对齐\n我们可以中标题行中使用冒号( `:`) 来设置该列的文本对齐方式。\n\n    | Syntax    | Description |   Test Text |\n    | :---      | :---:       |        ---: |\n    | Header    |    TItle    | Here's this |\n    | Paragraph |     Text    |    And more |\n\n呈现的输出如下所示：<br>\n\n| Syntax    | Description |   Test Text |\n| :---      | :---:       |        ---: |\n| Header    |    TItle    | Here's this |\n| Paragraph |     Text    |    And more |\n\n#### 格式化表格中的文字\n我们可以在表格中添加链接，代码(不支持代码块)和强调。<br>\n#### 在表中显示管道字符\n我们可以使用表格的 HTML 字符代码( `&#124;` ) 在表中显示管道( `|` )字符。<br>\n\n    | Character |\n    | ---       |\n    | &#124;    |\n\n呈现的输出如下: <br>\n\n| Character |\n| ---       |\n| &#124;    |\n\n### 2. 围栏代码块\n有时使用缩进来创建代码块很不方便。这时我们可以尝试使用围栏代码块语法。\n在代码块前后的行使用三个反引号( <code>```</code> ) 或三个波浪号( <code>~~~</code> )。\n\n````\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n````\n\n呈现的输出如下:<br>\n\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n和在代码行中显示反引号一样，在代码块中显示反引号同样不能仅靠转义符( `\\` )。<br>\n在代码块中显示反引号，你需要将代码块包裹在四个反引号之间。<br>\n#### 语法高亮\n许多 Markdown 处理器都支持维码代码块的语法突出显示，只需要在代码块的反引号旁边指定一种语言。<br>\n\n````\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n````\n\n呈现效果如下:<br>\n\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n### 3. 标题编号\n许多 Markdown 处理器支持标题的自定义 ID 。<br>\n\n    ### My Great Heading {#custom-id}\n\nHTML 语法如下:<br>\n\n```HTML\n    <h3 id=\"custom-id\">My Great Heading</h3>\n```\n\n#### 链接到标题 ID\n我们可以创建链接语法链接到文件中具有自定义 ID 的标题。<br>\n\n    [Heading IDs](#heading-ids)\n\nHTML 语法如下:<br>\n\n```HTML\n    <a href=\"custom-id\">My Great Heading</a>\n```\n\n其他网站可以通过将自定义标题 ID 添加到我特的完整 URL (例如 `[Heading IDs](url#custom-id)` ) 来链接到标题。<br>\n### 4. 定义列表\n在基本语法中我们介绍了列表，包括有序列表和无序列表。现在我们介绍另外一种列表，定义列表。<br>\n创建定义列表的语法是，在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。<br>\n\n    First Term\n    : This is the definition of the first term.\n\n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\nHTML 看起来像这样:<br>\n\n    <dl>\n     <dt>First Term</dt>\n     <dd>This is the definition of the first term.</dd>\n     <dt>Second Term</dt>\n     <dd>This is one definition of the second term.</dd>\n     <dd>This is another definition of the second term.</dd>\n\n呈现的输出如下所示：<br>\n\nFirst Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n\n需要注意的是， Markdown 语法中，前一个定义术语的内容与后一个定义术语直接需要用一个空行隔开。<br>\n### 5. 删除线\n我们可以在单词前后使用两个波浪号( `~~` ) 来创建删除线的效果。<br>\n\n    ~~世界是平坦的。~~ 我们现在知道世界是圆的。\n\n~~世界是平坦的。~~ 我们现在知道世界是圆的。<br>\n### 6. 任务列表语法\n这次我们介绍另一种新的列表语法，任务列表。<br>\n要创建任务列表，我们需要在任务列表项前添加破折号( `-` )和方括号( `[]` )。破折号、方括号和列表项之间都要使用空格隔开。<br>\n如果你想勾选任务，则在方括号之间添加 `x` 。<br>\n\n    - [x] Write the press release\n    - [ ] Update the website\n    - [ ] Contact the media\n\n呈现的输出如下: <br>\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n### 7. 使用 Emoji 表情\n我们可以简单地将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入 emoji shortcodes 。<br>\n#### 复制和粘贴表情符号\n我们可以简单地从 [Emojipedia](https://emojipedia.org/) 等来源复制表情符号。<br>\n**Tip:** 如果你使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8 。<br>\n#### 使用表情符号简码\n一些 Markdown 应用程序允许通过键入表情符号简码来插入表情符号。这同样意味着表情符号简码因应用程序而异。<br>\n表情符号简码以冒号开头和结尾。<br>\n\n    去露营了！ :tent: 很快回来。\n    真好笑！ :joy:\n\n去露营了！ :tent: 很快回来。<br>\n真好笑！ :joy: <br>\n**Tip:** 你可以使用此[表情符号简码列表](https://gist.github.com/rxaviers/7360908)。","slug":"Markdown-brief","published":1,"updated":"2024-05-20T11:34:26.438Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biy00096bqe1n3wenf1","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">Markdown 基本语法</a><br><a href=\"#3\">Markdown 扩展语法</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本篇教程旨在方便自己使用 <strong>Markdown</strong> 语法。<br><br>本篇参考 <a href=\"https://markdown.com.cn/\">Markdown 官网</a>上的资料编写而成。感兴趣的亦可直接移步官网查阅。<br><br>对于编写Markdown文本时使用的工具有很多可选，官网上也推荐了一些比较好用的工具。笔者自己则是使用的 <strong>VSCode</strong> 编辑器+ <strong>Markdown Preview Enhanced</strong> 扩展。对于该搭配的选择，是因为如下几个原因：<br></p>\n<ul>\n<li>VSCode 既可以作为一个代码编辑器，也可以作为一个文本编辑器<br></li>\n<li>MPE 扩展可以帮助我们实时预览 Markdown 文本的效果，同时在预览页面上支持右键菜单，提供了很多功能，比如导出 PDF 等<br></li>\n</ul>\n<h1 id=\"2\">Markdown 基本语法</h1>\n\n<h3 id=\"1-标题语法\"><a href=\"#1-标题语法\" class=\"headerlink\" title=\"1. 标题语法\"></a>1. 标题语法</h3><p>要创建标题，请在标题前添加井号(<code>#</code>)。<code>#</code> 的数量代表了标题的级别。<br><br>需要注意的是，标准的标题语法要求在 <code>#</code> 和标题文字之间使用一个空格进行分隔<br></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Markdown语法</th>\n<th align=\"center\">HTML</th>\n<th align=\"left\">预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code># Heading Level 1</code></td>\n<td align=\"center\"><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>\n<td align=\"left\"><h1>Heading level 1</h1></td>\n</tr>\n<tr>\n<td align=\"center\"><code>## Heading Level 2</code></td>\n<td align=\"center\"><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td>\n<td align=\"left\"><h2>Heading level 1</h2></td>\n</tr>\n<tr>\n<td align=\"center\"><code>### Heading Level 3</code></td>\n<td align=\"center\"><code>&lt;h3&gt;Heading level 3&lt;/h3&gt;</code></td>\n<td align=\"left\"><h3>Heading level 1</h3></td>\n</tr>\n<tr>\n<td align=\"center\"><code>#### Heading Level 4</code></td>\n<td align=\"center\"><code>&lt;h4&gt;Heading level 4&lt;/h4&gt;</code></td>\n<td align=\"left\"><h4>Heading level 1</h4></td>\n</tr>\n<tr>\n<td align=\"center\"><code>##### Heading Level 5</code></td>\n<td align=\"center\"><code>&lt;h5&gt;Heading level 5&lt;/h5&gt;</code></td>\n<td align=\"left\"><h5>Heading level 1</h5></td>\n</tr>\n<tr>\n<td align=\"center\"><code>###### Heading Level 6</code></td>\n<td align=\"center\"><code>&lt;h6&gt;Heading level 6&lt;/h6&gt;</code></td>\n<td align=\"left\"><h6>Heading level 1</h6></td>\n</tr>\n</tbody></table>\n<p>标题语法还支持其他可选语法，但笔者就不在此处赘述了，感兴趣的可以通过上面 Markdown 官网的超链接查看<br></p>\n<h3 id=\"2-段落语法\"><a href=\"#2-段落语法\" class=\"headerlink\" title=\"2. 段落语法\"></a>2. 段落语法</h3><p>要创建段落，请使用空白行将一行或多行文本进行分隔。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>I really like using Markdown.</code><br><br><code>I think I&#39;ll use it to format all of my documents from now on.</code></td>\n<td><p><code>&lt;p&gt;I really like using Markdown.&lt;/p &gt;</code></p ><p><code>&lt;p&gt;I think I&#39;ll use it to format all of my documents from now on.&lt;/p &gt;</code><p></td>\n<td><p>I really like using Markdown.</p ><p>I think I’ll use it to format all of my documents from now on.</p ></td>\n</tr>\n</tbody></table>\n<p>需要注意的是，不要在 Markdown 中使用空格或制表符缩紧段落，因为这会变成代码语法(在后面会讲到)。<br></p>\n<h3 id=\"3-换行语法\"><a href=\"#3-换行语法\" class=\"headerlink\" title=\"3. 换行语法\"></a>3. 换行语法</h3><p>在 Markdown 中，换行需要在一行的末尾添加两个空格，再回车键，即可创建一个换行(<code>&lt;br&gt;</code>)<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>This is the first line.</code><br><code>And this is the second line.</code></td>\n<td><code>This is the first line.&lt;br&gt;</code><br><code>And this is the second line.</code></td>\n<td>This is the first line.<br>And this is the second line.</td>\n</tr>\n</tbody></table>\n<p>换行和段落的区别在于不同段落之间的行间距比较大。<br><br>几乎每个 Markdown 程序都会支持使用两个或多个空格进行换行，但是空格是很难在编辑器中看见的，这就会有争议，因此笔者更推荐使用 <code>&lt;br&gt;</code> 来表示换行。(其中的实现机理涉及后面会讲到的内嵌HTML标签)<br></p>\n<h3 id=\"4-强调语法\"><a href=\"#4-强调语法\" class=\"headerlink\" title=\"4. 强调语法\"></a>4. 强调语法</h3><p>我们习惯通过将文本设置为粗体或斜体来强调其需要得到注意。<br></p>\n<h4 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h4><p>我们在需要加粗的文本前后各添加两个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>I just love **bold text**.</code></td>\n<td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td>\n<td>I just love <strong>bold text</strong>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h4><p>我们在需要用斜体显示的文本前后各添加一个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Italicized text is the *cat&#39;s meow*.</code></td>\n<td><code>Italicized text is the &lt;em&gt;cat&#39;s meow&lt;/em&gt;.</code></td>\n<td>Italicized text is the <em>cat’s meow</em>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h4><p>我们在需要同时使用粗体和斜体突出显示的文本前后各添加三个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>This text is ***really important***.</code></td>\n<td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td>\n<td>This text is <em><strong>really important</strong></em>.</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-引用语法\"><a href=\"#5-引用语法\" class=\"headerlink\" title=\"5. 引用语法\"></a>5. 引用语法</h3><p>引用语法用于创建一个特色样式，表示这一块内容是引用他处的。<br><br>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号。<br></p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.\n</code></pre>\n<p>渲染效果如下所示：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>\n</blockquote>\n<h4 id=\"多个段落的块引用\"><a href=\"#多个段落的块引用\" class=\"headerlink\" title=\"多个段落的块引用\"></a>多个段落的块引用</h4><p>我们只需要为段落之间的空白行也添加一个 <code>&gt;</code> 符号即可。<br></p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.  \n&gt;  \n&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.  </p>\n<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>\n</blockquote>\n<h4 id=\"嵌套块引用\"><a href=\"#嵌套块引用\" class=\"headerlink\" title=\"嵌套块引用\"></a>嵌套块引用</h4><p>块引用还可以嵌套。再要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。</p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.\n&gt;  \n&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>\n<blockquote>\n<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"带有其他元素的块引用\"><a href=\"#带有其他元素的块引用\" class=\"headerlink\" title=\"带有其他元素的块引用\"></a>带有其他元素的块引用</h4><p>块引用可以包含其他 Markdown 格式的元素。但并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。<br></p>\n<pre><code>&gt; #### The quarterly results look great!\n    &gt;\n&gt; - Revenue was off the chart.\n&gt; - Profits were higher than ever.\n&gt;\n&gt;  *Everything* is going according to **plan**.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<h4 id=\"The-quarterly-results-look-great\"><a href=\"#The-quarterly-results-look-great\" class=\"headerlink\" title=\"The quarterly results look great!\"></a>The quarterly results look great!</h4><ul>\n<li>Revenue was off the chart.</li>\n<li>Profits were higher than ever.</li>\n</ul>\n<p> <em>Everything</em> is going according to <strong>plan</strong>.</p>\n</blockquote>\n<h3 id=\"6-列表语法\"><a href=\"#6-列表语法\" class=\"headerlink\" title=\"6. 列表语法\"></a>6. 列表语法</h3><p>我们可以将多个条目组织成有序或无序列表。</p>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><p>要创建有序列表，只需要在每个列表项前添加数字并紧跟一个英文句号。<br><br>需要注意的是，数字和英文句号与列表项之间需要使用空格分隔。<br><br>列表中的项的数字不需要有序，但列表会以第一项的数字作为起始序号为整个列表编码序号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>1. First item</code><br><code>2. Second item</code><br><code>3. Third item</code><br><code>4. Fourth item</code></td>\n<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>\n<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>\n</tr>\n<tr>\n<td><code>2. First item</code><br><code>5. Second item</code><br><code>9. Third item</code><br><code>3. Fourth item</code></td>\n<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>\n<td><ol start=\"2\"><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>\n</tr>\n</tbody></table>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><p>要创建无序列表，只需要在每个列表项前添加破折号( <code>-</code> )即可。<br><br>同时你可以通过使用缩进来实现列表项的嵌套<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>- First item</code><br><code>- Second item</code><br><code> - Third item</code><br><code>- Fourth item</code></td>\n<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;ul&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>\n<td><ul><li>First item</li><li>Second item</li><ul><li>Third item</li></ul><li>Fourth item</li></ul></td>\n</tr>\n</tbody></table>\n<p>至于 Markdown 语法中有序列表是否可以做嵌套读者可以自己实践一下。<br></p>\n<h4 id=\"在列表中嵌套其他元素\"><a href=\"#在列表中嵌套其他元素\" class=\"headerlink\" title=\"在列表中嵌套其他元素\"></a>在列表中嵌套其他元素</h4><p>要在保留列表连续性的同时在列表中添加另一种元素，可以将该元素缩进四个空格或一个制表符。<br><br>简单的，我们可以在列表中嵌套段落、引用块、代码块、图片等，也可以在有序列表中嵌套无序列表。<br></p>\n<ol>\n<li><p>Open the file.</p>\n</li>\n<li><p>Find the following code block on line 21:</p>\n<pre><code> &lt;html&gt;\n  &lt;head&gt;\n   &lt;title&gt;Text&lt;/title&gt;\n  &lt;/head&gt;\n &lt;/html&gt;\n</code></pre>\n</li>\n<li><p>Update the title to match the name of your website.</p>\n</li>\n</ol>\n<h3 id=\"7-代码语法\"><a href=\"#7-代码语法\" class=\"headerlink\" title=\"7. 代码语法\"></a>7. 代码语法</h3><p>要将单词或短语表示为代码，你可以将它们包裹在反引号( <code>`</code>)中。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>At he command prompt, type `nano`.</code></td>\n<td><code>At he command prompt, type&lt;code&gt;nano&lt;/code&gt;.</code></td>\n<td>At he command prompt, type <code>nano</code>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"转义反引号\"><a href=\"#转义反引号\" class=\"headerlink\" title=\"转义反引号\"></a>转义反引号</h4><p>如果你要表示为代码的单词或短语中包含反引号，则可以通过将单词或短语包裹中双反引号(<code>``</code>)中。<br><br>注意，请不要将反引号和双反引号拼接在一起，那样子 Markdown 会识别不出来的！<br></p>\n<table>\n <tr>\n  <th>Markdown语法</th>\n  <th>HTML</th>\n  <th>预览效果</th>\n </tr>\n <tr>\n  <td><code>``Use `code` in your Markdown file.``</code></td>\n  <td><code>&lt;code&gt;Use `code` in your Markdown file.&lt;/code&gt;</code></td>\n  <td><code>Use `code` in your Markdown file.</code></td>\n </tr>\n</table>\n\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><p>要创建代码块，只需要在代码块的每一行缩进四个空格或一个制表符。<br></p>\n<pre><code>    &lt;html&gt;\n     &lt;head&gt;\n     &lt;/head&gt;\n    &lt;/html&gt; \n</code></pre>\n<p>渲染效果如下：<br></p>\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n &lt;/head&gt;\n&lt;/html&gt; \n</code></pre>\n<p>在 Markdown 的扩展语法中，还提供了一种不用缩进就可以创建代码块的方式。<br></p>\n<h3 id=\"8-分隔线语法\"><a href=\"#8-分隔线语法\" class=\"headerlink\" title=\"8. 分隔线语法\"></a>8. 分隔线语法</h3><p>要创建分隔线，只需要在单独的一行上使用三个或多个星号( <code>***</code> )、破折号( <code>---</code> )、下划线( <code>___</code> )，注意三种不能混用。<br></p>\n<pre><code>***\n---\n——————\n</code></pre>\n<p>以上三种分隔线的渲染效果是一致的：<br></p>\n<hr>\n<p>为了兼容性，最好在分隔线前后均添加空白行。<br></p>\n<h3 id=\"9-链接语法\"><a href=\"#9-链接语法\" class=\"headerlink\" title=\"9. 链接语法\"></a>9. 链接语法</h3><p>Markdown 的链接语法如下：<br></p>\n<pre><code>[超链接显示名](超链接地址 “超链接 title ”)\n</code></pre>\n<p>其中超链接 title 是可选的，添加 title 的效果为鼠标悬浮在链接上时会文字。注意超链接 title 和地址之间要用空格分隔。<br></p>\n<pre><code>这是一个链接[Markdown语法](https://markdown.com.cn &quot;官方教程&quot;)。\n</code></pre>\n<p>渲染效果如下：<br><br>这是一个链接 <a href=\"https://markdown.com.cn/\" title=\"官方教程\">Markdown语法</a>。<br><br>需要注意的是，如果你的地址中存在空格，那最好使用%20替换，否则可能存在兼容性问题。<br></p>\n<h4 id=\"网址和-Email-语法\"><a href=\"#网址和-Email-语法\" class=\"headerlink\" title=\"网址和 Email 语法\"></a>网址和 Email 语法</h4><p>如果你不需要为你的超链接地址设置额外的显示文本，你可以直接用尖括号建起包裹变成超链接。<br></p>\n<pre><code>&lt;https://markdown.com.cn&gt;\n&lt;fake@example.com&gt;\n</code></pre>\n<p>渲染效果如下：<br><br><a href=\"https://markdown.com.cn/\">https://markdown.com.cn</a><br><a href=\"mailto:&#102;&#97;&#107;&#101;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;\">&#102;&#97;&#107;&#101;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p>\n<h4 id=\"带格式的链接\"><a href=\"#带格式的链接\" class=\"headerlink\" title=\"带格式的链接\"></a>带格式的链接</h4><p>你可以使用一些格式强调你的链接，比如粗体和斜体。<br></p>\n<pre><code>I love supporting the **[EFF](https://eff.org)**.\nI love supporting the *[EFF](https://eff.org)*.\n</code></pre>\n<p>I love supporting the <strong><a href=\"https://eff.org/\">EFF</a></strong>.<br>I love supporting the <em><a href=\"https://eff.org/\">EFF</a></em>.<br>事实上用粗体强调链接并不算太好的注意，对吗！<br><br>除此之外，你也可以用代码格式强调链接。其语法与上述不同，它需要你在中括号中用代码语法包裹链接显示名。<br></p>\n<pre><code>I love supporting the [`EFF`](https://eff.org)\n</code></pre>\n<p>I love supporting the <a href=\"https://eff.org/\"><code>EFF</code></a></p>\n<h4 id=\"引用类型链接\"><a href=\"#引用类型链接\" class=\"headerlink\" title=\"引用类型链接\"></a>引用类型链接</h4><p>这种链接格式多用于文献写中，由于不常用，故不在此记录。需要时查阅官网教程即可。<br></p>\n<h3 id=\"10-图片语法\"><a href=\"#10-图片语法\" class=\"headerlink\" title=\"10. 图片语法\"></a>10. 图片语法</h3><p>图片语法与链接语法极为相似，仅仅只是在链接语法前增加一个感叹号( <code>!</code> )。<br></p>\n<pre><code>![图片名](图片地址 \"图片 title \")</code></pre><br>\n\n<p><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403142336781.png?raw=true\" title=\"这是 title\"><br><br>当鼠标悬浮在图片上时，则会显示图片 title。<br></p>\n<h4 id=\"带链接的图片\"><a href=\"#带链接的图片\" class=\"headerlink\" title=\"带链接的图片\"></a>带链接的图片</h4><p>给图片增加链接，仅需要将图片的 Markdown 放在链接的中括号中即可。<br></p>\n<pre><code>[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)</code></pre><br>\n<p><a href=\"https://markdown.com.cn/\"><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true\" alt=\"沙漠中的岩石图片\" title=\"Shiprock\"></a><br></p>\n<h3 id=\"11-转义字符语法\"><a href=\"#11-转义字符语法\" class=\"headerlink\" title=\"11. 转义字符语法\"></a>11. 转义字符语法</h3><p>转义字符语法用于显示原本用于格式化 Markdown文档的字符，只需要在字符签名添加反斜杠字符即可。</p>\n<pre><code>\\*Without the backslash, this would be a bullet in an unordered list.\n</code></pre>\n<p>渲染效果如下：<br><br>*Without the backslash, this would be a bullet in an unordered list.</p>\n<h4 id=\"可转移的字符\"><a href=\"#可转移的字符\" class=\"headerlink\" title=\"可转移的字符\"></a>可转移的字符</h4><p>以下列出的字符都可以通过增加反斜杠字符来实现转义。<br></p>\n<table>\n <tr><th>Character</tr>\n <tr><td>\\</tr>\n <tr><td>`</tr>\n <tr><td>*</tr>\n <tr><td>_</tr>\n <tr><td>{}</tr>\n <tr><td>[]</tr>\n <tr><td>()</tr>\n <tr><td>#</tr>\n <tr><td>+</tr>\n <tr><td>-</tr>\n <tr><td>.</tr>\n <tr><td>!</tr>\n <tr><td>|</tr>\n</table>\n\n<h3 id=\"12-内嵌-HTML-标签\"><a href=\"#12-内嵌-HTML-标签\" class=\"headerlink\" title=\"12. 内嵌 HTML 标签\"></a>12. 内嵌 HTML 标签</h3><p>Markdown 支持内嵌 HTML 标签。<br>对于 HTML 的行级内联标签如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>不受限制，可以中 Markdown 的段落、列表或者标题中任意使用。<br><br>但是对于区块标签如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行，以便与内容区分。<br>同时， Markdown 语法无法在 HTML 区块中进行处理。也就是说，你无法在 HTML 区块中使用 Markdown 语法。<br></p>\n<h1 id=\"3\">Markdown 扩展语法</h1>\n\n<p>适当使用扩展语法可以更好的充实你的文档。但是，请注意，并不是所有扩展语法都被支持，也并不是所有的处理器都支持你使用的扩展语法。<br></p>\n<h3 id=\"1-表格\"><a href=\"#1-表格\" class=\"headerlink\" title=\"1. 表格\"></a>1. 表格</h3><p>我们使用管道( <code>|</code> )分隔每列，使用至少三个连字符( <code>---</code>) 创建分隔标题和内容。<br></p>\n<pre><code>| Syntax     | Description|\n| -----------| -----------|\n| Header     | Title      |\n| Paragraph  | Text       |\n</code></pre>\n<p>呈现的输出如下:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody></table>\n<p><strong>Tip:</strong> 很显然，手动敲这一大串语法很麻烦，我们可以使用 <a href=\"https://www.tablesgenerator.com/markdown_tables\">Markdown Tables Generator</a> 。只需要使用图形界面构建表，然后将生成的 Markdown 格式的文本复制到你想要的地方即可。</p>\n<h4 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h4><p>我们可以中标题行中使用冒号( <code>:</code>) 来设置该列的文本对齐方式。</p>\n<pre><code>| Syntax    | Description |   Test Text |\n| :---      | :---:       |        ---: |\n| Header    |    TItle    | Here&#39;s this |\n| Paragraph |     Text    |    And more |\n</code></pre>\n<p>呈现的输出如下所示：<br></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Syntax</th>\n<th align=\"center\">Description</th>\n<th align=\"right\">Test Text</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Header</td>\n<td align=\"center\">TItle</td>\n<td align=\"right\">Here’s this</td>\n</tr>\n<tr>\n<td align=\"left\">Paragraph</td>\n<td align=\"center\">Text</td>\n<td align=\"right\">And more</td>\n</tr>\n</tbody></table>\n<h4 id=\"格式化表格中的文字\"><a href=\"#格式化表格中的文字\" class=\"headerlink\" title=\"格式化表格中的文字\"></a>格式化表格中的文字</h4><p>我们可以在表格中添加链接，代码(不支持代码块)和强调。<br></p>\n<h4 id=\"在表中显示管道字符\"><a href=\"#在表中显示管道字符\" class=\"headerlink\" title=\"在表中显示管道字符\"></a>在表中显示管道字符</h4><p>我们可以使用表格的 HTML 字符代码( <code>&amp;#124;</code> ) 在表中显示管道( <code>|</code> )字符。<br></p>\n<pre><code>| Character |\n| ---       |\n| &amp;#124;    |\n</code></pre>\n<p>呈现的输出如下: <br></p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#124;</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-围栏代码块\"><a href=\"#2-围栏代码块\" class=\"headerlink\" title=\"2. 围栏代码块\"></a>2. 围栏代码块</h3><p>有时使用缩进来创建代码块很不方便。这时我们可以尝试使用围栏代码块语法。<br>在代码块前后的行使用三个反引号( <code>```</code> ) 或三个波浪号( <code>~~~</code> )。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>呈现的输出如下:<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和在代码行中显示反引号一样，在代码块中显示反引号同样不能仅靠转义符( <code>\\</code> )。<br><br>在代码块中显示反引号，你需要将代码块包裹在四个反引号之间。<br></p>\n<h4 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h4><p>许多 Markdown 处理器都支持维码代码块的语法突出显示，只需要在代码块的反引号旁边指定一种语言。<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>呈现效果如下:<br></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Smith&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-标题编号\"><a href=\"#3-标题编号\" class=\"headerlink\" title=\"3. 标题编号\"></a>3. 标题编号</h3><p>许多 Markdown 处理器支持标题的自定义 ID 。<br></p>\n<pre><code>### My Great Heading &#123;#custom-id&#125;\n</code></pre>\n<p>HTML 语法如下:<br></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接到标题-ID\"><a href=\"#链接到标题-ID\" class=\"headerlink\" title=\"链接到标题 ID\"></a>链接到标题 ID</h4><p>我们可以创建链接语法链接到文件中具有自定义 ID 的标题。<br></p>\n<pre><code>[Heading IDs](#heading-ids)\n</code></pre>\n<p>HTML 语法如下:<br></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他网站可以通过将自定义标题 ID 添加到我特的完整 URL (例如 <code>[Heading IDs](url#custom-id)</code> ) 来链接到标题。<br></p>\n<h3 id=\"4-定义列表\"><a href=\"#4-定义列表\" class=\"headerlink\" title=\"4. 定义列表\"></a>4. 定义列表</h3><p>在基本语法中我们介绍了列表，包括有序列表和无序列表。现在我们介绍另外一种列表，定义列表。<br><br>创建定义列表的语法是，在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。<br></p>\n<pre><code>First Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<p>HTML 看起来像这样:<br></p>\n<pre><code>&lt;dl&gt;\n &lt;dt&gt;First Term&lt;/dt&gt;\n &lt;dd&gt;This is the definition of the first term.&lt;/dd&gt;\n &lt;dt&gt;Second Term&lt;/dt&gt;\n &lt;dd&gt;This is one definition of the second term.&lt;/dd&gt;\n &lt;dd&gt;This is another definition of the second term.&lt;/dd&gt;\n</code></pre>\n<p>呈现的输出如下所示：<br></p>\n<dl><dt>First Term</dt><dd>This is the definition of the first term.</dd></dl><dl><dt>Second Term<br>: This is one definition of the second term.</dt><dd>This is another definition of the second term.</dd></dl><p>需要注意的是， Markdown 语法中，前一个定义术语的内容与后一个定义术语直接需要用一个空行隔开。<br></p>\n<h3 id=\"5-删除线\"><a href=\"#5-删除线\" class=\"headerlink\" title=\"5. 删除线\"></a>5. 删除线</h3><p>我们可以在单词前后使用两个波浪号( <code>~~</code> ) 来创建删除线的效果。<br></p>\n<pre><code>~~世界是平坦的。~~ 我们现在知道世界是圆的。\n</code></pre>\n<p><del>世界是平坦的。</del> 我们现在知道世界是圆的。<br></p>\n<h3 id=\"6-任务列表语法\"><a href=\"#6-任务列表语法\" class=\"headerlink\" title=\"6. 任务列表语法\"></a>6. 任务列表语法</h3><p>这次我们介绍另一种新的列表语法，任务列表。<br><br>要创建任务列表，我们需要在任务列表项前添加破折号( <code>-</code> )和方括号( <code>[]</code> )。破折号、方括号和列表项之间都要使用空格隔开。<br><br>如果你想勾选任务，则在方括号之间添加 <code>x</code> 。<br></p>\n<pre><code>- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n</code></pre>\n<p>呈现的输出如下: <br></p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Write the press release</li>\n<li><input disabled=\"\" type=\"checkbox\"> Update the website</li>\n<li><input disabled=\"\" type=\"checkbox\"> Contact the media</li>\n</ul>\n<h3 id=\"7-使用-Emoji-表情\"><a href=\"#7-使用-Emoji-表情\" class=\"headerlink\" title=\"7. 使用 Emoji 表情\"></a>7. 使用 Emoji 表情</h3><p>我们可以简单地将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入 emoji shortcodes 。<br></p>\n<h4 id=\"复制和粘贴表情符号\"><a href=\"#复制和粘贴表情符号\" class=\"headerlink\" title=\"复制和粘贴表情符号\"></a>复制和粘贴表情符号</h4><p>我们可以简单地从 <a href=\"https://emojipedia.org/\">Emojipedia</a> 等来源复制表情符号。<br><br><strong>Tip:</strong> 如果你使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8 。<br></p>\n<h4 id=\"使用表情符号简码\"><a href=\"#使用表情符号简码\" class=\"headerlink\" title=\"使用表情符号简码\"></a>使用表情符号简码</h4><p>一些 Markdown 应用程序允许通过键入表情符号简码来插入表情符号。这同样意味着表情符号简码因应用程序而异。<br><br>表情符号简码以冒号开头和结尾。<br></p>\n<pre><code>去露营了！ :tent: 很快回来。\n真好笑！ :joy:\n</code></pre>\n<p>去露营了！ :tent: 很快回来。<br><br>真好笑！ :joy: <br><br><strong>Tip:</strong> 你可以使用此<a href=\"https://gist.github.com/rxaviers/7360908\">表情符号简码列表</a>。</p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">Markdown 基本语法</a><br><a href=\"#3\">Markdown 扩展语法</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本篇教程旨在方便自己使用 <strong>Markdown</strong> 语法。<br><br>本篇参考 <a href=\"https://markdown.com.cn/\">Markdown 官网</a>上的资料编写而成。感兴趣的亦可直接移步官网查阅。<br><br>对于编写Markdown文本时使用的工具有很多可选，官网上也推荐了一些比较好用的工具。笔者自己则是使用的 <strong>VSCode</strong> 编辑器+ <strong>Markdown Preview Enhanced</strong> 扩展。对于该搭配的选择，是因为如下几个原因：<br></p>\n<ul>\n<li>VSCode 既可以作为一个代码编辑器，也可以作为一个文本编辑器<br></li>\n<li>MPE 扩展可以帮助我们实时预览 Markdown 文本的效果，同时在预览页面上支持右键菜单，提供了很多功能，比如导出 PDF 等<br></li>\n</ul>\n<h1 id=\"2\">Markdown 基本语法</h1>\n\n<h3 id=\"1-标题语法\"><a href=\"#1-标题语法\" class=\"headerlink\" title=\"1. 标题语法\"></a>1. 标题语法</h3><p>要创建标题，请在标题前添加井号(<code>#</code>)。<code>#</code> 的数量代表了标题的级别。<br><br>需要注意的是，标准的标题语法要求在 <code>#</code> 和标题文字之间使用一个空格进行分隔<br></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Markdown语法</th>\n<th align=\"center\">HTML</th>\n<th align=\"left\">预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code># Heading Level 1</code></td>\n<td align=\"center\"><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td>\n<td align=\"left\"><h1>Heading level 1</h1></td>\n</tr>\n<tr>\n<td align=\"center\"><code>## Heading Level 2</code></td>\n<td align=\"center\"><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td>\n<td align=\"left\"><h2>Heading level 1</h2></td>\n</tr>\n<tr>\n<td align=\"center\"><code>### Heading Level 3</code></td>\n<td align=\"center\"><code>&lt;h3&gt;Heading level 3&lt;/h3&gt;</code></td>\n<td align=\"left\"><h3>Heading level 1</h3></td>\n</tr>\n<tr>\n<td align=\"center\"><code>#### Heading Level 4</code></td>\n<td align=\"center\"><code>&lt;h4&gt;Heading level 4&lt;/h4&gt;</code></td>\n<td align=\"left\"><h4>Heading level 1</h4></td>\n</tr>\n<tr>\n<td align=\"center\"><code>##### Heading Level 5</code></td>\n<td align=\"center\"><code>&lt;h5&gt;Heading level 5&lt;/h5&gt;</code></td>\n<td align=\"left\"><h5>Heading level 1</h5></td>\n</tr>\n<tr>\n<td align=\"center\"><code>###### Heading Level 6</code></td>\n<td align=\"center\"><code>&lt;h6&gt;Heading level 6&lt;/h6&gt;</code></td>\n<td align=\"left\"><h6>Heading level 1</h6></td>\n</tr>\n</tbody></table>\n<p>标题语法还支持其他可选语法，但笔者就不在此处赘述了，感兴趣的可以通过上面 Markdown 官网的超链接查看<br></p>\n<h3 id=\"2-段落语法\"><a href=\"#2-段落语法\" class=\"headerlink\" title=\"2. 段落语法\"></a>2. 段落语法</h3><p>要创建段落，请使用空白行将一行或多行文本进行分隔。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>I really like using Markdown.</code><br><br><code>I think I&#39;ll use it to format all of my documents from now on.</code></td>\n<td><p><code>&lt;p&gt;I really like using Markdown.&lt;/p &gt;</code></p ><p><code>&lt;p&gt;I think I&#39;ll use it to format all of my documents from now on.&lt;/p &gt;</code><p></td>\n<td><p>I really like using Markdown.</p ><p>I think I’ll use it to format all of my documents from now on.</p ></td>\n</tr>\n</tbody></table>\n<p>需要注意的是，不要在 Markdown 中使用空格或制表符缩紧段落，因为这会变成代码语法(在后面会讲到)。<br></p>\n<h3 id=\"3-换行语法\"><a href=\"#3-换行语法\" class=\"headerlink\" title=\"3. 换行语法\"></a>3. 换行语法</h3><p>在 Markdown 中，换行需要在一行的末尾添加两个空格，再回车键，即可创建一个换行(<code>&lt;br&gt;</code>)<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>This is the first line.</code><br><code>And this is the second line.</code></td>\n<td><code>This is the first line.&lt;br&gt;</code><br><code>And this is the second line.</code></td>\n<td>This is the first line.<br>And this is the second line.</td>\n</tr>\n</tbody></table>\n<p>换行和段落的区别在于不同段落之间的行间距比较大。<br><br>几乎每个 Markdown 程序都会支持使用两个或多个空格进行换行，但是空格是很难在编辑器中看见的，这就会有争议，因此笔者更推荐使用 <code>&lt;br&gt;</code> 来表示换行。(其中的实现机理涉及后面会讲到的内嵌HTML标签)<br></p>\n<h3 id=\"4-强调语法\"><a href=\"#4-强调语法\" class=\"headerlink\" title=\"4. 强调语法\"></a>4. 强调语法</h3><p>我们习惯通过将文本设置为粗体或斜体来强调其需要得到注意。<br></p>\n<h4 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h4><p>我们在需要加粗的文本前后各添加两个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>I just love **bold text**.</code></td>\n<td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td>\n<td>I just love <strong>bold text</strong>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h4><p>我们在需要用斜体显示的文本前后各添加一个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Italicized text is the *cat&#39;s meow*.</code></td>\n<td><code>Italicized text is the &lt;em&gt;cat&#39;s meow&lt;/em&gt;.</code></td>\n<td>Italicized text is the <em>cat’s meow</em>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"粗体和斜体\"><a href=\"#粗体和斜体\" class=\"headerlink\" title=\"粗体和斜体\"></a>粗体和斜体</h4><p>我们在需要同时使用粗体和斜体突出显示的文本前后各添加三个星号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>This text is ***really important***.</code></td>\n<td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td>\n<td>This text is <em><strong>really important</strong></em>.</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-引用语法\"><a href=\"#5-引用语法\" class=\"headerlink\" title=\"5. 引用语法\"></a>5. 引用语法</h3><p>引用语法用于创建一个特色样式，表示这一块内容是引用他处的。<br><br>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号。<br></p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.\n</code></pre>\n<p>渲染效果如下所示：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>\n</blockquote>\n<h4 id=\"多个段落的块引用\"><a href=\"#多个段落的块引用\" class=\"headerlink\" title=\"多个段落的块引用\"></a>多个段落的块引用</h4><p>我们只需要为段落之间的空白行也添加一个 <code>&gt;</code> 符号即可。<br></p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.  \n&gt;  \n&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.  </p>\n<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>\n</blockquote>\n<h4 id=\"嵌套块引用\"><a href=\"#嵌套块引用\" class=\"headerlink\" title=\"嵌套块引用\"></a>嵌套块引用</h4><p>块引用还可以嵌套。再要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。</p>\n<pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.\n&gt;  \n&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>\n<blockquote>\n<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"带有其他元素的块引用\"><a href=\"#带有其他元素的块引用\" class=\"headerlink\" title=\"带有其他元素的块引用\"></a>带有其他元素的块引用</h4><p>块引用可以包含其他 Markdown 格式的元素。但并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。<br></p>\n<pre><code>&gt; #### The quarterly results look great!\n    &gt;\n&gt; - Revenue was off the chart.\n&gt; - Profits were higher than ever.\n&gt;\n&gt;  *Everything* is going according to **plan**.\n</code></pre>\n<p>渲染效果如下：<br></p>\n<blockquote>\n<h4 id=\"The-quarterly-results-look-great\"><a href=\"#The-quarterly-results-look-great\" class=\"headerlink\" title=\"The quarterly results look great!\"></a>The quarterly results look great!</h4><ul>\n<li>Revenue was off the chart.</li>\n<li>Profits were higher than ever.</li>\n</ul>\n<p> <em>Everything</em> is going according to <strong>plan</strong>.</p>\n</blockquote>\n<h3 id=\"6-列表语法\"><a href=\"#6-列表语法\" class=\"headerlink\" title=\"6. 列表语法\"></a>6. 列表语法</h3><p>我们可以将多个条目组织成有序或无序列表。</p>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><p>要创建有序列表，只需要在每个列表项前添加数字并紧跟一个英文句号。<br><br>需要注意的是，数字和英文句号与列表项之间需要使用空格分隔。<br><br>列表中的项的数字不需要有序，但列表会以第一项的数字作为起始序号为整个列表编码序号。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>1. First item</code><br><code>2. Second item</code><br><code>3. Third item</code><br><code>4. Fourth item</code></td>\n<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>\n<td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>\n</tr>\n<tr>\n<td><code>2. First item</code><br><code>5. Second item</code><br><code>9. Third item</code><br><code>3. Fourth item</code></td>\n<td><code>&lt;ol&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code></td>\n<td><ol start=\"2\"><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td>\n</tr>\n</tbody></table>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><p>要创建无序列表，只需要在每个列表项前添加破折号( <code>-</code> )即可。<br><br>同时你可以通过使用缩进来实现列表项的嵌套<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>- First item</code><br><code>- Second item</code><br><code> - Third item</code><br><code>- Fourth item</code></td>\n<td><code>&lt;ul&gt;</code><br><code>&lt;li&gt;First item&lt;/li&gt;</code><br><code>&lt;li&gt;Second item&lt;/li&gt;</code><br><code>&lt;ul&gt;</code><br><code>&lt;li&gt;Third item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code><br><code>&lt;li&gt;Fourth item&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code></td>\n<td><ul><li>First item</li><li>Second item</li><ul><li>Third item</li></ul><li>Fourth item</li></ul></td>\n</tr>\n</tbody></table>\n<p>至于 Markdown 语法中有序列表是否可以做嵌套读者可以自己实践一下。<br></p>\n<h4 id=\"在列表中嵌套其他元素\"><a href=\"#在列表中嵌套其他元素\" class=\"headerlink\" title=\"在列表中嵌套其他元素\"></a>在列表中嵌套其他元素</h4><p>要在保留列表连续性的同时在列表中添加另一种元素，可以将该元素缩进四个空格或一个制表符。<br><br>简单的，我们可以在列表中嵌套段落、引用块、代码块、图片等，也可以在有序列表中嵌套无序列表。<br></p>\n<ol>\n<li><p>Open the file.</p>\n</li>\n<li><p>Find the following code block on line 21:</p>\n<pre><code> &lt;html&gt;\n  &lt;head&gt;\n   &lt;title&gt;Text&lt;/title&gt;\n  &lt;/head&gt;\n &lt;/html&gt;\n</code></pre>\n</li>\n<li><p>Update the title to match the name of your website.</p>\n</li>\n</ol>\n<h3 id=\"7-代码语法\"><a href=\"#7-代码语法\" class=\"headerlink\" title=\"7. 代码语法\"></a>7. 代码语法</h3><p>要将单词或短语表示为代码，你可以将它们包裹在反引号( <code>`</code>)中。<br></p>\n<table>\n<thead>\n<tr>\n<th>Markdown语法</th>\n<th>HTML</th>\n<th>预览效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>At he command prompt, type `nano`.</code></td>\n<td><code>At he command prompt, type&lt;code&gt;nano&lt;/code&gt;.</code></td>\n<td>At he command prompt, type <code>nano</code>.</td>\n</tr>\n</tbody></table>\n<h4 id=\"转义反引号\"><a href=\"#转义反引号\" class=\"headerlink\" title=\"转义反引号\"></a>转义反引号</h4><p>如果你要表示为代码的单词或短语中包含反引号，则可以通过将单词或短语包裹中双反引号(<code>``</code>)中。<br><br>注意，请不要将反引号和双反引号拼接在一起，那样子 Markdown 会识别不出来的！<br></p>\n<table>\n <tr>\n  <th>Markdown语法</th>\n  <th>HTML</th>\n  <th>预览效果</th>\n </tr>\n <tr>\n  <td><code>``Use `code` in your Markdown file.``</code></td>\n  <td><code>&lt;code&gt;Use `code` in your Markdown file.&lt;/code&gt;</code></td>\n  <td><code>Use `code` in your Markdown file.</code></td>\n </tr>\n</table>\n\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><p>要创建代码块，只需要在代码块的每一行缩进四个空格或一个制表符。<br></p>\n<pre><code>    &lt;html&gt;\n     &lt;head&gt;\n     &lt;/head&gt;\n    &lt;/html&gt; \n</code></pre>\n<p>渲染效果如下：<br></p>\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n &lt;/head&gt;\n&lt;/html&gt; \n</code></pre>\n<p>在 Markdown 的扩展语法中，还提供了一种不用缩进就可以创建代码块的方式。<br></p>\n<h3 id=\"8-分隔线语法\"><a href=\"#8-分隔线语法\" class=\"headerlink\" title=\"8. 分隔线语法\"></a>8. 分隔线语法</h3><p>要创建分隔线，只需要在单独的一行上使用三个或多个星号( <code>***</code> )、破折号( <code>---</code> )、下划线( <code>___</code> )，注意三种不能混用。<br></p>\n<pre><code>***\n---\n——————\n</code></pre>\n<p>以上三种分隔线的渲染效果是一致的：<br></p>\n<hr>\n<p>为了兼容性，最好在分隔线前后均添加空白行。<br></p>\n<h3 id=\"9-链接语法\"><a href=\"#9-链接语法\" class=\"headerlink\" title=\"9. 链接语法\"></a>9. 链接语法</h3><p>Markdown 的链接语法如下：<br></p>\n<pre><code>[超链接显示名](超链接地址 “超链接 title ”)\n</code></pre>\n<p>其中超链接 title 是可选的，添加 title 的效果为鼠标悬浮在链接上时会文字。注意超链接 title 和地址之间要用空格分隔。<br></p>\n<pre><code>这是一个链接[Markdown语法](https://markdown.com.cn &quot;官方教程&quot;)。\n</code></pre>\n<p>渲染效果如下：<br><br>这是一个链接 <a href=\"https://markdown.com.cn/\" title=\"官方教程\">Markdown语法</a>。<br><br>需要注意的是，如果你的地址中存在空格，那最好使用%20替换，否则可能存在兼容性问题。<br></p>\n<h4 id=\"网址和-Email-语法\"><a href=\"#网址和-Email-语法\" class=\"headerlink\" title=\"网址和 Email 语法\"></a>网址和 Email 语法</h4><p>如果你不需要为你的超链接地址设置额外的显示文本，你可以直接用尖括号建起包裹变成超链接。<br></p>\n<pre><code>&lt;https://markdown.com.cn&gt;\n&lt;fake@example.com&gt;\n</code></pre>\n<p>渲染效果如下：<br><br><a href=\"https://markdown.com.cn/\">https://markdown.com.cn</a><br><a href=\"mailto:&#102;&#97;&#107;&#101;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;\">&#102;&#97;&#107;&#101;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p>\n<h4 id=\"带格式的链接\"><a href=\"#带格式的链接\" class=\"headerlink\" title=\"带格式的链接\"></a>带格式的链接</h4><p>你可以使用一些格式强调你的链接，比如粗体和斜体。<br></p>\n<pre><code>I love supporting the **[EFF](https://eff.org)**.\nI love supporting the *[EFF](https://eff.org)*.\n</code></pre>\n<p>I love supporting the <strong><a href=\"https://eff.org/\">EFF</a></strong>.<br>I love supporting the <em><a href=\"https://eff.org/\">EFF</a></em>.<br>事实上用粗体强调链接并不算太好的注意，对吗！<br><br>除此之外，你也可以用代码格式强调链接。其语法与上述不同，它需要你在中括号中用代码语法包裹链接显示名。<br></p>\n<pre><code>I love supporting the [`EFF`](https://eff.org)\n</code></pre>\n<p>I love supporting the <a href=\"https://eff.org/\"><code>EFF</code></a></p>\n<h4 id=\"引用类型链接\"><a href=\"#引用类型链接\" class=\"headerlink\" title=\"引用类型链接\"></a>引用类型链接</h4><p>这种链接格式多用于文献写中，由于不常用，故不在此记录。需要时查阅官网教程即可。<br></p>\n<h3 id=\"10-图片语法\"><a href=\"#10-图片语法\" class=\"headerlink\" title=\"10. 图片语法\"></a>10. 图片语法</h3><p>图片语法与链接语法极为相似，仅仅只是在链接语法前增加一个感叹号( <code>!</code> )。<br></p>\n<pre><code>![图片名](图片地址 \"图片 title \")</code></pre><br>\n\n<p><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403142336781.png?raw=true\" title=\"这是 title\"><br><br>当鼠标悬浮在图片上时，则会显示图片 title。<br></p>\n<h4 id=\"带链接的图片\"><a href=\"#带链接的图片\" class=\"headerlink\" title=\"带链接的图片\"></a>带链接的图片</h4><p>给图片增加链接，仅需要将图片的 Markdown 放在链接的中括号中即可。<br></p>\n<pre><code>[![沙漠中的岩石图片](https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true \"Shiprock\")](https://markdown.com.cn)</code></pre><br>\n<p><a href=\"https://markdown.com.cn/\"><img src=\"https://github.com/illusorycat/MyPictureBase/blob/main/image/202403191909796.png?raw=true\" alt=\"沙漠中的岩石图片\" title=\"Shiprock\"></a><br></p>\n<h3 id=\"11-转义字符语法\"><a href=\"#11-转义字符语法\" class=\"headerlink\" title=\"11. 转义字符语法\"></a>11. 转义字符语法</h3><p>转义字符语法用于显示原本用于格式化 Markdown文档的字符，只需要在字符签名添加反斜杠字符即可。</p>\n<pre><code>\\*Without the backslash, this would be a bullet in an unordered list.\n</code></pre>\n<p>渲染效果如下：<br><br>*Without the backslash, this would be a bullet in an unordered list.</p>\n<h4 id=\"可转移的字符\"><a href=\"#可转移的字符\" class=\"headerlink\" title=\"可转移的字符\"></a>可转移的字符</h4><p>以下列出的字符都可以通过增加反斜杠字符来实现转义。<br></p>\n<table>\n <tr><th>Character</tr>\n <tr><td>\\</tr>\n <tr><td>`</tr>\n <tr><td>*</tr>\n <tr><td>_</tr>\n <tr><td>{}</tr>\n <tr><td>[]</tr>\n <tr><td>()</tr>\n <tr><td>#</tr>\n <tr><td>+</tr>\n <tr><td>-</tr>\n <tr><td>.</tr>\n <tr><td>!</tr>\n <tr><td>|</tr>\n</table>\n\n<h3 id=\"12-内嵌-HTML-标签\"><a href=\"#12-内嵌-HTML-标签\" class=\"headerlink\" title=\"12. 内嵌 HTML 标签\"></a>12. 内嵌 HTML 标签</h3><p>Markdown 支持内嵌 HTML 标签。<br>对于 HTML 的行级内联标签如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>不受限制，可以中 Markdown 的段落、列表或者标题中任意使用。<br><br>但是对于区块标签如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行，以便与内容区分。<br>同时， Markdown 语法无法在 HTML 区块中进行处理。也就是说，你无法在 HTML 区块中使用 Markdown 语法。<br></p>\n<h1 id=\"3\">Markdown 扩展语法</h1>\n\n<p>适当使用扩展语法可以更好的充实你的文档。但是，请注意，并不是所有扩展语法都被支持，也并不是所有的处理器都支持你使用的扩展语法。<br></p>\n<h3 id=\"1-表格\"><a href=\"#1-表格\" class=\"headerlink\" title=\"1. 表格\"></a>1. 表格</h3><p>我们使用管道( <code>|</code> )分隔每列，使用至少三个连字符( <code>---</code>) 创建分隔标题和内容。<br></p>\n<pre><code>| Syntax     | Description|\n| -----------| -----------|\n| Header     | Title      |\n| Paragraph  | Text       |\n</code></pre>\n<p>呈现的输出如下:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody></table>\n<p><strong>Tip:</strong> 很显然，手动敲这一大串语法很麻烦，我们可以使用 <a href=\"https://www.tablesgenerator.com/markdown_tables\">Markdown Tables Generator</a> 。只需要使用图形界面构建表，然后将生成的 Markdown 格式的文本复制到你想要的地方即可。</p>\n<h4 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h4><p>我们可以中标题行中使用冒号( <code>:</code>) 来设置该列的文本对齐方式。</p>\n<pre><code>| Syntax    | Description |   Test Text |\n| :---      | :---:       |        ---: |\n| Header    |    TItle    | Here&#39;s this |\n| Paragraph |     Text    |    And more |\n</code></pre>\n<p>呈现的输出如下所示：<br></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Syntax</th>\n<th align=\"center\">Description</th>\n<th align=\"right\">Test Text</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Header</td>\n<td align=\"center\">TItle</td>\n<td align=\"right\">Here’s this</td>\n</tr>\n<tr>\n<td align=\"left\">Paragraph</td>\n<td align=\"center\">Text</td>\n<td align=\"right\">And more</td>\n</tr>\n</tbody></table>\n<h4 id=\"格式化表格中的文字\"><a href=\"#格式化表格中的文字\" class=\"headerlink\" title=\"格式化表格中的文字\"></a>格式化表格中的文字</h4><p>我们可以在表格中添加链接，代码(不支持代码块)和强调。<br></p>\n<h4 id=\"在表中显示管道字符\"><a href=\"#在表中显示管道字符\" class=\"headerlink\" title=\"在表中显示管道字符\"></a>在表中显示管道字符</h4><p>我们可以使用表格的 HTML 字符代码( <code>&amp;#124;</code> ) 在表中显示管道( <code>|</code> )字符。<br></p>\n<pre><code>| Character |\n| ---       |\n| &amp;#124;    |\n</code></pre>\n<p>呈现的输出如下: <br></p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#124;</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-围栏代码块\"><a href=\"#2-围栏代码块\" class=\"headerlink\" title=\"2. 围栏代码块\"></a>2. 围栏代码块</h3><p>有时使用缩进来创建代码块很不方便。这时我们可以尝试使用围栏代码块语法。<br>在代码块前后的行使用三个反引号( <code>```</code> ) 或三个波浪号( <code>~~~</code> )。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>呈现的输出如下:<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和在代码行中显示反引号一样，在代码块中显示反引号同样不能仅靠转义符( <code>\\</code> )。<br><br>在代码块中显示反引号，你需要将代码块包裹在四个反引号之间。<br></p>\n<h4 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h4><p>许多 Markdown 处理器都支持维码代码块的语法突出显示，只需要在代码块的反引号旁边指定一种语言。<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;firstName&quot;: &quot;John&quot;,</span><br><span class=\"line\">  &quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class=\"line\">  &quot;age&quot;: 25</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>呈现效果如下:<br></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;firstName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lastName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Smith&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-标题编号\"><a href=\"#3-标题编号\" class=\"headerlink\" title=\"3. 标题编号\"></a>3. 标题编号</h3><p>许多 Markdown 处理器支持标题的自定义 ID 。<br></p>\n<pre><code>### My Great Heading &#123;#custom-id&#125;\n</code></pre>\n<p>HTML 语法如下:<br></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接到标题-ID\"><a href=\"#链接到标题-ID\" class=\"headerlink\" title=\"链接到标题 ID\"></a>链接到标题 ID</h4><p>我们可以创建链接语法链接到文件中具有自定义 ID 的标题。<br></p>\n<pre><code>[Heading IDs](#heading-ids)\n</code></pre>\n<p>HTML 语法如下:<br></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;custom-id&quot;</span>&gt;</span>My Great Heading<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他网站可以通过将自定义标题 ID 添加到我特的完整 URL (例如 <code>[Heading IDs](url#custom-id)</code> ) 来链接到标题。<br></p>\n<h3 id=\"4-定义列表\"><a href=\"#4-定义列表\" class=\"headerlink\" title=\"4. 定义列表\"></a>4. 定义列表</h3><p>在基本语法中我们介绍了列表，包括有序列表和无序列表。现在我们介绍另外一种列表，定义列表。<br><br>创建定义列表的语法是，在第一行键入术语。在下一行，键入一个冒号，后跟一个空格和定义。<br></p>\n<pre><code>First Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<p>HTML 看起来像这样:<br></p>\n<pre><code>&lt;dl&gt;\n &lt;dt&gt;First Term&lt;/dt&gt;\n &lt;dd&gt;This is the definition of the first term.&lt;/dd&gt;\n &lt;dt&gt;Second Term&lt;/dt&gt;\n &lt;dd&gt;This is one definition of the second term.&lt;/dd&gt;\n &lt;dd&gt;This is another definition of the second term.&lt;/dd&gt;\n</code></pre>\n<p>呈现的输出如下所示：<br></p>\n<dl><dt>First Term</dt><dd>This is the definition of the first term.</dd></dl><dl><dt>Second Term<br>: This is one definition of the second term.</dt><dd>This is another definition of the second term.</dd></dl><p>需要注意的是， Markdown 语法中，前一个定义术语的内容与后一个定义术语直接需要用一个空行隔开。<br></p>\n<h3 id=\"5-删除线\"><a href=\"#5-删除线\" class=\"headerlink\" title=\"5. 删除线\"></a>5. 删除线</h3><p>我们可以在单词前后使用两个波浪号( <code>~~</code> ) 来创建删除线的效果。<br></p>\n<pre><code>~~世界是平坦的。~~ 我们现在知道世界是圆的。\n</code></pre>\n<p><del>世界是平坦的。</del> 我们现在知道世界是圆的。<br></p>\n<h3 id=\"6-任务列表语法\"><a href=\"#6-任务列表语法\" class=\"headerlink\" title=\"6. 任务列表语法\"></a>6. 任务列表语法</h3><p>这次我们介绍另一种新的列表语法，任务列表。<br><br>要创建任务列表，我们需要在任务列表项前添加破折号( <code>-</code> )和方括号( <code>[]</code> )。破折号、方括号和列表项之间都要使用空格隔开。<br><br>如果你想勾选任务，则在方括号之间添加 <code>x</code> 。<br></p>\n<pre><code>- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n</code></pre>\n<p>呈现的输出如下: <br></p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Write the press release</li>\n<li><input disabled=\"\" type=\"checkbox\"> Update the website</li>\n<li><input disabled=\"\" type=\"checkbox\"> Contact the media</li>\n</ul>\n<h3 id=\"7-使用-Emoji-表情\"><a href=\"#7-使用-Emoji-表情\" class=\"headerlink\" title=\"7. 使用 Emoji 表情\"></a>7. 使用 Emoji 表情</h3><p>我们可以简单地将表情符号复制并粘贴到 Markdown 格式的文本中，或者键入 emoji shortcodes 。<br></p>\n<h4 id=\"复制和粘贴表情符号\"><a href=\"#复制和粘贴表情符号\" class=\"headerlink\" title=\"复制和粘贴表情符号\"></a>复制和粘贴表情符号</h4><p>我们可以简单地从 <a href=\"https://emojipedia.org/\">Emojipedia</a> 等来源复制表情符号。<br><br><strong>Tip:</strong> 如果你使用的是静态网站生成器，请确保将 HTML 页面编码为 UTF-8 。<br></p>\n<h4 id=\"使用表情符号简码\"><a href=\"#使用表情符号简码\" class=\"headerlink\" title=\"使用表情符号简码\"></a>使用表情符号简码</h4><p>一些 Markdown 应用程序允许通过键入表情符号简码来插入表情符号。这同样意味着表情符号简码因应用程序而异。<br><br>表情符号简码以冒号开头和结尾。<br></p>\n<pre><code>去露营了！ :tent: 很快回来。\n真好笑！ :joy:\n</code></pre>\n<p>去露营了！ :tent: 很快回来。<br><br>真好笑！ :joy: <br><br><strong>Tip:</strong> 你可以使用此<a href=\"https://gist.github.com/rxaviers/7360908\">表情符号简码列表</a>。</p>\n"},{"title":"Flutter 入门指引 Ⅰ","date":"2024-05-20T08:55:02.000Z","_content":"# 目录\n[前言](#1)\n[开发环境搭建](#2)\n[后续章节概述](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本文基于掘金小册[《Flutter 入门教程》](https://juejin.cn/book/7212822723330834487)，是笔者学习了该小册后的记录。<br>\n该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br>\n由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第一篇，主要讲述 Flutter 开发环境的搭建，以及后续文章内容的概览。<br>\n\n<h1 id=\"2\">开发环境搭建</h1>\n\n笔者的环境为 macmini 主机，系统为 macOS 13.6.4 。开发环境搭建主要遵从了 Flutter 的[指南](https://docs.flutter.dev/get-started/install)。目前笔者使用的开发环境是 MacOS 下的 iOS 开发环境和 Android 环境，Flutter 版本为 stable 渠道的 3.19.6 。\n本文默认使用的 sheel为 zsh 。<br>\n\n## iOS 环境\n#### 开发工具\n下载并安装 Xcode 15 和 CocoaPods 1.13 。在安装 Xcode 时一般会同步安装 Git 2.27 或更高版本，如果没有请手动安装。<br>\n安装 Xcode 后最好打开并运行一个简单的程序，以使你安装相关的需要，如果真的有的话。<br>\n安装 CocoaPods 很简单，运行下述语句即可:<br>\n```shell\nsudo gem install cocoapods\n```\n安装完成之后最好设置一下环境变量：<br>\n\n- 打开 zsh 环境变量文件：\n    ```shell\n    vi ~/.zshenv\n    ```\n- 在末尾添加下述语句：\n    ```shell\n    export PATH=$HOME/.gem/bin:$PATH\n    ```\n\n#### 文本编辑器\n笔者选用的是 VS Code 。<br>\n在 VS Code 中增加扩展 **Flutter** 。当你安装该扩展时，会默认帮你一起安装 **Dart** 扩展，如果没有请手动安装。<br>\n#### Flutter SDK\n\n1. 在 VS Code 中打开命令面板（Command + shift + P）\n2. 输入 flutter ，选择 Flutter: New Project\n\n这时 VS Code 会提醒在本地找到 Flutter SDK ，你可以选择 **Download SDK** ，下载 SDK 到你想要保存到目录下。<br>\n下载完成时会提示你是否添加 Flutter SDK 到环境变量中，请最好选择是。<br>\n重启 VS Code 你就能看到 Flutter SDK 已经准备就绪。<br>\n##### 配置 Xcode \n签署 Xcode 许可协议：<br>\n```shell\nsudo xcodebuild -license\n```\n现在，你可以在 iOS 模拟器或真机上运行 Flutter 项目了。<br>\n## 安卓环境\n安卓环境是在上述 iOS 环境搭建的基础上继续添加。<br>\n#### 开发工具\n下载并安装 Android Studio。启动 Android Studio 并安装提示操作。<br>\n确保安装以下组件，如果在初始指引中没有安装的，可以后续在 Android Studio 中继续安装：<br>\n\n- Android SDK Platform, API 34.0.0\n- Android SDK Command-line Tools\n- Android SDK Build-Tools\n- Android SDK Platform-Tools\n- Android Emulator\n\n#### 配置 Android\n运行以下指令启用签名许可证：<br>\n```shell\nflutter doctor --android-licenses\n```\n## 故障排查\n在终端运行如下指令：<br>\n```shell\nflutter doctor\n```\n指令结果应该如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201921882.png)\n#### 替换 maven 访问源\n在国内访问 maven 总是很困难，所以最好是将 maven 的访问源换成国内镜像。<br>\n\n1. 打开 Flutter 的安装目录/packages/flutter_tools/lib/src/ 下的 http_host_validator.dart 文件。<br>\n    ![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201925547.png)\n2. 将其中 maven 的访问源改为你喜欢的国内镜像源，笔者使用的是国内阿里云的源：<br>\n    ![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201927774.png)\n3. 删除 flutter 安装目录/bin/cache 文件夹\n4. 再次执行 flutter doctor\n\n事实上，除了 maven ，gradle 的访问也比较麻烦，但好在它只需要挂一下香港的网络节点一般都可以访问。<br>\n\n<h1 id=\"3\">后续章节概述</h1>\n\n对于开发环境的搭建就讲到这了，后面会直接开始 Flutter 项目实践，需要读者至少有 Dart 语言的基础，可以去[此处](https://illusorycat.github.io/2024/05/20/Dart-brief/)了解。<br>\n接下来的文章会分别讲述三个小项目，猜数字、电子木鱼以及白板绘制。在完成这三个项目后，我们还会将这三个项目结合起来，简单讲述一些进阶内容，比如数据持久化、网络交互等。<br>","source":"_posts/Start-with-Flutter-Ⅰ.md","raw":"---\ntitle: Flutter 入门指引 Ⅰ\ndate: 2024-05-20 16:55:02\ntags: 代码人生\n---\n# 目录\n[前言](#1)\n[开发环境搭建](#2)\n[后续章节概述](#3)\n\n<h1 id=\"1\">前言</h1>\n\n本文基于掘金小册[《Flutter 入门教程》](https://juejin.cn/book/7212822723330834487)，是笔者学习了该小册后的记录。<br>\n该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br>\n由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第一篇，主要讲述 Flutter 开发环境的搭建，以及后续文章内容的概览。<br>\n\n<h1 id=\"2\">开发环境搭建</h1>\n\n笔者的环境为 macmini 主机，系统为 macOS 13.6.4 。开发环境搭建主要遵从了 Flutter 的[指南](https://docs.flutter.dev/get-started/install)。目前笔者使用的开发环境是 MacOS 下的 iOS 开发环境和 Android 环境，Flutter 版本为 stable 渠道的 3.19.6 。\n本文默认使用的 sheel为 zsh 。<br>\n\n## iOS 环境\n#### 开发工具\n下载并安装 Xcode 15 和 CocoaPods 1.13 。在安装 Xcode 时一般会同步安装 Git 2.27 或更高版本，如果没有请手动安装。<br>\n安装 Xcode 后最好打开并运行一个简单的程序，以使你安装相关的需要，如果真的有的话。<br>\n安装 CocoaPods 很简单，运行下述语句即可:<br>\n```shell\nsudo gem install cocoapods\n```\n安装完成之后最好设置一下环境变量：<br>\n\n- 打开 zsh 环境变量文件：\n    ```shell\n    vi ~/.zshenv\n    ```\n- 在末尾添加下述语句：\n    ```shell\n    export PATH=$HOME/.gem/bin:$PATH\n    ```\n\n#### 文本编辑器\n笔者选用的是 VS Code 。<br>\n在 VS Code 中增加扩展 **Flutter** 。当你安装该扩展时，会默认帮你一起安装 **Dart** 扩展，如果没有请手动安装。<br>\n#### Flutter SDK\n\n1. 在 VS Code 中打开命令面板（Command + shift + P）\n2. 输入 flutter ，选择 Flutter: New Project\n\n这时 VS Code 会提醒在本地找到 Flutter SDK ，你可以选择 **Download SDK** ，下载 SDK 到你想要保存到目录下。<br>\n下载完成时会提示你是否添加 Flutter SDK 到环境变量中，请最好选择是。<br>\n重启 VS Code 你就能看到 Flutter SDK 已经准备就绪。<br>\n##### 配置 Xcode \n签署 Xcode 许可协议：<br>\n```shell\nsudo xcodebuild -license\n```\n现在，你可以在 iOS 模拟器或真机上运行 Flutter 项目了。<br>\n## 安卓环境\n安卓环境是在上述 iOS 环境搭建的基础上继续添加。<br>\n#### 开发工具\n下载并安装 Android Studio。启动 Android Studio 并安装提示操作。<br>\n确保安装以下组件，如果在初始指引中没有安装的，可以后续在 Android Studio 中继续安装：<br>\n\n- Android SDK Platform, API 34.0.0\n- Android SDK Command-line Tools\n- Android SDK Build-Tools\n- Android SDK Platform-Tools\n- Android Emulator\n\n#### 配置 Android\n运行以下指令启用签名许可证：<br>\n```shell\nflutter doctor --android-licenses\n```\n## 故障排查\n在终端运行如下指令：<br>\n```shell\nflutter doctor\n```\n指令结果应该如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201921882.png)\n#### 替换 maven 访问源\n在国内访问 maven 总是很困难，所以最好是将 maven 的访问源换成国内镜像。<br>\n\n1. 打开 Flutter 的安装目录/packages/flutter_tools/lib/src/ 下的 http_host_validator.dart 文件。<br>\n    ![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201925547.png)\n2. 将其中 maven 的访问源改为你喜欢的国内镜像源，笔者使用的是国内阿里云的源：<br>\n    ![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201927774.png)\n3. 删除 flutter 安装目录/bin/cache 文件夹\n4. 再次执行 flutter doctor\n\n事实上，除了 maven ，gradle 的访问也比较麻烦，但好在它只需要挂一下香港的网络节点一般都可以访问。<br>\n\n<h1 id=\"3\">后续章节概述</h1>\n\n对于开发环境的搭建就讲到这了，后面会直接开始 Flutter 项目实践，需要读者至少有 Dart 语言的基础，可以去[此处](https://illusorycat.github.io/2024/05/20/Dart-brief/)了解。<br>\n接下来的文章会分别讲述三个小项目，猜数字、电子木鱼以及白板绘制。在完成这三个项目后，我们还会将这三个项目结合起来，简单讲述一些进阶内容，比如数据持久化、网络交互等。<br>","slug":"Start-with-Flutter-Ⅰ","published":1,"updated":"2024-05-23T08:06:13.258Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biy000b6bqe4skifexu","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">开发环境搭建</a><br><a href=\"#3\">后续章节概述</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文基于掘金小册<a href=\"https://juejin.cn/book/7212822723330834487\">《Flutter 入门教程》</a>，是笔者学习了该小册后的记录。<br><br>该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br><br>由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第一篇，主要讲述 Flutter 开发环境的搭建，以及后续文章内容的概览。<br></p>\n<h1 id=\"2\">开发环境搭建</h1>\n\n<p>笔者的环境为 macmini 主机，系统为 macOS 13.6.4 。开发环境搭建主要遵从了 Flutter 的<a href=\"https://docs.flutter.dev/get-started/install\">指南</a>。目前笔者使用的开发环境是 MacOS 下的 iOS 开发环境和 Android 环境，Flutter 版本为 stable 渠道的 3.19.6 。<br>本文默认使用的 sheel为 zsh 。<br></p>\n<h2 id=\"iOS-环境\"><a href=\"#iOS-环境\" class=\"headerlink\" title=\"iOS 环境\"></a>iOS 环境</h2><h4 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>下载并安装 Xcode 15 和 CocoaPods 1.13 。在安装 Xcode 时一般会同步安装 Git 2.27 或更高版本，如果没有请手动安装。<br><br>安装 Xcode 后最好打开并运行一个简单的程序，以使你安装相关的需要，如果真的有的话。<br><br>安装 CocoaPods 很简单，运行下述语句即可:<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>安装完成之后最好设置一下环境变量：<br></p>\n<ul>\n<li>打开 zsh 环境变量文件：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshenv</span><br></pre></td></tr></table></figure></li>\n<li>在末尾添加下述语句：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/.gem/bin:$PATH</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"文本编辑器\"><a href=\"#文本编辑器\" class=\"headerlink\" title=\"文本编辑器\"></a>文本编辑器</h4><p>笔者选用的是 VS Code 。<br><br>在 VS Code 中增加扩展 <strong>Flutter</strong> 。当你安装该扩展时，会默认帮你一起安装 <strong>Dart</strong> 扩展，如果没有请手动安装。<br></p>\n<h4 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h4><ol>\n<li>在 VS Code 中打开命令面板（Command + shift + P）</li>\n<li>输入 flutter ，选择 Flutter: New Project</li>\n</ol>\n<p>这时 VS Code 会提醒在本地找到 Flutter SDK ，你可以选择 <strong>Download SDK</strong> ，下载 SDK 到你想要保存到目录下。<br><br>下载完成时会提示你是否添加 Flutter SDK 到环境变量中，请最好选择是。<br><br>重启 VS Code 你就能看到 Flutter SDK 已经准备就绪。<br></p>\n<h5 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h5><p>签署 Xcode 许可协议：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>现在，你可以在 iOS 模拟器或真机上运行 Flutter 项目了。<br></p>\n<h2 id=\"安卓环境\"><a href=\"#安卓环境\" class=\"headerlink\" title=\"安卓环境\"></a>安卓环境</h2><p>安卓环境是在上述 iOS 环境搭建的基础上继续添加。<br></p>\n<h4 id=\"开发工具-1\"><a href=\"#开发工具-1\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>下载并安装 Android Studio。启动 Android Studio 并安装提示操作。<br><br>确保安装以下组件，如果在初始指引中没有安装的，可以后续在 Android Studio 中继续安装：<br></p>\n<ul>\n<li>Android SDK Platform, API 34.0.0</li>\n<li>Android SDK Command-line Tools</li>\n<li>Android SDK Build-Tools</li>\n<li>Android SDK Platform-Tools</li>\n<li>Android Emulator</li>\n</ul>\n<h4 id=\"配置-Android\"><a href=\"#配置-Android\" class=\"headerlink\" title=\"配置 Android\"></a>配置 Android</h4><p>运行以下指令启用签名许可证：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure>\n<h2 id=\"故障排查\"><a href=\"#故障排查\" class=\"headerlink\" title=\"故障排查\"></a>故障排查</h2><p>在终端运行如下指令：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor</span><br></pre></td></tr></table></figure>\n<p>指令结果应该如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201921882.png\"></p>\n<h4 id=\"替换-maven-访问源\"><a href=\"#替换-maven-访问源\" class=\"headerlink\" title=\"替换 maven 访问源\"></a>替换 maven 访问源</h4><p>在国内访问 maven 总是很困难，所以最好是将 maven 的访问源换成国内镜像。<br></p>\n<ol>\n<li>打开 Flutter 的安装目录&#x2F;packages&#x2F;flutter_tools&#x2F;lib&#x2F;src&#x2F; 下的 http_host_validator.dart 文件。<br><br> <img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201925547.png\"></li>\n<li>将其中 maven 的访问源改为你喜欢的国内镜像源，笔者使用的是国内阿里云的源：<br><br> <img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201927774.png\"></li>\n<li>删除 flutter 安装目录&#x2F;bin&#x2F;cache 文件夹</li>\n<li>再次执行 flutter doctor</li>\n</ol>\n<p>事实上，除了 maven ，gradle 的访问也比较麻烦，但好在它只需要挂一下香港的网络节点一般都可以访问。<br></p>\n<h1 id=\"3\">后续章节概述</h1>\n\n<p>对于开发环境的搭建就讲到这了，后面会直接开始 Flutter 项目实践，需要读者至少有 Dart 语言的基础，可以去<a href=\"https://illusorycat.github.io/2024/05/20/Dart-brief/\">此处</a>了解。<br><br>接下来的文章会分别讲述三个小项目，猜数字、电子木鱼以及白板绘制。在完成这三个项目后，我们还会将这三个项目结合起来，简单讲述一些进阶内容，比如数据持久化、网络交互等。<br></p>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#1\">前言</a><br><a href=\"#2\">开发环境搭建</a><br><a href=\"#3\">后续章节概述</a></p>\n<h1 id=\"1\">前言</h1>\n\n<p>本文基于掘金小册<a href=\"https://juejin.cn/book/7212822723330834487\">《Flutter 入门教程》</a>，是笔者学习了该小册后的记录。<br><br>该记录仅作为知识记录，用于帮助笔者在日后快速回忆 Flutter 的使用。<br><br>由于该小册内容较多，笔者在此将其输出为多篇文章。本文是第一篇，主要讲述 Flutter 开发环境的搭建，以及后续文章内容的概览。<br></p>\n<h1 id=\"2\">开发环境搭建</h1>\n\n<p>笔者的环境为 macmini 主机，系统为 macOS 13.6.4 。开发环境搭建主要遵从了 Flutter 的<a href=\"https://docs.flutter.dev/get-started/install\">指南</a>。目前笔者使用的开发环境是 MacOS 下的 iOS 开发环境和 Android 环境，Flutter 版本为 stable 渠道的 3.19.6 。<br>本文默认使用的 sheel为 zsh 。<br></p>\n<h2 id=\"iOS-环境\"><a href=\"#iOS-环境\" class=\"headerlink\" title=\"iOS 环境\"></a>iOS 环境</h2><h4 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>下载并安装 Xcode 15 和 CocoaPods 1.13 。在安装 Xcode 时一般会同步安装 Git 2.27 或更高版本，如果没有请手动安装。<br><br>安装 Xcode 后最好打开并运行一个简单的程序，以使你安装相关的需要，如果真的有的话。<br><br>安装 CocoaPods 很简单，运行下述语句即可:<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>安装完成之后最好设置一下环境变量：<br></p>\n<ul>\n<li>打开 zsh 环境变量文件：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.zshenv</span><br></pre></td></tr></table></figure></li>\n<li>在末尾添加下述语句：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/.gem/bin:$PATH</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"文本编辑器\"><a href=\"#文本编辑器\" class=\"headerlink\" title=\"文本编辑器\"></a>文本编辑器</h4><p>笔者选用的是 VS Code 。<br><br>在 VS Code 中增加扩展 <strong>Flutter</strong> 。当你安装该扩展时，会默认帮你一起安装 <strong>Dart</strong> 扩展，如果没有请手动安装。<br></p>\n<h4 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h4><ol>\n<li>在 VS Code 中打开命令面板（Command + shift + P）</li>\n<li>输入 flutter ，选择 Flutter: New Project</li>\n</ol>\n<p>这时 VS Code 会提醒在本地找到 Flutter SDK ，你可以选择 <strong>Download SDK</strong> ，下载 SDK 到你想要保存到目录下。<br><br>下载完成时会提示你是否添加 Flutter SDK 到环境变量中，请最好选择是。<br><br>重启 VS Code 你就能看到 Flutter SDK 已经准备就绪。<br></p>\n<h5 id=\"配置-Xcode\"><a href=\"#配置-Xcode\" class=\"headerlink\" title=\"配置 Xcode\"></a>配置 Xcode</h5><p>签署 Xcode 许可协议：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>现在，你可以在 iOS 模拟器或真机上运行 Flutter 项目了。<br></p>\n<h2 id=\"安卓环境\"><a href=\"#安卓环境\" class=\"headerlink\" title=\"安卓环境\"></a>安卓环境</h2><p>安卓环境是在上述 iOS 环境搭建的基础上继续添加。<br></p>\n<h4 id=\"开发工具-1\"><a href=\"#开发工具-1\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h4><p>下载并安装 Android Studio。启动 Android Studio 并安装提示操作。<br><br>确保安装以下组件，如果在初始指引中没有安装的，可以后续在 Android Studio 中继续安装：<br></p>\n<ul>\n<li>Android SDK Platform, API 34.0.0</li>\n<li>Android SDK Command-line Tools</li>\n<li>Android SDK Build-Tools</li>\n<li>Android SDK Platform-Tools</li>\n<li>Android Emulator</li>\n</ul>\n<h4 id=\"配置-Android\"><a href=\"#配置-Android\" class=\"headerlink\" title=\"配置 Android\"></a>配置 Android</h4><p>运行以下指令启用签名许可证：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure>\n<h2 id=\"故障排查\"><a href=\"#故障排查\" class=\"headerlink\" title=\"故障排查\"></a>故障排查</h2><p>在终端运行如下指令：<br></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter doctor</span><br></pre></td></tr></table></figure>\n<p>指令结果应该如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201921882.png\"></p>\n<h4 id=\"替换-maven-访问源\"><a href=\"#替换-maven-访问源\" class=\"headerlink\" title=\"替换 maven 访问源\"></a>替换 maven 访问源</h4><p>在国内访问 maven 总是很困难，所以最好是将 maven 的访问源换成国内镜像。<br></p>\n<ol>\n<li>打开 Flutter 的安装目录&#x2F;packages&#x2F;flutter_tools&#x2F;lib&#x2F;src&#x2F; 下的 http_host_validator.dart 文件。<br><br> <img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201925547.png\"></li>\n<li>将其中 maven 的访问源改为你喜欢的国内镜像源，笔者使用的是国内阿里云的源：<br><br> <img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405201927774.png\"></li>\n<li>删除 flutter 安装目录&#x2F;bin&#x2F;cache 文件夹</li>\n<li>再次执行 flutter doctor</li>\n</ol>\n<p>事实上，除了 maven ，gradle 的访问也比较麻烦，但好在它只需要挂一下香港的网络节点一般都可以访问。<br></p>\n<h1 id=\"3\">后续章节概述</h1>\n\n<p>对于开发环境的搭建就讲到这了，后面会直接开始 Flutter 项目实践，需要读者至少有 Dart 语言的基础，可以去<a href=\"https://illusorycat.github.io/2024/05/20/Dart-brief/\">此处</a>了解。<br><br>接下来的文章会分别讲述三个小项目，猜数字、电子木鱼以及白板绘制。在完成这三个项目后，我们还会将这三个项目结合起来，简单讲述一些进阶内容，比如数据持久化、网络交互等。<br></p>\n"},{"title":"Swift 算法-1-哈希","date":"2024-05-23T03:01:33.000Z","_content":"# 目录\n[前言](#0)\n[两数之和](#1)\n[字母异位词分组](#49)\n[最长连续序列](#128)\n\n<h1 id=\"0\">前言</h1>\n\n本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br>\n本文的主题是哈希。<br>\n\n<h1 id=\"1\">两数之和</h1>\n\nLeetCode 1. 两数之和<br>\n## 题目\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>\n你可以按任意顺序返回答案。<br>\n## 解题思考\n题目中提到了可以假定每种输入只会对应一个答案，因此我们找到答案后立即返回。<br>\n题目要求每个元素只能使用一次，但是并没有说元素的值是否会重复。不过只本题中只有前者条件是有意义的。<br>\n暴力解法，遍历数组中的所有元素 `x` ，同时遍历剩余的元素 `y` ，判断 `x + y == target` 。<br>\n优化解法，在遍历数组元素 `x` 时，查找是否存在 `target - y` 。同时在编译时将元素 `x` 与它的下标 `index` 插入哈希表保存。<br>\n## 代码\n```Swift\nclass Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        var hashtable = [Int: Int]()\n        for (i, e) in nums.enumerated() {\n            if let v = hashtable[target - e] {\n                return [i, v]\n            }\n            hashtable[e] = i\n        }\n        return []\n    }\n}\n```\n\n<h1 id=\"49\">字母异位词分组</h1>\n\nLeetCode 49. 字母异位词分组<br>\n## 题目\n给你一个字符串数组，请你将**字母异位词**组合在一起。可以按任意顺序返回结果列表。<br>\n字母异位词是由重新排列源单词的所有字母得到的一个新单词。<br>\n## 解题思路\n字母异位词指两个字符串中，字母值和数量一致。<br>\n因此我们需要考虑怎么怎么表示一组字母异位词，最简单的方法就是用字符串的字典序字符串来表示.然后使用哈希表存储，最后再转换成数组输出。<br>\n## 代码\n```Swift\nclass Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        var hashList = [String: [String]]()\n        for str in strs {\n            let key = String(str.sorted())\n            if hashList[key] == nil {\n                hashList[key] = [str]\n            } else {\n                hashList[key]!.append(str)\n            }\n        }\n        return Array(hashList.values)\n    }\n}\n```\n\n<h1 id=\"128\">最长连续序列</h1>\n\nLeetCode 128. 最长连续序列<br>\n## 题目\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br>\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。<br>\n## 解题思路\n最长序列，也就是说我们要找出数组中的连续序列，并获得其中最大的长度。<br>\n题目并没有说数组元素不重复，因此我们要先去重，最简单的就是使用 Set 。<br>\n接着，我们要在数组中找到一个序列 `x, x+1, x+2,x+n` ，则该序列长度就是 `n` 。<br>\n暴力搜索，遍历每个元素 `x` ，然后通过 `+1` 查找序列。\n优化，因为暴力搜索会出现对序列的子序列重复查找。因此，我们先通过判断 `x-1` 是否中数组中，找到序列中的最小值，再开始查找整个序列，获取序列长度。<br>\n## 代码\n```Swift\nclass Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        var num_set = Set<Int>(nums)\n        \n        var longestStreak = 0\n        \n        for num in num_set {\n            if !num_set.contains(num - 1) {\n                var currentStreak = 1\n                var currentNum = num\n                \n                while num_set.contains(currentNum + 1) {\n                    currentNum = currentNum + 1\n                    currentStreak += 1\n                }\n                \n                longestStreak = max(longestStreak, currentStreak)\n            }\n        }\n        \n        return longestStreak\n    }\n}\n```","source":"_posts/Swift-Algorithm-1-Hash.md","raw":"---\ntitle: Swift 算法-1-哈希\ndate: 2024-05-23 11:01:33\ntags: Swift, 算法\n---\n# 目录\n[前言](#0)\n[两数之和](#1)\n[字母异位词分组](#49)\n[最长连续序列](#128)\n\n<h1 id=\"0\">前言</h1>\n\n本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br>\n本文的主题是哈希。<br>\n\n<h1 id=\"1\">两数之和</h1>\n\nLeetCode 1. 两数之和<br>\n## 题目\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>\n你可以按任意顺序返回答案。<br>\n## 解题思考\n题目中提到了可以假定每种输入只会对应一个答案，因此我们找到答案后立即返回。<br>\n题目要求每个元素只能使用一次，但是并没有说元素的值是否会重复。不过只本题中只有前者条件是有意义的。<br>\n暴力解法，遍历数组中的所有元素 `x` ，同时遍历剩余的元素 `y` ，判断 `x + y == target` 。<br>\n优化解法，在遍历数组元素 `x` 时，查找是否存在 `target - y` 。同时在编译时将元素 `x` 与它的下标 `index` 插入哈希表保存。<br>\n## 代码\n```Swift\nclass Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        var hashtable = [Int: Int]()\n        for (i, e) in nums.enumerated() {\n            if let v = hashtable[target - e] {\n                return [i, v]\n            }\n            hashtable[e] = i\n        }\n        return []\n    }\n}\n```\n\n<h1 id=\"49\">字母异位词分组</h1>\n\nLeetCode 49. 字母异位词分组<br>\n## 题目\n给你一个字符串数组，请你将**字母异位词**组合在一起。可以按任意顺序返回结果列表。<br>\n字母异位词是由重新排列源单词的所有字母得到的一个新单词。<br>\n## 解题思路\n字母异位词指两个字符串中，字母值和数量一致。<br>\n因此我们需要考虑怎么怎么表示一组字母异位词，最简单的方法就是用字符串的字典序字符串来表示.然后使用哈希表存储，最后再转换成数组输出。<br>\n## 代码\n```Swift\nclass Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        var hashList = [String: [String]]()\n        for str in strs {\n            let key = String(str.sorted())\n            if hashList[key] == nil {\n                hashList[key] = [str]\n            } else {\n                hashList[key]!.append(str)\n            }\n        }\n        return Array(hashList.values)\n    }\n}\n```\n\n<h1 id=\"128\">最长连续序列</h1>\n\nLeetCode 128. 最长连续序列<br>\n## 题目\n给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br>\n请你设计并实现时间复杂度为 O(n) 的算法解决此问题。<br>\n## 解题思路\n最长序列，也就是说我们要找出数组中的连续序列，并获得其中最大的长度。<br>\n题目并没有说数组元素不重复，因此我们要先去重，最简单的就是使用 Set 。<br>\n接着，我们要在数组中找到一个序列 `x, x+1, x+2,x+n` ，则该序列长度就是 `n` 。<br>\n暴力搜索，遍历每个元素 `x` ，然后通过 `+1` 查找序列。\n优化，因为暴力搜索会出现对序列的子序列重复查找。因此，我们先通过判断 `x-1` 是否中数组中，找到序列中的最小值，再开始查找整个序列，获取序列长度。<br>\n## 代码\n```Swift\nclass Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        var num_set = Set<Int>(nums)\n        \n        var longestStreak = 0\n        \n        for num in num_set {\n            if !num_set.contains(num - 1) {\n                var currentStreak = 1\n                var currentNum = num\n                \n                while num_set.contains(currentNum + 1) {\n                    currentNum = currentNum + 1\n                    currentStreak += 1\n                }\n                \n                longestStreak = max(longestStreak, currentStreak)\n            }\n        }\n        \n        return longestStreak\n    }\n}\n```","slug":"Swift-Algorithm-1-Hash","published":1,"updated":"2024-05-27T03:49:30.095Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biy000e6bqe1q3ch2br","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#1\">两数之和</a><br><a href=\"#49\">字母异位词分组</a><br><a href=\"#128\">最长连续序列</a></p>\n<h1 id=\"0\">前言</h1>\n\n<p>本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br><br>本文的主题是哈希。<br></p>\n<h1 id=\"1\">两数之和</h1>\n\n<p>LeetCode 1. 两数之和<br></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br><br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br><br>你可以按任意顺序返回答案。<br></p>\n<h2 id=\"解题思考\"><a href=\"#解题思考\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>题目中提到了可以假定每种输入只会对应一个答案，因此我们找到答案后立即返回。<br><br>题目要求每个元素只能使用一次，但是并没有说元素的值是否会重复。不过只本题中只有前者条件是有意义的。<br><br>暴力解法，遍历数组中的所有元素 <code>x</code> ，同时遍历剩余的元素 <code>y</code> ，判断 <code>x + y == target</code> 。<br><br>优化解法，在遍历数组元素 <code>x</code> 时，查找是否存在 <code>target - y</code> 。同时在编译时将元素 <code>x</code> 与它的下标 <code>index</code> 插入哈希表保存。<br></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">twoSum</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>], <span class=\"keyword\">_</span> <span class=\"params\">target</span>: <span class=\"type\">Int</span>) -&gt; [<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hashtable <span class=\"operator\">=</span> [<span class=\"type\">Int</span>: <span class=\"type\">Int</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i, e) <span class=\"keyword\">in</span> nums.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> v <span class=\"operator\">=</span> hashtable[target <span class=\"operator\">-</span> e] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, v]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hashtable[e] <span class=\"operator\">=</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"49\">字母异位词分组</h1>\n\n<p>LeetCode 49. 字母异位词分组<br></p>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个字符串数组，请你将<strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。<br><br>字母异位词是由重新排列源单词的所有字母得到的一个新单词。<br></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>字母异位词指两个字符串中，字母值和数量一致。<br><br>因此我们需要考虑怎么怎么表示一组字母异位词，最简单的方法就是用字符串的字典序字符串来表示.然后使用哈希表存储，最后再转换成数组输出。<br></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">groupAnagrams</span>(<span class=\"keyword\">_</span> <span class=\"params\">strs</span>: [<span class=\"type\">String</span>]) -&gt; [[<span class=\"type\">String</span>]] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hashList <span class=\"operator\">=</span> [<span class=\"type\">String</span>: [<span class=\"type\">String</span>]]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> str <span class=\"keyword\">in</span> strs &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key <span class=\"operator\">=</span> <span class=\"type\">String</span>(str.sorted())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hashList[key] <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                hashList[key] <span class=\"operator\">=</span> [str]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hashList[key]<span class=\"operator\">!</span>.append(str)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Array</span>(hashList.values)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"128\">最长连续序列</h1>\n\n<p>LeetCode 128. 最长连续序列<br></p>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br><br>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。<br></p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>最长序列，也就是说我们要找出数组中的连续序列，并获得其中最大的长度。<br><br>题目并没有说数组元素不重复，因此我们要先去重，最简单的就是使用 Set 。<br><br>接着，我们要在数组中找到一个序列 <code>x, x+1, x+2,x+n</code> ，则该序列长度就是 <code>n</code> 。<br><br>暴力搜索，遍历每个元素 <code>x</code> ，然后通过 <code>+1</code> 查找序列。<br>优化，因为暴力搜索会出现对序列的子序列重复查找。因此，我们先通过判断 <code>x-1</code> 是否中数组中，找到序列中的最小值，再开始查找整个序列，获取序列长度。<br></p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">longestConsecutive</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num_set <span class=\"operator\">=</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt;(nums)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> longestStreak <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> num_set &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"operator\">!</span>num_set.contains(num <span class=\"operator\">-</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> currentStreak <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> currentNum <span class=\"operator\">=</span> num</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">while</span> num_set.contains(currentNum <span class=\"operator\">+</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    currentNum <span class=\"operator\">=</span> currentNum <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">                    currentStreak <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                longestStreak <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(longestStreak, currentStreak)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> longestStreak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#1\">两数之和</a><br><a href=\"#49\">字母异位词分组</a><br><a href=\"#128\">最长连续序列</a></p>\n<h1 id=\"0\">前言</h1>\n\n<p>本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br><br>本文的主题是哈希。<br></p>\n<h1 id=\"1\">两数之和</h1>\n\n<p>LeetCode 1. 两数之和<br></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br><br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br><br>你可以按任意顺序返回答案。<br></p>\n<h2 id=\"解题思考\"><a href=\"#解题思考\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>题目中提到了可以假定每种输入只会对应一个答案，因此我们找到答案后立即返回。<br><br>题目要求每个元素只能使用一次，但是并没有说元素的值是否会重复。不过只本题中只有前者条件是有意义的。<br><br>暴力解法，遍历数组中的所有元素 <code>x</code> ，同时遍历剩余的元素 <code>y</code> ，判断 <code>x + y == target</code> 。<br><br>优化解法，在遍历数组元素 <code>x</code> 时，查找是否存在 <code>target - y</code> 。同时在编译时将元素 <code>x</code> 与它的下标 <code>index</code> 插入哈希表保存。<br></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">twoSum</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>], <span class=\"keyword\">_</span> <span class=\"params\">target</span>: <span class=\"type\">Int</span>) -&gt; [<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hashtable <span class=\"operator\">=</span> [<span class=\"type\">Int</span>: <span class=\"type\">Int</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i, e) <span class=\"keyword\">in</span> nums.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> v <span class=\"operator\">=</span> hashtable[target <span class=\"operator\">-</span> e] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, v]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hashtable[e] <span class=\"operator\">=</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"49\">字母异位词分组</h1>\n\n<p>LeetCode 49. 字母异位词分组<br></p>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个字符串数组，请你将<strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。<br><br>字母异位词是由重新排列源单词的所有字母得到的一个新单词。<br></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>字母异位词指两个字符串中，字母值和数量一致。<br><br>因此我们需要考虑怎么怎么表示一组字母异位词，最简单的方法就是用字符串的字典序字符串来表示.然后使用哈希表存储，最后再转换成数组输出。<br></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">groupAnagrams</span>(<span class=\"keyword\">_</span> <span class=\"params\">strs</span>: [<span class=\"type\">String</span>]) -&gt; [[<span class=\"type\">String</span>]] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hashList <span class=\"operator\">=</span> [<span class=\"type\">String</span>: [<span class=\"type\">String</span>]]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> str <span class=\"keyword\">in</span> strs &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> key <span class=\"operator\">=</span> <span class=\"type\">String</span>(str.sorted())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> hashList[key] <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                hashList[key] <span class=\"operator\">=</span> [str]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hashList[key]<span class=\"operator\">!</span>.append(str)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Array</span>(hashList.values)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"128\">最长连续序列</h1>\n\n<p>LeetCode 128. 最长连续序列<br></p>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br><br>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。<br></p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>最长序列，也就是说我们要找出数组中的连续序列，并获得其中最大的长度。<br><br>题目并没有说数组元素不重复，因此我们要先去重，最简单的就是使用 Set 。<br><br>接着，我们要在数组中找到一个序列 <code>x, x+1, x+2,x+n</code> ，则该序列长度就是 <code>n</code> 。<br><br>暴力搜索，遍历每个元素 <code>x</code> ，然后通过 <code>+1</code> 查找序列。<br>优化，因为暴力搜索会出现对序列的子序列重复查找。因此，我们先通过判断 <code>x-1</code> 是否中数组中，找到序列中的最小值，再开始查找整个序列，获取序列长度。<br></p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">longestConsecutive</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> num_set <span class=\"operator\">=</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt;(nums)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> longestStreak <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> num_set &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"operator\">!</span>num_set.contains(num <span class=\"operator\">-</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> currentStreak <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> currentNum <span class=\"operator\">=</span> num</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">while</span> num_set.contains(currentNum <span class=\"operator\">+</span> <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    currentNum <span class=\"operator\">=</span> currentNum <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">                    currentStreak <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                longestStreak <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(longestStreak, currentStreak)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> longestStreak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Swift 算法-1-双指针","date":"2024-05-25T10:19:14.000Z","_content":"# 目录\n[前言](#0)\n[移动零](#283)\n[盛最多水的容器](#11)\n[三数之和](#15)\n[接雨水](#42)\n\n<h1 id=\"0\">前言</h1>\n\n本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br>\n本文的主题是双指针。<br>\n\n<h1 id=\"283\">移动零</h1>\n\nLeetCode 283. 移动零<br>\n## 题目\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br>\n## 解题思考\n最直接的思路，遍历数组，遇到 0 时，使用冒泡法将 0 交换到数组末尾。使用冒泡是为了保存非零元素的相对顺序。<br>\n但是上述的时间复杂度是 O($n^2$)。<br>\n事实上，我们可以先找到数组中第一个 0 的位置，然后使用指针 1 指向零区间的头部，使用指针 2 指向零区间之后的第一个位置，表示零区间的尾部。这样子我们就形成了一个零区间。<br>\n然后从零区间尾部开始遍历。当找到 0 时，纳入零区间。当找到非零值时，将其与零区域的第一个元素交换，也就等价于移动零区间。<br>\n## 代码\n```Swift\nclass Solution {\n    func moveZeroes(_ nums: inout [Int]) {\n        var zeroBegin = nums.firstIndex(of: 0)\n        guard var zeroBegin else { return }\n        for i in (zeroBegin + 1)..<nums.count {\n            if nums[i] != 0 {\n                nums.swapAt(zeroBegin, i)\n                zeroBegin += 1\n            }\n        }\n    }\n}\n```\n\n<h1 id=\"11\">盛最多水的容器</h1>\n\nLeetCode 11. 盛最多水的容器<br>\n## 题目\n给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br>\n找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>\n返回容器可以储存的最大水量。<br>\n说明：你不能倾斜容器。<br>\n示例图如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271346208.png)\n## 解题思考\n使用一个变量 maxArea 存储可能的最大水量。<br>\n第一个可能的最大水量的第0条线 left 和最后一条线 right 组成的区域。最大水量公式是<br>\n$$maxArea = min(height[left], height[right]) * (right - left)$$<br>\n之后，不管是移动左指针还是移动右指针，其底边总是在缩短，所以最大水量如果能更大，只能是高在增大。<br>\n对于高而已，受到 height[left] 和 height[right] 其中更小值的制约。所以是移动指向更小值的那个指针。<br>\n## 代码\n```swift\nclass Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        var left = 0\n        var right = height.count - 1\n        var maxArea = 0\n        while left < right {\n            let curArea = min(height[left], height[right]) * (right - left)\n            maxArea = max(curArea, maxArea)\n            \n            if height[left] < height [right] {\n                left += 1\n            }\n            else {\n                right -= 1\n            }\n        }\n        return maxArea\n    }\n}\n```\n\n<h1 id=\"15\">三数之和</h1>\n\nLeetCode 15. 三数之和<br>\n## 题目\n给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请<br>\n你返回所有和为 0 且不重复的三元组。<br>\n注意：答案中不可以包含重复的三元组。<br>\n## 解题思考\n寻找三元组，先固定一个 i， 问题就可以简化为两数之和问题。但是，这儿的两数之和需要找出所有的可能性。<br>\n使用双指针 + 排序。首先对数组做递增排序。然后使用双指针，一个 left ， 一个 right 。如果 $nums[left] + nums[right] + nums[i] == 0$ ，则找到一个三元组。如果 $>0$ ，则 $right -= 1$ ，如果 $<0$ ，则 $left += 1$ 。<br>\n同时，题目要求不能包含重复的三元组，因此 $+= 1$ 一类的操作都要换成找到下一个不重复的元素。<br>\n同时，数组已经是递增的了，有一个优化操作，当 n\n## 代码\n```swift\nclass Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        var ans = [[Int]]()\n        let nums_sorted = nums.sorted()\n        var count = nums_sorted.count\n        for i in 0..<count - 2 {\n            if i == 0 || nums_sorted[i] != nums_sorted[i - 1] {\n                var left = i + 1\n                var right = count - 1\n                while left < right {\n                    let sum = nums_sorted[i] + nums_sorted[left] + nums_sorted[right]\n                    \n                    if sum == 0 {\n                        ans.append([nums_sorted[i], nums_sorted[left], nums_sorted[right]])\n\n                        repeat {\n                            left += 1\n                        } while left < right && nums_sorted[left] == nums_sorted[left - 1]\n                        repeat {\n                            right -= 1\n                        } while left < right && nums_sorted[right] == nums_sorted[right + 1]\n                    }\n                    else if sum > 0 {\n                        repeat {\n                            right -= 1\n                        } while left < right && nums_sorted[right] == nums_sorted[right + 1]\n                    } \n                    else {\n                        repeat {\n                            left += 1\n                        } while left < right && nums_sorted[left] == nums_sorted[left - 1]\n                    }\n                }\n            }\n        }\n        return ans\n    }\n}\n```\n\n<h1 id=\"42\">接雨水</h1>\n\nLeetCode 42. 接雨水<br>\n## 题目\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br>\n示例图如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271426890.png)\n## 解题思考\n使用双指针 left 和 right 。因为容量的限制因素是 $min(height[left], height[right])$ ，因此移动指向较小值的指针。<br>\n保存一个 leftMax 和 rightMax ，如果 $height[left] < height[right]$ , 则必有 $leftMax < rightMax$ ,那么 left 处可以存储的雨水量为 $leftMax - height[left]$，反之必然。因为我们移动指向较小值的指针。<br>\n同时使用 height[left] 和 height[right] 去更新 leftMax 和 rightMax 。<br>\n## 代码\n```swift\nclass Solution {\n    func trap(_ height: [Int]) -> Int {\n        if height.isEmpty { return 0 }\n        var left = 0\n        var right = height.count - 1\n        var leftMax = height[left]\n        var rightMax = height[right]\n        var capcity = 0\n        \n        while left < right {\n            if height[left] < height[right] {\n                capcity += leftMax - height[left]\n                left += 1\n                leftMax = max(leftMax, height[left])\n            }\n            else {\n                capcity += rightMax - height[right]\n                right -= 1\n                rightMax = max(rightMax, height[right])\n            }\n        }\n        \n        return capcity\n    }\n}\n```\n## 解法拓展\n本题还可以使用动态规划来实现。从双指针的解法来看，下标 i 处可以存储的雨水量取决于 i 处临近的左右两边最大值中的最小值。<br>\n我们可以使用两个数组 leftMax 和 rightMax 分别存储下标 i 处的左边最大值和右边最大值。<br>\n在建立 leftMax 和 rightMax 时就可以使用动态规划来。<br>\n```swift\nclass Solution {\n    func trap(_ height: [Int]) -> Int {\n        if height.isEmpty { return 0 }\n        \n        var leftMax = Array(repeating: 0, count: height.count)\n        leftMax[0] = height[0]\n        for i in 1..<height.count {\n            leftMax[i] = max(height[i], leftMax[i - 1])\n        }\n        \n        var rightMax = Array(repeating: 0, count: height.count)\n        rightMax[rightMax.count - 1] = height[height.count - 1]\n        for i in stride(from: height.count - 2, through: 0, by: -1) {\n            rightMax[i] = max(height[i], rightMax[i + 1])\n        }\n        \n        var capcity = 0\n        for i in 0..<height.count {\n            capcity += min(leftMax[i], rightMax[i]) - height[i]\n        }\n        \n        return capcity\n    }\n}\n```","source":"_posts/Swift-Algorithm-2-DoublePointer.md","raw":"---\ntitle: Swift 算法-1-双指针\ndate: 2024-05-25 18:19:14\ntags: Swift, 算法\n---\n# 目录\n[前言](#0)\n[移动零](#283)\n[盛最多水的容器](#11)\n[三数之和](#15)\n[接雨水](#42)\n\n<h1 id=\"0\">前言</h1>\n\n本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br>\n本文的主题是双指针。<br>\n\n<h1 id=\"283\">移动零</h1>\n\nLeetCode 283. 移动零<br>\n## 题目\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br>\n## 解题思考\n最直接的思路，遍历数组，遇到 0 时，使用冒泡法将 0 交换到数组末尾。使用冒泡是为了保存非零元素的相对顺序。<br>\n但是上述的时间复杂度是 O($n^2$)。<br>\n事实上，我们可以先找到数组中第一个 0 的位置，然后使用指针 1 指向零区间的头部，使用指针 2 指向零区间之后的第一个位置，表示零区间的尾部。这样子我们就形成了一个零区间。<br>\n然后从零区间尾部开始遍历。当找到 0 时，纳入零区间。当找到非零值时，将其与零区域的第一个元素交换，也就等价于移动零区间。<br>\n## 代码\n```Swift\nclass Solution {\n    func moveZeroes(_ nums: inout [Int]) {\n        var zeroBegin = nums.firstIndex(of: 0)\n        guard var zeroBegin else { return }\n        for i in (zeroBegin + 1)..<nums.count {\n            if nums[i] != 0 {\n                nums.swapAt(zeroBegin, i)\n                zeroBegin += 1\n            }\n        }\n    }\n}\n```\n\n<h1 id=\"11\">盛最多水的容器</h1>\n\nLeetCode 11. 盛最多水的容器<br>\n## 题目\n给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br>\n找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>\n返回容器可以储存的最大水量。<br>\n说明：你不能倾斜容器。<br>\n示例图如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271346208.png)\n## 解题思考\n使用一个变量 maxArea 存储可能的最大水量。<br>\n第一个可能的最大水量的第0条线 left 和最后一条线 right 组成的区域。最大水量公式是<br>\n$$maxArea = min(height[left], height[right]) * (right - left)$$<br>\n之后，不管是移动左指针还是移动右指针，其底边总是在缩短，所以最大水量如果能更大，只能是高在增大。<br>\n对于高而已，受到 height[left] 和 height[right] 其中更小值的制约。所以是移动指向更小值的那个指针。<br>\n## 代码\n```swift\nclass Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        var left = 0\n        var right = height.count - 1\n        var maxArea = 0\n        while left < right {\n            let curArea = min(height[left], height[right]) * (right - left)\n            maxArea = max(curArea, maxArea)\n            \n            if height[left] < height [right] {\n                left += 1\n            }\n            else {\n                right -= 1\n            }\n        }\n        return maxArea\n    }\n}\n```\n\n<h1 id=\"15\">三数之和</h1>\n\nLeetCode 15. 三数之和<br>\n## 题目\n给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请<br>\n你返回所有和为 0 且不重复的三元组。<br>\n注意：答案中不可以包含重复的三元组。<br>\n## 解题思考\n寻找三元组，先固定一个 i， 问题就可以简化为两数之和问题。但是，这儿的两数之和需要找出所有的可能性。<br>\n使用双指针 + 排序。首先对数组做递增排序。然后使用双指针，一个 left ， 一个 right 。如果 $nums[left] + nums[right] + nums[i] == 0$ ，则找到一个三元组。如果 $>0$ ，则 $right -= 1$ ，如果 $<0$ ，则 $left += 1$ 。<br>\n同时，题目要求不能包含重复的三元组，因此 $+= 1$ 一类的操作都要换成找到下一个不重复的元素。<br>\n同时，数组已经是递增的了，有一个优化操作，当 n\n## 代码\n```swift\nclass Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        var ans = [[Int]]()\n        let nums_sorted = nums.sorted()\n        var count = nums_sorted.count\n        for i in 0..<count - 2 {\n            if i == 0 || nums_sorted[i] != nums_sorted[i - 1] {\n                var left = i + 1\n                var right = count - 1\n                while left < right {\n                    let sum = nums_sorted[i] + nums_sorted[left] + nums_sorted[right]\n                    \n                    if sum == 0 {\n                        ans.append([nums_sorted[i], nums_sorted[left], nums_sorted[right]])\n\n                        repeat {\n                            left += 1\n                        } while left < right && nums_sorted[left] == nums_sorted[left - 1]\n                        repeat {\n                            right -= 1\n                        } while left < right && nums_sorted[right] == nums_sorted[right + 1]\n                    }\n                    else if sum > 0 {\n                        repeat {\n                            right -= 1\n                        } while left < right && nums_sorted[right] == nums_sorted[right + 1]\n                    } \n                    else {\n                        repeat {\n                            left += 1\n                        } while left < right && nums_sorted[left] == nums_sorted[left - 1]\n                    }\n                }\n            }\n        }\n        return ans\n    }\n}\n```\n\n<h1 id=\"42\">接雨水</h1>\n\nLeetCode 42. 接雨水<br>\n## 题目\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br>\n示例图如下：<br>\n![](https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271426890.png)\n## 解题思考\n使用双指针 left 和 right 。因为容量的限制因素是 $min(height[left], height[right])$ ，因此移动指向较小值的指针。<br>\n保存一个 leftMax 和 rightMax ，如果 $height[left] < height[right]$ , 则必有 $leftMax < rightMax$ ,那么 left 处可以存储的雨水量为 $leftMax - height[left]$，反之必然。因为我们移动指向较小值的指针。<br>\n同时使用 height[left] 和 height[right] 去更新 leftMax 和 rightMax 。<br>\n## 代码\n```swift\nclass Solution {\n    func trap(_ height: [Int]) -> Int {\n        if height.isEmpty { return 0 }\n        var left = 0\n        var right = height.count - 1\n        var leftMax = height[left]\n        var rightMax = height[right]\n        var capcity = 0\n        \n        while left < right {\n            if height[left] < height[right] {\n                capcity += leftMax - height[left]\n                left += 1\n                leftMax = max(leftMax, height[left])\n            }\n            else {\n                capcity += rightMax - height[right]\n                right -= 1\n                rightMax = max(rightMax, height[right])\n            }\n        }\n        \n        return capcity\n    }\n}\n```\n## 解法拓展\n本题还可以使用动态规划来实现。从双指针的解法来看，下标 i 处可以存储的雨水量取决于 i 处临近的左右两边最大值中的最小值。<br>\n我们可以使用两个数组 leftMax 和 rightMax 分别存储下标 i 处的左边最大值和右边最大值。<br>\n在建立 leftMax 和 rightMax 时就可以使用动态规划来。<br>\n```swift\nclass Solution {\n    func trap(_ height: [Int]) -> Int {\n        if height.isEmpty { return 0 }\n        \n        var leftMax = Array(repeating: 0, count: height.count)\n        leftMax[0] = height[0]\n        for i in 1..<height.count {\n            leftMax[i] = max(height[i], leftMax[i - 1])\n        }\n        \n        var rightMax = Array(repeating: 0, count: height.count)\n        rightMax[rightMax.count - 1] = height[height.count - 1]\n        for i in stride(from: height.count - 2, through: 0, by: -1) {\n            rightMax[i] = max(height[i], rightMax[i + 1])\n        }\n        \n        var capcity = 0\n        for i in 0..<height.count {\n            capcity += min(leftMax[i], rightMax[i]) - height[i]\n        }\n        \n        return capcity\n    }\n}\n```","slug":"Swift-Algorithm-2-DoublePointer","published":1,"updated":"2024-05-27T06:49:28.725Z","comments":1,"layout":"post","photos":[],"_id":"clwom2biz000f6bqe34s2dfw4","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#283\">移动零</a><br><a href=\"#11\">盛最多水的容器</a><br><a href=\"#15\">三数之和</a><br><a href=\"#42\">接雨水</a></p>\n<h1 id=\"0\">前言</h1>\n\n<p>本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br><br>本文的主题是双指针。<br></p>\n<h1 id=\"283\">移动零</h1>\n\n<p>LeetCode 283. 移动零<br></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br><br>请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br></p>\n<h2 id=\"解题思考\"><a href=\"#解题思考\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>最直接的思路，遍历数组，遇到 0 时，使用冒泡法将 0 交换到数组末尾。使用冒泡是为了保存非零元素的相对顺序。<br><br>但是上述的时间复杂度是 O($n^2$)。<br><br>事实上，我们可以先找到数组中第一个 0 的位置，然后使用指针 1 指向零区间的头部，使用指针 2 指向零区间之后的第一个位置，表示零区间的尾部。这样子我们就形成了一个零区间。<br><br>然后从零区间尾部开始遍历。当找到 0 时，纳入零区间。当找到非零值时，将其与零区域的第一个元素交换，也就等价于移动零区间。<br></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">moveZeroes</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: <span class=\"keyword\">inout</span> [<span class=\"type\">Int</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> zeroBegin <span class=\"operator\">=</span> nums.firstIndex(of: <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">var</span> zeroBegin <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (zeroBegin <span class=\"operator\">+</span> <span class=\"number\">1</span>)<span class=\"operator\">..&lt;</span>nums.count &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] <span class=\"operator\">!=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                nums.swapAt(zeroBegin, i)</span><br><span class=\"line\">                zeroBegin <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11\">盛最多水的容器</h1>\n\n<p>LeetCode 11. 盛最多水的容器<br></p>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br><br>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br><br>返回容器可以储存的最大水量。<br><br>说明：你不能倾斜容器。<br><br>示例图如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271346208.png\"></p>\n<h2 id=\"解题思考-1\"><a href=\"#解题思考-1\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>使用一个变量 maxArea 存储可能的最大水量。<br><br>第一个可能的最大水量的第0条线 left 和最后一条线 right 组成的区域。最大水量公式是<br><br>$$maxArea &#x3D; min(height[left], height[right]) * (right - left)$$<br><br>之后，不管是移动左指针还是移动右指针，其底边总是在缩短，所以最大水量如果能更大，只能是高在增大。<br><br>对于高而已，受到 height[left] 和 height[right] 其中更小值的制约。所以是移动指向更小值的那个指针。<br></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">maxArea</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> height.count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> maxArea <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curArea <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(height[left], height[right]) <span class=\"operator\">*</span> (right <span class=\"operator\">-</span> left)</span><br><span class=\"line\">            maxArea <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(curArea, maxArea)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[left] <span class=\"operator\">&lt;</span> height [right] &#123;</span><br><span class=\"line\">                left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxArea</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"15\">三数之和</h1>\n\n<p>LeetCode 15. 三数之和<br></p>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请<br><br>你返回所有和为 0 且不重复的三元组。<br><br>注意：答案中不可以包含重复的三元组。<br></p>\n<h2 id=\"解题思考-2\"><a href=\"#解题思考-2\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>寻找三元组，先固定一个 i， 问题就可以简化为两数之和问题。但是，这儿的两数之和需要找出所有的可能性。<br><br>使用双指针 + 排序。首先对数组做递增排序。然后使用双指针，一个 left ， 一个 right 。如果 $nums[left] + nums[right] + nums[i] &#x3D;&#x3D; 0$ ，则找到一个三元组。如果 $&gt;0$ ，则 $right -&#x3D; 1$ ，如果 $&lt;0$ ，则 $left +&#x3D; 1$ 。<br><br>同时，题目要求不能包含重复的三元组，因此 $+&#x3D; 1$ 一类的操作都要换成找到下一个不重复的元素。<br><br>同时，数组已经是递增的了，有一个优化操作，当 n</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">threeSum</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>]) -&gt; [[<span class=\"type\">Int</span>]] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ans <span class=\"operator\">=</span> [[<span class=\"type\">Int</span>]]()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nums_sorted <span class=\"operator\">=</span> nums.sorted()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> nums_sorted.count</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>count <span class=\"operator\">-</span> <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"operator\">==</span> <span class=\"number\">0</span> <span class=\"operator\">||</span> nums_sorted[i] <span class=\"operator\">!=</span> nums_sorted[i <span class=\"operator\">-</span> <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> nums_sorted[i] <span class=\"operator\">+</span> nums_sorted[left] <span class=\"operator\">+</span> nums_sorted[right]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> sum <span class=\"operator\">==</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                        ans.append([nums_sorted[i], nums_sorted[left], nums_sorted[right]])</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[left] <span class=\"operator\">==</span> nums_sorted[left <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[right] <span class=\"operator\">==</span> nums_sorted[right <span class=\"operator\">+</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> sum <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[right] <span class=\"operator\">==</span> nums_sorted[right <span class=\"operator\">+</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125; </span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[left] <span class=\"operator\">==</span> nums_sorted[left <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"42\">接雨水</h1>\n\n<p>LeetCode 42. 接雨水<br></p>\n<h2 id=\"题目-3\"><a href=\"#题目-3\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br><br>示例图如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271426890.png\"></p>\n<h2 id=\"解题思考-3\"><a href=\"#解题思考-3\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>使用双指针 left 和 right 。因为容量的限制因素是 $min(height[left], height[right])$ ，因此移动指向较小值的指针。<br><br>保存一个 leftMax 和 rightMax ，如果 $height[left] &lt; height[right]$ , 则必有 $leftMax &lt; rightMax$ ,那么 left 处可以存储的雨水量为 $leftMax - height[left]$，反之必然。因为我们移动指向较小值的指针。<br><br>同时使用 height[left] 和 height[right] 去更新 leftMax 和 rightMax 。<br></p>\n<h2 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">trap</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> height.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> height.count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftMax <span class=\"operator\">=</span> height[left]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rightMax <span class=\"operator\">=</span> height[right]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> capcity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[left] <span class=\"operator\">&lt;</span> height[right] &#123;</span><br><span class=\"line\">                capcity <span class=\"operator\">+=</span> leftMax <span class=\"operator\">-</span> height[left]</span><br><span class=\"line\">                left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                leftMax <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(leftMax, height[left])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                capcity <span class=\"operator\">+=</span> rightMax <span class=\"operator\">-</span> height[right]</span><br><span class=\"line\">                right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                rightMax <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(rightMax, height[right])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> capcity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解法拓展\"><a href=\"#解法拓展\" class=\"headerlink\" title=\"解法拓展\"></a>解法拓展</h2><p>本题还可以使用动态规划来实现。从双指针的解法来看，下标 i 处可以存储的雨水量取决于 i 处临近的左右两边最大值中的最小值。<br><br>我们可以使用两个数组 leftMax 和 rightMax 分别存储下标 i 处的左边最大值和右边最大值。<br><br>在建立 leftMax 和 rightMax 时就可以使用动态规划来。<br></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">trap</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> height.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftMax <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0</span>, count: height.count)</span><br><span class=\"line\">        leftMax[<span class=\"number\">0</span>] <span class=\"operator\">=</span> height[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">..&lt;</span>height.count &#123;</span><br><span class=\"line\">            leftMax[i] <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(height[i], leftMax[i <span class=\"operator\">-</span> <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rightMax <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0</span>, count: height.count)</span><br><span class=\"line\">        rightMax[rightMax.count <span class=\"operator\">-</span> <span class=\"number\">1</span>] <span class=\"operator\">=</span> height[height.count <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">stride</span>(from: height.count <span class=\"operator\">-</span> <span class=\"number\">2</span>, through: <span class=\"number\">0</span>, by: <span class=\"operator\">-</span><span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            rightMax[i] <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(height[i], rightMax[i <span class=\"operator\">+</span> <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> capcity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>height.count &#123;</span><br><span class=\"line\">            capcity <span class=\"operator\">+=</span> <span class=\"built_in\">min</span>(leftMax[i], rightMax[i]) <span class=\"operator\">-</span> height[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> capcity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p><a href=\"#0\">前言</a><br><a href=\"#283\">移动零</a><br><a href=\"#11\">盛最多水的容器</a><br><a href=\"#15\">三数之和</a><br><a href=\"#42\">接雨水</a></p>\n<h1 id=\"0\">前言</h1>\n\n<p>本文题目来源 LeetCode ，主要用于记录笔者的一些解题思路和思考。<br><br>本文的主题是双指针。<br></p>\n<h1 id=\"283\">移动零</h1>\n\n<p>LeetCode 283. 移动零<br></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br><br>请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br></p>\n<h2 id=\"解题思考\"><a href=\"#解题思考\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>最直接的思路，遍历数组，遇到 0 时，使用冒泡法将 0 交换到数组末尾。使用冒泡是为了保存非零元素的相对顺序。<br><br>但是上述的时间复杂度是 O($n^2$)。<br><br>事实上，我们可以先找到数组中第一个 0 的位置，然后使用指针 1 指向零区间的头部，使用指针 2 指向零区间之后的第一个位置，表示零区间的尾部。这样子我们就形成了一个零区间。<br><br>然后从零区间尾部开始遍历。当找到 0 时，纳入零区间。当找到非零值时，将其与零区域的第一个元素交换，也就等价于移动零区间。<br></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">moveZeroes</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: <span class=\"keyword\">inout</span> [<span class=\"type\">Int</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> zeroBegin <span class=\"operator\">=</span> nums.firstIndex(of: <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">var</span> zeroBegin <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (zeroBegin <span class=\"operator\">+</span> <span class=\"number\">1</span>)<span class=\"operator\">..&lt;</span>nums.count &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] <span class=\"operator\">!=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                nums.swapAt(zeroBegin, i)</span><br><span class=\"line\">                zeroBegin <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11\">盛最多水的容器</h1>\n\n<p>LeetCode 11. 盛最多水的容器<br></p>\n<h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br><br>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br><br>返回容器可以储存的最大水量。<br><br>说明：你不能倾斜容器。<br><br>示例图如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271346208.png\"></p>\n<h2 id=\"解题思考-1\"><a href=\"#解题思考-1\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>使用一个变量 maxArea 存储可能的最大水量。<br><br>第一个可能的最大水量的第0条线 left 和最后一条线 right 组成的区域。最大水量公式是<br><br>$$maxArea &#x3D; min(height[left], height[right]) * (right - left)$$<br><br>之后，不管是移动左指针还是移动右指针，其底边总是在缩短，所以最大水量如果能更大，只能是高在增大。<br><br>对于高而已，受到 height[left] 和 height[right] 其中更小值的制约。所以是移动指向更小值的那个指针。<br></p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">maxArea</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> height.count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> maxArea <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curArea <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(height[left], height[right]) <span class=\"operator\">*</span> (right <span class=\"operator\">-</span> left)</span><br><span class=\"line\">            maxArea <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(curArea, maxArea)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[left] <span class=\"operator\">&lt;</span> height [right] &#123;</span><br><span class=\"line\">                left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxArea</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"15\">三数之和</h1>\n\n<p>LeetCode 15. 三数之和<br></p>\n<h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请<br><br>你返回所有和为 0 且不重复的三元组。<br><br>注意：答案中不可以包含重复的三元组。<br></p>\n<h2 id=\"解题思考-2\"><a href=\"#解题思考-2\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>寻找三元组，先固定一个 i， 问题就可以简化为两数之和问题。但是，这儿的两数之和需要找出所有的可能性。<br><br>使用双指针 + 排序。首先对数组做递增排序。然后使用双指针，一个 left ， 一个 right 。如果 $nums[left] + nums[right] + nums[i] &#x3D;&#x3D; 0$ ，则找到一个三元组。如果 $&gt;0$ ，则 $right -&#x3D; 1$ ，如果 $&lt;0$ ，则 $left +&#x3D; 1$ 。<br><br>同时，题目要求不能包含重复的三元组，因此 $+&#x3D; 1$ 一类的操作都要换成找到下一个不重复的元素。<br><br>同时，数组已经是递增的了，有一个优化操作，当 n</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">threeSum</span>(<span class=\"keyword\">_</span> <span class=\"params\">nums</span>: [<span class=\"type\">Int</span>]) -&gt; [[<span class=\"type\">Int</span>]] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ans <span class=\"operator\">=</span> [[<span class=\"type\">Int</span>]]()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nums_sorted <span class=\"operator\">=</span> nums.sorted()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> nums_sorted.count</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>count <span class=\"operator\">-</span> <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"operator\">==</span> <span class=\"number\">0</span> <span class=\"operator\">||</span> nums_sorted[i] <span class=\"operator\">!=</span> nums_sorted[i <span class=\"operator\">-</span> <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> nums_sorted[i] <span class=\"operator\">+</span> nums_sorted[left] <span class=\"operator\">+</span> nums_sorted[right]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> sum <span class=\"operator\">==</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                        ans.append([nums_sorted[i], nums_sorted[left], nums_sorted[right]])</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[left] <span class=\"operator\">==</span> nums_sorted[left <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[right] <span class=\"operator\">==</span> nums_sorted[right <span class=\"operator\">+</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> sum <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[right] <span class=\"operator\">==</span> nums_sorted[right <span class=\"operator\">+</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125; </span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">                            left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right <span class=\"operator\">&amp;&amp;</span> nums_sorted[left] <span class=\"operator\">==</span> nums_sorted[left <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"42\">接雨水</h1>\n\n<p>LeetCode 42. 接雨水<br></p>\n<h2 id=\"题目-3\"><a href=\"#题目-3\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br><br>示例图如下：<br><br><img src=\"https://raw.githubusercontent.com/illusorycat/MyPictureBase/main/image/202405271426890.png\"></p>\n<h2 id=\"解题思考-3\"><a href=\"#解题思考-3\" class=\"headerlink\" title=\"解题思考\"></a>解题思考</h2><p>使用双指针 left 和 right 。因为容量的限制因素是 $min(height[left], height[right])$ ，因此移动指向较小值的指针。<br><br>保存一个 leftMax 和 rightMax ，如果 $height[left] &lt; height[right]$ , 则必有 $leftMax &lt; rightMax$ ,那么 left 处可以存储的雨水量为 $leftMax - height[left]$，反之必然。因为我们移动指向较小值的指针。<br><br>同时使用 height[left] 和 height[right] 去更新 leftMax 和 rightMax 。<br></p>\n<h2 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">trap</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> height.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> left <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> right <span class=\"operator\">=</span> height.count <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftMax <span class=\"operator\">=</span> height[left]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rightMax <span class=\"operator\">=</span> height[right]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> capcity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> left <span class=\"operator\">&lt;</span> right &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[left] <span class=\"operator\">&lt;</span> height[right] &#123;</span><br><span class=\"line\">                capcity <span class=\"operator\">+=</span> leftMax <span class=\"operator\">-</span> height[left]</span><br><span class=\"line\">                left <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                leftMax <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(leftMax, height[left])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                capcity <span class=\"operator\">+=</span> rightMax <span class=\"operator\">-</span> height[right]</span><br><span class=\"line\">                right <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                rightMax <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(rightMax, height[right])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> capcity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解法拓展\"><a href=\"#解法拓展\" class=\"headerlink\" title=\"解法拓展\"></a>解法拓展</h2><p>本题还可以使用动态规划来实现。从双指针的解法来看，下标 i 处可以存储的雨水量取决于 i 处临近的左右两边最大值中的最小值。<br><br>我们可以使用两个数组 leftMax 和 rightMax 分别存储下标 i 处的左边最大值和右边最大值。<br><br>在建立 leftMax 和 rightMax 时就可以使用动态规划来。<br></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">trap</span>(<span class=\"keyword\">_</span> <span class=\"params\">height</span>: [<span class=\"type\">Int</span>]) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> height.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> leftMax <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0</span>, count: height.count)</span><br><span class=\"line\">        leftMax[<span class=\"number\">0</span>] <span class=\"operator\">=</span> height[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">..&lt;</span>height.count &#123;</span><br><span class=\"line\">            leftMax[i] <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(height[i], leftMax[i <span class=\"operator\">-</span> <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rightMax <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0</span>, count: height.count)</span><br><span class=\"line\">        rightMax[rightMax.count <span class=\"operator\">-</span> <span class=\"number\">1</span>] <span class=\"operator\">=</span> height[height.count <span class=\"operator\">-</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">stride</span>(from: height.count <span class=\"operator\">-</span> <span class=\"number\">2</span>, through: <span class=\"number\">0</span>, by: <span class=\"operator\">-</span><span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            rightMax[i] <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(height[i], rightMax[i <span class=\"operator\">+</span> <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> capcity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span>height.count &#123;</span><br><span class=\"line\">            capcity <span class=\"operator\">+=</span> <span class=\"built_in\">min</span>(leftMax[i], rightMax[i]) <span class=\"operator\">-</span> height[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> capcity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clwom2biv00016bqe2uyq7l8o","tag_id":"clwom2biw00036bqebqbgal2t","_id":"clwom2biy00086bqe6ub4d9xr"},{"post_id":"clwom2bix00066bqebgvb3prz","tag_id":"clwom2biw00036bqebqbgal2t","_id":"clwom2biy000a6bqe7zer0qje"},{"post_id":"clwom2biv00026bqeaetceclv","tag_id":"clwom2biw00036bqebqbgal2t","_id":"clwom2biy000d6bqe24shgwsj"},{"post_id":"clwom2biw00046bqe0cde9ek3","tag_id":"clwom2biy000c6bqehwuj9tdv","_id":"clwom2biz000h6bqee6h3chxy"},{"post_id":"clwom2biw00056bqe1mx6hwfl","tag_id":"clwom2biz000g6bqe6cy17ebz","_id":"clwom2biz000j6bqedjjbbkfw"},{"post_id":"clwom2biy00096bqe1n3wenf1","tag_id":"clwom2biz000g6bqe6cy17ebz","_id":"clwom2biz000l6bqe9qrx3zbi"},{"post_id":"clwom2biy000b6bqe4skifexu","tag_id":"clwom2biz000k6bqegu5x834f","_id":"clwom2bj0000n6bqegddme1em"},{"post_id":"clwom2biy000e6bqe1q3ch2br","tag_id":"clwom2biz000m6bqef8g9ggmv","_id":"clwom2bj0000p6bqedkace2ld"},{"post_id":"clwom2biz000f6bqe34s2dfw4","tag_id":"clwom2biz000m6bqef8g9ggmv","_id":"clwom2bj0000q6bqef49k78d1"}],"Tag":[{"name":"工具","_id":"clwom2biw00036bqebqbgal2t"},{"name":"源码","_id":"clwom2biy000c6bqehwuj9tdv"},{"name":"语法","_id":"clwom2biz000g6bqe6cy17ebz"},{"name":"代码人生","_id":"clwom2biz000k6bqegu5x834f"},{"name":"Swift, 算法","_id":"clwom2biz000m6bqef8g9ggmv"}]}}